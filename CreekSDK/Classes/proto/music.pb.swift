// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: music.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_music_control_operate: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 音乐控制开关 true 开启,false 关闭
  public var switchFlag: Bool = false

  ///1bytes 状态
  public var status: music_status = .invalid

  ///2bytes 当前的播放时间 单位秒
  public var curTime: UInt32 = 0

  ///2bytes 总时间 单位秒
  public var totalTime: UInt32 = 0

  ///1bytes 音量
  public var volume: UInt32 = 0

  ///max:64 歌曲名
  public var musicName: Data = Data()

  ///max:64 歌手名
  public var singerName: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///设置音乐数据子项数据
public struct protocol_music_file_item: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///4bytes 预留key,暂时不用
  public var trackKey: UInt32 = 0

  ///max:64 歌曲名称
  public var songName: Data = Data()

  ///max:64 演唱者
  public var singer: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_music_file_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型
  public var operate: operate_music_file_type = .musicInvalid

  ///当前多少页，用于分段传输。
  public var pageIndex: UInt32 = 0

  ///当前页传输多少条数据，用于分段传输。
  public var pageNum: UInt32 = 0

  public var trackItem: [protocol_music_file_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_music_file_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes操作类型
  public var operate: operate_music_file_type = .musicInvalid

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 歌曲支持最大数量
  public var musicFileSupportMax: UInt32 = 0

  ///当前多少页，用于分段传输。
  public var pageIndex: UInt32 = 0

  ///当前页传输多少条数据，用于分段传输。
  public var pageNum: UInt32 = 0

  ///4bytes 总空间 单位为KB
  public var musicTotolSize: UInt32 = 0

  ///4bytes 剩余空间 单位为KB
  public var musicRemainSize: UInt32 = 0

  ///max: 暂定50
  public var fileItems: [protocol_music_file_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_music_control_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_music_control_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "switch_flag"),
    2: .same(proto: "status"),
    3: .standard(proto: "cur_time"),
    4: .standard(proto: "total_time"),
    5: .same(proto: "volume"),
    6: .standard(proto: "music_name"),
    7: .standard(proto: "singer_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.switchFlag) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.curTime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.totalTime) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.volume) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.musicName) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.singerName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.switchFlag != false {
      try visitor.visitSingularBoolField(value: self.switchFlag, fieldNumber: 1)
    }
    if self.status != .invalid {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.curTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.curTime, fieldNumber: 3)
    }
    if self.totalTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalTime, fieldNumber: 4)
    }
    if self.volume != 0 {
      try visitor.visitSingularUInt32Field(value: self.volume, fieldNumber: 5)
    }
    if !self.musicName.isEmpty {
      try visitor.visitSingularBytesField(value: self.musicName, fieldNumber: 6)
    }
    if !self.singerName.isEmpty {
      try visitor.visitSingularBytesField(value: self.singerName, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_music_control_operate, rhs: protocol_music_control_operate) -> Bool {
    if lhs.switchFlag != rhs.switchFlag {return false}
    if lhs.status != rhs.status {return false}
    if lhs.curTime != rhs.curTime {return false}
    if lhs.totalTime != rhs.totalTime {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.musicName != rhs.musicName {return false}
    if lhs.singerName != rhs.singerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_music_file_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_music_file_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "track_key"),
    2: .standard(proto: "song_name"),
    3: .same(proto: "singer"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.trackKey) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.songName) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.singer) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.trackKey != 0 {
      try visitor.visitSingularUInt32Field(value: self.trackKey, fieldNumber: 1)
    }
    if !self.songName.isEmpty {
      try visitor.visitSingularBytesField(value: self.songName, fieldNumber: 2)
    }
    if !self.singer.isEmpty {
      try visitor.visitSingularBytesField(value: self.singer, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_music_file_item, rhs: protocol_music_file_item) -> Bool {
    if lhs.trackKey != rhs.trackKey {return false}
    if lhs.songName != rhs.songName {return false}
    if lhs.singer != rhs.singer {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_music_file_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_music_file_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "page_index"),
    3: .standard(proto: "page_num"),
    4: .standard(proto: "track_item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pageIndex) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.pageNum) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.trackItem) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .musicInvalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.pageIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageIndex, fieldNumber: 2)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageNum, fieldNumber: 3)
    }
    if !self.trackItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.trackItem, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_music_file_operate, rhs: protocol_music_file_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.pageIndex != rhs.pageIndex {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.trackItem != rhs.trackItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_music_file_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_music_file_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "func_table"),
    3: .standard(proto: "music_file_support_max"),
    4: .standard(proto: "page_index"),
    5: .standard(proto: "page_num"),
    6: .standard(proto: "music_totol_size"),
    7: .standard(proto: "music_remain_size"),
    8: .standard(proto: "file_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.musicFileSupportMax) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.pageIndex) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.pageNum) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.musicTotolSize) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.musicRemainSize) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.fileItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .musicInvalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 2)
    }
    if self.musicFileSupportMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.musicFileSupportMax, fieldNumber: 3)
    }
    if self.pageIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageIndex, fieldNumber: 4)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageNum, fieldNumber: 5)
    }
    if self.musicTotolSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.musicTotolSize, fieldNumber: 6)
    }
    if self.musicRemainSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.musicRemainSize, fieldNumber: 7)
    }
    if !self.fileItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fileItems, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_music_file_inquire_reply, rhs: protocol_music_file_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.musicFileSupportMax != rhs.musicFileSupportMax {return false}
    if lhs.pageIndex != rhs.pageIndex {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.musicTotolSize != rhs.musicTotolSize {return false}
    if lhs.musicRemainSize != rhs.musicRemainSize {return false}
    if lhs.fileItems != rhs.fileItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
