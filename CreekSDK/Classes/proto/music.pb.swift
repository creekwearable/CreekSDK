// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: music.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_music_control_operate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes music control switch true on, false off
  public var switchFlag: Bool = false

  ///1bytes status
  public var status: music_status = .invalid

  ///2bytes current playback time in seconds
  public var curTime: UInt32 = 0

  ///2bytes total time in seconds
  public var totalTime: UInt32 = 0

  ///1bytes volume
  public var volume: UInt32 = 0

  ///max:64 song name
  public var musicName: Data = Data()

  ///max:64 singer name
  public var singerName: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_music_control_operate: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_music_control_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_music_control_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "switch_flag"),
    2: .same(proto: "status"),
    3: .standard(proto: "cur_time"),
    4: .standard(proto: "total_time"),
    5: .same(proto: "volume"),
    6: .standard(proto: "music_name"),
    7: .standard(proto: "singer_name"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.switchFlag) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.curTime) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.totalTime) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.volume) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.musicName) }()
      case 7: try { try decoder.decodeSingularBytesField(value: &self.singerName) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.switchFlag != false {
      try visitor.visitSingularBoolField(value: self.switchFlag, fieldNumber: 1)
    }
    if self.status != .invalid {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.curTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.curTime, fieldNumber: 3)
    }
    if self.totalTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalTime, fieldNumber: 4)
    }
    if self.volume != 0 {
      try visitor.visitSingularUInt32Field(value: self.volume, fieldNumber: 5)
    }
    if !self.musicName.isEmpty {
      try visitor.visitSingularBytesField(value: self.musicName, fieldNumber: 6)
    }
    if !self.singerName.isEmpty {
      try visitor.visitSingularBytesField(value: self.singerName, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_music_control_operate, rhs: protocol_music_control_operate) -> Bool {
    if lhs.switchFlag != rhs.switchFlag {return false}
    if lhs.status != rhs.status {return false}
    if lhs.curTime != rhs.curTime {return false}
    if lhs.totalTime != rhs.totalTime {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.musicName != rhs.musicName {return false}
    if lhs.singerName != rhs.singerName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
