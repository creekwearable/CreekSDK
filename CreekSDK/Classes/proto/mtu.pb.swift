// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: mtu.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_connect_status_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///1bytes 重连操作
  public var reconnectOperate: Bool = false

  ///1bytes 网络状态
  public var networkStatus: Bool = false

  ///1bytes手机类型
  public var phoneType: conn_phone_type = .connNull

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_connect_status_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///4bytes 最大传输长度
  public var getTranMtuSize: UInt32 = 0

  ///1bytes ble蓝牙配对状态
  public var blePairingStatus: Bool = false

  ///1bytes bt蓝牙配对状态
  public var btPairingStatus: Bool = false

  ///1bytes bt蓝牙连接状态
  public var btConnectStatus: Bool = false

  ///spp文件传输prn
  public var sppFileTranPrn: UInt32 = 0

  ///1bytes ble hid配对状态 目前戒指在用
  public var bleHidPairingStatus: Bool = false

  ///ble文件传输prn
  public var bleFileTranPrn: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_connect_status_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_connect_status_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "reconnect_operate"),
    3: .standard(proto: "network_status"),
    4: .standard(proto: "phone_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.reconnectOperate) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.networkStatus) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.phoneType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.reconnectOperate != false {
      try visitor.visitSingularBoolField(value: self.reconnectOperate, fieldNumber: 2)
    }
    if self.networkStatus != false {
      try visitor.visitSingularBoolField(value: self.networkStatus, fieldNumber: 3)
    }
    if self.phoneType != .connNull {
      try visitor.visitSingularEnumField(value: self.phoneType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_connect_status_operate, rhs: protocol_connect_status_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.reconnectOperate != rhs.reconnectOperate {return false}
    if lhs.networkStatus != rhs.networkStatus {return false}
    if lhs.phoneType != rhs.phoneType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_connect_status_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_connect_status_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "get_tran_mtu_size"),
    3: .standard(proto: "ble_pairing_status"),
    4: .standard(proto: "bt_pairing_status"),
    5: .standard(proto: "bt_connect_status"),
    6: .standard(proto: "spp_file_tran_prn"),
    7: .standard(proto: "ble_hid_pairing_status"),
    8: .standard(proto: "ble_file_tran_prn"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.getTranMtuSize) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.blePairingStatus) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.btPairingStatus) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.btConnectStatus) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.sppFileTranPrn) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.bleHidPairingStatus) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.bleFileTranPrn) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.getTranMtuSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.getTranMtuSize, fieldNumber: 2)
    }
    if self.blePairingStatus != false {
      try visitor.visitSingularBoolField(value: self.blePairingStatus, fieldNumber: 3)
    }
    if self.btPairingStatus != false {
      try visitor.visitSingularBoolField(value: self.btPairingStatus, fieldNumber: 4)
    }
    if self.btConnectStatus != false {
      try visitor.visitSingularBoolField(value: self.btConnectStatus, fieldNumber: 5)
    }
    if self.sppFileTranPrn != 0 {
      try visitor.visitSingularUInt32Field(value: self.sppFileTranPrn, fieldNumber: 6)
    }
    if self.bleHidPairingStatus != false {
      try visitor.visitSingularBoolField(value: self.bleHidPairingStatus, fieldNumber: 7)
    }
    if self.bleFileTranPrn != 0 {
      try visitor.visitSingularUInt32Field(value: self.bleFileTranPrn, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_connect_status_inquire_reply, rhs: protocol_connect_status_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.getTranMtuSize != rhs.getTranMtuSize {return false}
    if lhs.blePairingStatus != rhs.blePairingStatus {return false}
    if lhs.btPairingStatus != rhs.btPairingStatus {return false}
    if lhs.btConnectStatus != rhs.btConnectStatus {return false}
    if lhs.sppFileTranPrn != rhs.sppFileTranPrn {return false}
    if lhs.bleHidPairingStatus != rhs.bleHidPairingStatus {return false}
    if lhs.bleFileTranPrn != rhs.bleFileTranPrn {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
