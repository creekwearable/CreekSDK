// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: call.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

///Incoming call configuration
public struct protocol_call_switch {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///1bytes operation type 0: invalid operation 1: query 2: set
    public var operate: operate_type = .invalid
    
    ///1byte call switch true on false off
    public var callSwitch: Bool = false
    
    ///1bytes call delay in seconds
    public var callDelay: UInt32 = 0
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct protocol_call_switch_inquire_reply {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///1bytes operation type 0: invalid operation 1: query 2: set
    public var operate: operate_type = .invalid
    
    ///1byte call switch true on false off
    public var callSwitch: Bool = false
    
    ///1bytes call delay in seconds
    public var callDelay: UInt32 = 0
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

///incoming call
public struct protocol_call_remind {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///2bytes contact length
    public var contactLen: UInt32 = 0
    
    /// contact name
    public var contactText: String = String()
    
    ///2bytes length of phone number
    public var phoneNumberLen: UInt32 = 0
    
    ///max:32 phone number
    public var phoneNumber: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

///Call status
struct protocol_call_remind_status {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///1bytes incoming call status
    public var status: call_status = .receivedCall
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_call_switch: @unchecked Sendable {}
extension protocol_call_switch_inquire_reply: @unchecked Sendable {}
extension protocol_call_remind: @unchecked Sendable {}
extension protocol_call_remind_status: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_call_switch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_call_switch"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "operate"),
        2: .standard(proto: "call_switch"),
        3: .standard(proto: "call_delay"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
            case 2: try { try decoder.decodeSingularBoolField(value: &self.callSwitch) }()
            case 3: try { try decoder.decodeSingularUInt32Field(value: &self.callDelay) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.operate != .invalid {
            try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
        }
        if self.callSwitch != false {
            try visitor.visitSingularBoolField(value: self.callSwitch, fieldNumber: 2)
        }
        if self.callDelay != 0 {
            try visitor.visitSingularUInt32Field(value: self.callDelay, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: protocol_call_switch, rhs: protocol_call_switch) -> Bool {
        if lhs.operate != rhs.operate {return false}
        if lhs.callSwitch != rhs.callSwitch {return false}
        if lhs.callDelay != rhs.callDelay {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension protocol_call_switch_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_call_switch_inquire_reply"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "operate"),
        2: .standard(proto: "call_switch"),
        3: .standard(proto: "call_delay"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
            case 2: try { try decoder.decodeSingularBoolField(value: &self.callSwitch) }()
            case 3: try { try decoder.decodeSingularUInt32Field(value: &self.callDelay) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.operate != .invalid {
            try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
        }
        if self.callSwitch != false {
            try visitor.visitSingularBoolField(value: self.callSwitch, fieldNumber: 2)
        }
        if self.callDelay != 0 {
            try visitor.visitSingularUInt32Field(value: self.callDelay, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: protocol_call_switch_inquire_reply, rhs: protocol_call_switch_inquire_reply) -> Bool {
        if lhs.operate != rhs.operate {return false}
        if lhs.callSwitch != rhs.callSwitch {return false}
        if lhs.callDelay != rhs.callDelay {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension protocol_call_remind: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_call_remind"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "contact_len"),
        2: .standard(proto: "contact_text"),
        3: .standard(proto: "phone_number_len"),
        4: .standard(proto: "phone_number"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularUInt32Field(value: &self.contactLen) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.contactText) }()
            case 3: try { try decoder.decodeSingularUInt32Field(value: &self.phoneNumberLen) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.phoneNumber) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.contactLen != 0 {
            try visitor.visitSingularUInt32Field(value: self.contactLen, fieldNumber: 1)
        }
        if !self.contactText.isEmpty {
            try visitor.visitSingularStringField(value: self.contactText, fieldNumber: 2)
        }
        if self.phoneNumberLen != 0 {
            try visitor.visitSingularUInt32Field(value: self.phoneNumberLen, fieldNumber: 3)
        }
        if !self.phoneNumber.isEmpty {
            try visitor.visitSingularStringField(value: self.phoneNumber, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public  static func ==(lhs: protocol_call_remind, rhs: protocol_call_remind) -> Bool {
        if lhs.contactLen != rhs.contactLen {return false}
        if lhs.contactText != rhs.contactText {return false}
        if lhs.phoneNumberLen != rhs.phoneNumberLen {return false}
        if lhs.phoneNumber != rhs.phoneNumber {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension protocol_call_remind_status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_call_remind_status"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "status"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.status) }()
            default: break
            }
        }
    }
    
    public  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.status != .receivedCall {
            try visitor.visitSingularEnumField(value: self.status, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: protocol_call_remind_status, rhs: protocol_call_remind_status) -> Bool {
        if lhs.status != rhs.status {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
