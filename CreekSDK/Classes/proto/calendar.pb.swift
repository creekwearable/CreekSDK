// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: calendar.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct calendar_item: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///日程id
  public var id: UInt32 = 0

  ///2bytes开始日期
  public var startYear: UInt32 = 0

  ///1bytes
  public var startMonth: UInt32 = 0

  ///1bytes
  public var startDay: UInt32 = 0

  ///1bytes
  public var startHour: UInt32 = 0

  ///1bytes
  public var startMinute: UInt32 = 0

  ///2bytes结束年
  public var endYear: UInt32 = 0

  ///1bytes
  public var endMonth: UInt32 = 0

  ///1bytes
  public var endDay: UInt32 = 0

  ///1bytes
  public var endHour: UInt32 = 0

  ///1bytes
  public var endMinute: UInt32 = 0

  public var allDay: Bool = false

  ///1bytes 支持无、每天、每周、每月、每年
  public var repeatDate: repeat_calendar_date = .repeatNull

  ///支持不提醒，5分钟、10分钟、15分钟、30分钟、1小时、2小时，1天
  public var repeatTime: repeat_calendar_time = .repeatTimeNull

  ///max:50 内容
  public var content: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_calendar_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  public var calendarItem: [calendar_item] = []

  ///当前多少页，用于分段传输。
  public var pageIndex: UInt32 = 0

  ///当前页传输多少条数据，用于分段传输。
  public var pageNum: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_calendar_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 日程支持最大数量
  public var calendarSupportMax: UInt32 = 0

  public var calendarItem: [calendar_item] = []

  ///当前多少页，用于分段传输。
  public var pageIndex: UInt32 = 0

  ///当前页传输多少条数据，用于分段传输。
  public var pageNum: UInt32 = 0

  ///总共有多少个items
  public var totalItems: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension calendar_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "calendar_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "start_year"),
    3: .standard(proto: "start_month"),
    4: .standard(proto: "start_day"),
    5: .standard(proto: "start_hour"),
    6: .standard(proto: "start_minute"),
    7: .standard(proto: "end_year"),
    8: .standard(proto: "end_month"),
    9: .standard(proto: "end_day"),
    10: .standard(proto: "end_hour"),
    11: .standard(proto: "end_minute"),
    12: .standard(proto: "all_day"),
    13: .standard(proto: "repeat_date"),
    14: .standard(proto: "repeat_time"),
    15: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.startYear) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.startMonth) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.startDay) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.startHour) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.startMinute) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.endYear) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.endMonth) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.endDay) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.endHour) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.endMinute) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.allDay) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self.repeatDate) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self.repeatTime) }()
      case 15: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.startYear != 0 {
      try visitor.visitSingularUInt32Field(value: self.startYear, fieldNumber: 2)
    }
    if self.startMonth != 0 {
      try visitor.visitSingularUInt32Field(value: self.startMonth, fieldNumber: 3)
    }
    if self.startDay != 0 {
      try visitor.visitSingularUInt32Field(value: self.startDay, fieldNumber: 4)
    }
    if self.startHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.startHour, fieldNumber: 5)
    }
    if self.startMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.startMinute, fieldNumber: 6)
    }
    if self.endYear != 0 {
      try visitor.visitSingularUInt32Field(value: self.endYear, fieldNumber: 7)
    }
    if self.endMonth != 0 {
      try visitor.visitSingularUInt32Field(value: self.endMonth, fieldNumber: 8)
    }
    if self.endDay != 0 {
      try visitor.visitSingularUInt32Field(value: self.endDay, fieldNumber: 9)
    }
    if self.endHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.endHour, fieldNumber: 10)
    }
    if self.endMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.endMinute, fieldNumber: 11)
    }
    if self.allDay != false {
      try visitor.visitSingularBoolField(value: self.allDay, fieldNumber: 12)
    }
    if self.repeatDate != .repeatNull {
      try visitor.visitSingularEnumField(value: self.repeatDate, fieldNumber: 13)
    }
    if self.repeatTime != .repeatTimeNull {
      try visitor.visitSingularEnumField(value: self.repeatTime, fieldNumber: 14)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: calendar_item, rhs: calendar_item) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.startYear != rhs.startYear {return false}
    if lhs.startMonth != rhs.startMonth {return false}
    if lhs.startDay != rhs.startDay {return false}
    if lhs.startHour != rhs.startHour {return false}
    if lhs.startMinute != rhs.startMinute {return false}
    if lhs.endYear != rhs.endYear {return false}
    if lhs.endMonth != rhs.endMonth {return false}
    if lhs.endDay != rhs.endDay {return false}
    if lhs.endHour != rhs.endHour {return false}
    if lhs.endMinute != rhs.endMinute {return false}
    if lhs.allDay != rhs.allDay {return false}
    if lhs.repeatDate != rhs.repeatDate {return false}
    if lhs.repeatTime != rhs.repeatTime {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_calendar_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_calendar_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "calendar_item"),
    3: .standard(proto: "page_index"),
    4: .standard(proto: "page_num"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.calendarItem) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.pageIndex) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.pageNum) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if !self.calendarItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calendarItem, fieldNumber: 2)
    }
    if self.pageIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageIndex, fieldNumber: 3)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageNum, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_calendar_operate, rhs: protocol_calendar_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.calendarItem != rhs.calendarItem {return false}
    if lhs.pageIndex != rhs.pageIndex {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_calendar_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_calendar_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "func_table"),
    3: .standard(proto: "calendar_support_max"),
    4: .standard(proto: "calendar_item"),
    5: .standard(proto: "page_index"),
    6: .standard(proto: "page_num"),
    7: .standard(proto: "total_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.calendarSupportMax) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.calendarItem) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.pageIndex) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.pageNum) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.totalItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 2)
    }
    if self.calendarSupportMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.calendarSupportMax, fieldNumber: 3)
    }
    if !self.calendarItem.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calendarItem, fieldNumber: 4)
    }
    if self.pageIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageIndex, fieldNumber: 5)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageNum, fieldNumber: 6)
    }
    if self.totalItems != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalItems, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_calendar_inquire_reply, rhs: protocol_calendar_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.calendarSupportMax != rhs.calendarSupportMax {return false}
    if lhs.calendarItem != rhs.calendarItem {return false}
    if lhs.pageIndex != rhs.pageIndex {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.totalItems != rhs.totalItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
