// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sleepMonitor.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct protocol_sleep_monitor_operate {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///1bytes operation type 0: invalid operation 1: query 2: set
    public var operate: operate_type = .invalid
    
    ///1bytes sleep monitor mode
    public var sleepMode: sleep_monitor_type = .general
    
    ///1bytes switch true on, false off
    public var switchFlag: Bool = false
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

public struct protocol_sleep_monitor_inquire_reply {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///1bytes operation type 0: invalid operation 1: query 2: set
    public var operate: operate_type = .invalid
    
    ///1bytes sleep monitor mode
    public var sleepMode: sleep_monitor_type = .general
    
    ///1bytes switch true on, false off
    public var switchFlag: Bool = false
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_sleep_monitor_operate: @unchecked Sendable {}
extension protocol_sleep_monitor_inquire_reply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_sleep_monitor_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_sleep_monitor_operate"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "operate"),
        2: .standard(proto: "sleep_mode"),
        3: .standard(proto: "switch_flag"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
            case 2: try { try decoder.decodeSingularEnumField(value: &self.sleepMode) }()
            case 3: try { try decoder.decodeSingularBoolField(value: &self.switchFlag) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.operate != .invalid {
            try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
        }
        if self.sleepMode != .general {
            try visitor.visitSingularEnumField(value: self.sleepMode, fieldNumber: 2)
        }
        if self.switchFlag != false {
            try visitor.visitSingularBoolField(value: self.switchFlag, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: protocol_sleep_monitor_operate, rhs: protocol_sleep_monitor_operate) -> Bool {
        if lhs.operate != rhs.operate {return false}
        if lhs.sleepMode != rhs.sleepMode {return false}
        if lhs.switchFlag != rhs.switchFlag {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension protocol_sleep_monitor_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_sleep_monitor_inquire_reply"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .same(proto: "operate"),
        2: .standard(proto: "sleep_mode"),
        3: .standard(proto: "switch_flag"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
            case 2: try { try decoder.decodeSingularEnumField(value: &self.sleepMode) }()
            case 3: try { try decoder.decodeSingularBoolField(value: &self.switchFlag) }()
            default: break
            }
        }
    }
    
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.operate != .invalid {
            try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
        }
        if self.sleepMode != .general {
            try visitor.visitSingularEnumField(value: self.sleepMode, fieldNumber: 2)
        }
        if self.switchFlag != false {
            try visitor.visitSingularBoolField(value: self.switchFlag, fieldNumber: 3)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: protocol_sleep_monitor_inquire_reply, rhs: protocol_sleep_monitor_inquire_reply) -> Bool {
        if lhs.operate != rhs.operate {return false}
        if lhs.sleepMode != rhs.sleepMode {return false}
        if lhs.switchFlag != rhs.switchFlag {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
