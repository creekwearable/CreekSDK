// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sportPrescription.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_sport_prescription_config_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///选择记录的类型
  public var type: prescription_type = .prescriptionNull

  ///提醒时间 小时
  public var remindHour: UInt32 = 0

  ///提醒时间 分钟
  public var remindMinute: UInt32 = 0

  ///运动强度 最大心率区间范围值 百分比
  public var sportIntensityHrZone1: UInt32 = 0

  ///运动强度 最大心率区间范围值 百分比
  public var sportIntensityHrZone2: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_sport_prescription_config_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///选择记录的类型
  public var type: prescription_type = .prescriptionNull

  ///提醒时间 小时
  public var remindHour: UInt32 = 0

  ///提醒时间 分钟
  public var remindMinute: UInt32 = 0

  ///运动强度 最大心率区间范围值 百分比
  public var sportIntensityHrZone1: UInt32 = 0

  ///运动强度 最大心率区间范围值 百分比
  public var sportIntensityHrZone2: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct sport_prescription_blood_suger: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///晨起空腹 mmol/L 实际值放大10倍
  public var mornning: UInt32 = 0

  ///运动前 mmol/L 实际值放大10倍
  public var beforeExercise: UInt32 = 0

  ///运动后 mmol/L 实际值放大10倍
  public var afterExercise: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct sport_prescription_blood_pressure: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///晨起空腹 收缩压 mmHg
  public var mornningSystolic: UInt32 = 0

  ///晨起空腹 舒张压 mmHg
  public var mornningDiastolic: UInt32 = 0

  ///运动前 收缩压 mmHg
  public var beforeExerciseSystolic: UInt32 = 0

  ///运动前 舒张压 mmHg
  public var beforeExerciseDiastolic: UInt32 = 0

  ///运动后 收缩压 mmHg
  public var afterExerciseSystolic: UInt32 = 0

  ///运动后 舒张压 mmHg
  public var afterExerciseDiastolic: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct sport_prescription_record: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///2bytes 日期
  public var year: UInt32 = 0

  public var month: UInt32 = 0

  public var day: UInt32 = 0

  ///血糖记录
  public var bloodSuger: sport_prescription_blood_suger {
    get {return _bloodSuger ?? sport_prescription_blood_suger()}
    set {_bloodSuger = newValue}
  }
  /// Returns true if `bloodSuger` has been explicitly set.
  public var hasBloodSuger: Bool {return self._bloodSuger != nil}
  /// Clears the value of `bloodSuger`. Subsequent reads from it will return its default value.
  public mutating func clearBloodSuger() {self._bloodSuger = nil}

  ///血压记录
  public var bloodPressure: sport_prescription_blood_pressure {
    get {return _bloodPressure ?? sport_prescription_blood_pressure()}
    set {_bloodPressure = newValue}
  }
  /// Returns true if `bloodPressure` has been explicitly set.
  public var hasBloodPressure: Bool {return self._bloodPressure != nil}
  /// Clears the value of `bloodPressure`. Subsequent reads from it will return its default value.
  public mutating func clearBloodPressure() {self._bloodPressure = nil}

  ///体重 KG 实际值放大10倍
  public var weight: UInt32 = 0

  ///操作的时间，utc时间,比如操作记录，这个时间点作为操作时间
  public var operateUtcTime: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _bloodSuger: sport_prescription_blood_suger? = nil
  fileprivate var _bloodPressure: sport_prescription_blood_pressure? = nil
}

public struct protocol_sport_prescription_record_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///max:30 运动处方记录
  public var record: [sport_prescription_record] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_sport_prescription_record_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///max:30 运动处方记录
  public var record: [sport_prescription_record] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_sport_prescription_config_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_sport_prescription_config_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .same(proto: "type"),
    3: .standard(proto: "remind_hour"),
    4: .standard(proto: "remind_minute"),
    5: .standard(proto: "sport_intensity_hr_zone1"),
    6: .standard(proto: "sport_intensity_hr_zone2"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.remindHour) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.remindMinute) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.sportIntensityHrZone1) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.sportIntensityHrZone2) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.type != .prescriptionNull {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    if self.remindHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.remindHour, fieldNumber: 3)
    }
    if self.remindMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.remindMinute, fieldNumber: 4)
    }
    if self.sportIntensityHrZone1 != 0 {
      try visitor.visitSingularUInt32Field(value: self.sportIntensityHrZone1, fieldNumber: 5)
    }
    if self.sportIntensityHrZone2 != 0 {
      try visitor.visitSingularUInt32Field(value: self.sportIntensityHrZone2, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_sport_prescription_config_operate, rhs: protocol_sport_prescription_config_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.type != rhs.type {return false}
    if lhs.remindHour != rhs.remindHour {return false}
    if lhs.remindMinute != rhs.remindMinute {return false}
    if lhs.sportIntensityHrZone1 != rhs.sportIntensityHrZone1 {return false}
    if lhs.sportIntensityHrZone2 != rhs.sportIntensityHrZone2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_sport_prescription_config_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_sport_prescription_config_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "operate"),
    3: .same(proto: "type"),
    4: .standard(proto: "remind_hour"),
    5: .standard(proto: "remind_minute"),
    6: .standard(proto: "sport_intensity_hr_zone1"),
    7: .standard(proto: "sport_intensity_hr_zone2"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.remindHour) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.remindMinute) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.sportIntensityHrZone1) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.sportIntensityHrZone2) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 1)
    }
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 2)
    }
    if self.type != .prescriptionNull {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 3)
    }
    if self.remindHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.remindHour, fieldNumber: 4)
    }
    if self.remindMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.remindMinute, fieldNumber: 5)
    }
    if self.sportIntensityHrZone1 != 0 {
      try visitor.visitSingularUInt32Field(value: self.sportIntensityHrZone1, fieldNumber: 6)
    }
    if self.sportIntensityHrZone2 != 0 {
      try visitor.visitSingularUInt32Field(value: self.sportIntensityHrZone2, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_sport_prescription_config_inquire_reply, rhs: protocol_sport_prescription_config_inquire_reply) -> Bool {
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.operate != rhs.operate {return false}
    if lhs.type != rhs.type {return false}
    if lhs.remindHour != rhs.remindHour {return false}
    if lhs.remindMinute != rhs.remindMinute {return false}
    if lhs.sportIntensityHrZone1 != rhs.sportIntensityHrZone1 {return false}
    if lhs.sportIntensityHrZone2 != rhs.sportIntensityHrZone2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension sport_prescription_blood_suger: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "sport_prescription_blood_suger"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mornning"),
    2: .standard(proto: "before_exercise"),
    3: .standard(proto: "after_exercise"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.mornning) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.beforeExercise) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.afterExercise) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mornning != 0 {
      try visitor.visitSingularUInt32Field(value: self.mornning, fieldNumber: 1)
    }
    if self.beforeExercise != 0 {
      try visitor.visitSingularUInt32Field(value: self.beforeExercise, fieldNumber: 2)
    }
    if self.afterExercise != 0 {
      try visitor.visitSingularUInt32Field(value: self.afterExercise, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: sport_prescription_blood_suger, rhs: sport_prescription_blood_suger) -> Bool {
    if lhs.mornning != rhs.mornning {return false}
    if lhs.beforeExercise != rhs.beforeExercise {return false}
    if lhs.afterExercise != rhs.afterExercise {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension sport_prescription_blood_pressure: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "sport_prescription_blood_pressure"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mornning_systolic"),
    2: .standard(proto: "mornning_diastolic"),
    3: .standard(proto: "before_exercise_systolic"),
    4: .standard(proto: "before_exercise_diastolic"),
    5: .standard(proto: "after_exercise_systolic"),
    6: .standard(proto: "after_exercise_diastolic"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.mornningSystolic) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.mornningDiastolic) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.beforeExerciseSystolic) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.beforeExerciseDiastolic) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.afterExerciseSystolic) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.afterExerciseDiastolic) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mornningSystolic != 0 {
      try visitor.visitSingularUInt32Field(value: self.mornningSystolic, fieldNumber: 1)
    }
    if self.mornningDiastolic != 0 {
      try visitor.visitSingularUInt32Field(value: self.mornningDiastolic, fieldNumber: 2)
    }
    if self.beforeExerciseSystolic != 0 {
      try visitor.visitSingularUInt32Field(value: self.beforeExerciseSystolic, fieldNumber: 3)
    }
    if self.beforeExerciseDiastolic != 0 {
      try visitor.visitSingularUInt32Field(value: self.beforeExerciseDiastolic, fieldNumber: 4)
    }
    if self.afterExerciseSystolic != 0 {
      try visitor.visitSingularUInt32Field(value: self.afterExerciseSystolic, fieldNumber: 5)
    }
    if self.afterExerciseDiastolic != 0 {
      try visitor.visitSingularUInt32Field(value: self.afterExerciseDiastolic, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: sport_prescription_blood_pressure, rhs: sport_prescription_blood_pressure) -> Bool {
    if lhs.mornningSystolic != rhs.mornningSystolic {return false}
    if lhs.mornningDiastolic != rhs.mornningDiastolic {return false}
    if lhs.beforeExerciseSystolic != rhs.beforeExerciseSystolic {return false}
    if lhs.beforeExerciseDiastolic != rhs.beforeExerciseDiastolic {return false}
    if lhs.afterExerciseSystolic != rhs.afterExerciseSystolic {return false}
    if lhs.afterExerciseDiastolic != rhs.afterExerciseDiastolic {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension sport_prescription_record: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "sport_prescription_record"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "day"),
    4: .standard(proto: "blood_suger"),
    5: .standard(proto: "blood_pressure"),
    6: .same(proto: "weight"),
    7: .standard(proto: "operate_utc_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.year) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.month) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.day) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._bloodSuger) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._bloodPressure) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.weight) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.operateUtcTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.year != 0 {
      try visitor.visitSingularUInt32Field(value: self.year, fieldNumber: 1)
    }
    if self.month != 0 {
      try visitor.visitSingularUInt32Field(value: self.month, fieldNumber: 2)
    }
    if self.day != 0 {
      try visitor.visitSingularUInt32Field(value: self.day, fieldNumber: 3)
    }
    try { if let v = self._bloodSuger {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._bloodPressure {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.weight != 0 {
      try visitor.visitSingularUInt32Field(value: self.weight, fieldNumber: 6)
    }
    if self.operateUtcTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.operateUtcTime, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: sport_prescription_record, rhs: sport_prescription_record) -> Bool {
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.day != rhs.day {return false}
    if lhs._bloodSuger != rhs._bloodSuger {return false}
    if lhs._bloodPressure != rhs._bloodPressure {return false}
    if lhs.weight != rhs.weight {return false}
    if lhs.operateUtcTime != rhs.operateUtcTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_sport_prescription_record_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_sport_prescription_record_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .same(proto: "record"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.record) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if !self.record.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.record, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_sport_prescription_record_operate, rhs: protocol_sport_prescription_record_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.record != rhs.record {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_sport_prescription_record_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_sport_prescription_record_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "operate"),
    3: .same(proto: "record"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.record) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 1)
    }
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 2)
    }
    if !self.record.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.record, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_sport_prescription_record_inquire_reply, rhs: protocol_sport_prescription_record_inquire_reply) -> Bool {
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.operate != rhs.operate {return false}
    if lhs.record != rhs.record {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
