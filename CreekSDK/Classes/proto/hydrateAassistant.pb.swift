// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: hydrateAassistant.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct hydrate_assistant_time: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var year: UInt32 = 0

  public var month: UInt32 = 0

  public var day: UInt32 = 0

  public var hour: UInt32 = 0

  public var minute: UInt32 = 0

  public var second: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct hydrate_assistant_time_section: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 开始时间
  public var startHour: UInt32 = 0

  ///1bytes
  public var startMinute: UInt32 = 0

  ///1bytes 结束时间
  public var endHour: UInt32 = 0

  ///1bytes
  public var endMinute: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct hydrate_assistant_setting: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///2bytes 提醒间隔,单位分钟
  public var interval: UInt32 = 0

  ///提醒开关
  public var switchFlag: Bool = false

  ///提醒时间段(max: 8)
  public var timeSection: [hydrate_assistant_time_section] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct hydrate_assistant_daily_item: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///补水的时间，小时
  public var hour: UInt32 = 0

  ///补水的时间，分钟
  public var min: UInt32 = 0

  ///补水的量
  public var drinkValue: UInt32 = 0

  ///补水的类型
  public var drinkType: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct hydrate_assistant_daily_status: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var year: UInt32 = 0

  public var month: UInt32 = 0

  public var day: UInt32 = 0

  ///完成状态
  public var status: Bool = false

  ///当天补水总量
  public var drinkValue: UInt32 = 0

  ///用户日常补水目标
  public var userNormalTarget: UInt32 = 0

  ///用户运动补水目标
  public var userSportTarget: UInt32 = 0

  ///用户压力补水目标
  public var userStressTarget: UInt32 = 0

  ///记录当天补水的次数(max: 120)
  public var dailyCount: UInt32 = 0

  ///当天补水详情
  public var item: [hydrate_assistant_daily_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_hydrate_assistant_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///上一次补水时间
  public var lastDrinkTime: hydrate_assistant_time {
    get {return _lastDrinkTime ?? hydrate_assistant_time()}
    set {_lastDrinkTime = newValue}
  }
  /// Returns true if `lastDrinkTime` has been explicitly set.
  public var hasLastDrinkTime: Bool {return self._lastDrinkTime != nil}
  /// Clears the value of `lastDrinkTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastDrinkTime() {self._lastDrinkTime = nil}

  ///7天内补水量
  public var dailyData: [hydrate_assistant_daily_status] = []

  ///设置
  public var setting: hydrate_assistant_setting {
    get {return _setting ?? hydrate_assistant_setting()}
    set {_setting = newValue}
  }
  /// Returns true if `setting` has been explicitly set.
  public var hasSetting: Bool {return self._setting != nil}
  /// Clears the value of `setting`. Subsequent reads from it will return its default value.
  public mutating func clearSetting() {self._setting = nil}

  ///设置记录的utc时间，记录时间
  public var setUtcTime: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastDrinkTime: hydrate_assistant_time? = nil
  fileprivate var _setting: hydrate_assistant_setting? = nil
}

public struct protocol_hydrate_assistant_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///上一次补水时间
  public var lastDrinkTime: hydrate_assistant_time {
    get {return _lastDrinkTime ?? hydrate_assistant_time()}
    set {_lastDrinkTime = newValue}
  }
  /// Returns true if `lastDrinkTime` has been explicitly set.
  public var hasLastDrinkTime: Bool {return self._lastDrinkTime != nil}
  /// Clears the value of `lastDrinkTime`. Subsequent reads from it will return its default value.
  public mutating func clearLastDrinkTime() {self._lastDrinkTime = nil}

  ///7天内补水量
  public var dailyData: [hydrate_assistant_daily_status] = []

  ///设置
  public var setting: hydrate_assistant_setting {
    get {return _setting ?? hydrate_assistant_setting()}
    set {_setting = newValue}
  }
  /// Returns true if `setting` has been explicitly set.
  public var hasSetting: Bool {return self._setting != nil}
  /// Clears the value of `setting`. Subsequent reads from it will return its default value.
  public mutating func clearSetting() {self._setting = nil}

  ///设置记录的utc时间，记录时间
  public var setUtcTime: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _lastDrinkTime: hydrate_assistant_time? = nil
  fileprivate var _setting: hydrate_assistant_setting? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension hydrate_assistant_time: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "hydrate_assistant_time"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "day"),
    4: .same(proto: "hour"),
    5: .same(proto: "minute"),
    6: .same(proto: "second"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.year) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.month) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.day) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.hour) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.minute) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.second) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.year != 0 {
      try visitor.visitSingularUInt32Field(value: self.year, fieldNumber: 1)
    }
    if self.month != 0 {
      try visitor.visitSingularUInt32Field(value: self.month, fieldNumber: 2)
    }
    if self.day != 0 {
      try visitor.visitSingularUInt32Field(value: self.day, fieldNumber: 3)
    }
    if self.hour != 0 {
      try visitor.visitSingularUInt32Field(value: self.hour, fieldNumber: 4)
    }
    if self.minute != 0 {
      try visitor.visitSingularUInt32Field(value: self.minute, fieldNumber: 5)
    }
    if self.second != 0 {
      try visitor.visitSingularUInt32Field(value: self.second, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: hydrate_assistant_time, rhs: hydrate_assistant_time) -> Bool {
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.day != rhs.day {return false}
    if lhs.hour != rhs.hour {return false}
    if lhs.minute != rhs.minute {return false}
    if lhs.second != rhs.second {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension hydrate_assistant_time_section: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "hydrate_assistant_time_section"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "start_hour"),
    2: .standard(proto: "start_minute"),
    3: .standard(proto: "end_hour"),
    4: .standard(proto: "end_minute"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.startHour) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.startMinute) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.endHour) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.endMinute) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.startHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.startHour, fieldNumber: 1)
    }
    if self.startMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.startMinute, fieldNumber: 2)
    }
    if self.endHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.endHour, fieldNumber: 3)
    }
    if self.endMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.endMinute, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: hydrate_assistant_time_section, rhs: hydrate_assistant_time_section) -> Bool {
    if lhs.startHour != rhs.startHour {return false}
    if lhs.startMinute != rhs.startMinute {return false}
    if lhs.endHour != rhs.endHour {return false}
    if lhs.endMinute != rhs.endMinute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension hydrate_assistant_setting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "hydrate_assistant_setting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "interval"),
    2: .standard(proto: "switch_flag"),
    3: .standard(proto: "time_section"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.interval) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.switchFlag) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.timeSection) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.interval != 0 {
      try visitor.visitSingularUInt32Field(value: self.interval, fieldNumber: 1)
    }
    if self.switchFlag != false {
      try visitor.visitSingularBoolField(value: self.switchFlag, fieldNumber: 2)
    }
    if !self.timeSection.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.timeSection, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: hydrate_assistant_setting, rhs: hydrate_assistant_setting) -> Bool {
    if lhs.interval != rhs.interval {return false}
    if lhs.switchFlag != rhs.switchFlag {return false}
    if lhs.timeSection != rhs.timeSection {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension hydrate_assistant_daily_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "hydrate_assistant_daily_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hour"),
    2: .same(proto: "min"),
    3: .standard(proto: "drink_value"),
    4: .standard(proto: "drink_type"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.hour) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.min) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.drinkValue) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.drinkType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.hour != 0 {
      try visitor.visitSingularUInt32Field(value: self.hour, fieldNumber: 1)
    }
    if self.min != 0 {
      try visitor.visitSingularUInt32Field(value: self.min, fieldNumber: 2)
    }
    if self.drinkValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.drinkValue, fieldNumber: 3)
    }
    if self.drinkType != 0 {
      try visitor.visitSingularUInt32Field(value: self.drinkType, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: hydrate_assistant_daily_item, rhs: hydrate_assistant_daily_item) -> Bool {
    if lhs.hour != rhs.hour {return false}
    if lhs.min != rhs.min {return false}
    if lhs.drinkValue != rhs.drinkValue {return false}
    if lhs.drinkType != rhs.drinkType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension hydrate_assistant_daily_status: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "hydrate_assistant_daily_status"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "day"),
    4: .same(proto: "status"),
    5: .standard(proto: "drink_value"),
    6: .standard(proto: "user_normal_target"),
    7: .standard(proto: "user_sport_target"),
    8: .standard(proto: "user_stress_target"),
    9: .standard(proto: "daily_count"),
    10: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.year) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.month) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.day) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.status) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.drinkValue) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.userNormalTarget) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.userSportTarget) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.userStressTarget) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.dailyCount) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.year != 0 {
      try visitor.visitSingularUInt32Field(value: self.year, fieldNumber: 1)
    }
    if self.month != 0 {
      try visitor.visitSingularUInt32Field(value: self.month, fieldNumber: 2)
    }
    if self.day != 0 {
      try visitor.visitSingularUInt32Field(value: self.day, fieldNumber: 3)
    }
    if self.status != false {
      try visitor.visitSingularBoolField(value: self.status, fieldNumber: 4)
    }
    if self.drinkValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.drinkValue, fieldNumber: 5)
    }
    if self.userNormalTarget != 0 {
      try visitor.visitSingularUInt32Field(value: self.userNormalTarget, fieldNumber: 6)
    }
    if self.userSportTarget != 0 {
      try visitor.visitSingularUInt32Field(value: self.userSportTarget, fieldNumber: 7)
    }
    if self.userStressTarget != 0 {
      try visitor.visitSingularUInt32Field(value: self.userStressTarget, fieldNumber: 8)
    }
    if self.dailyCount != 0 {
      try visitor.visitSingularUInt32Field(value: self.dailyCount, fieldNumber: 9)
    }
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: hydrate_assistant_daily_status, rhs: hydrate_assistant_daily_status) -> Bool {
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.day != rhs.day {return false}
    if lhs.status != rhs.status {return false}
    if lhs.drinkValue != rhs.drinkValue {return false}
    if lhs.userNormalTarget != rhs.userNormalTarget {return false}
    if lhs.userSportTarget != rhs.userSportTarget {return false}
    if lhs.userStressTarget != rhs.userStressTarget {return false}
    if lhs.dailyCount != rhs.dailyCount {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_hydrate_assistant_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_hydrate_assistant_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "last_drink_time"),
    3: .standard(proto: "daily_data"),
    4: .same(proto: "setting"),
    5: .standard(proto: "set_utc_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._lastDrinkTime) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.dailyData) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._setting) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.setUtcTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    try { if let v = self._lastDrinkTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.dailyData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dailyData, fieldNumber: 3)
    }
    try { if let v = self._setting {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    if self.setUtcTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.setUtcTime, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_hydrate_assistant_operate, rhs: protocol_hydrate_assistant_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs._lastDrinkTime != rhs._lastDrinkTime {return false}
    if lhs.dailyData != rhs.dailyData {return false}
    if lhs._setting != rhs._setting {return false}
    if lhs.setUtcTime != rhs.setUtcTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_hydrate_assistant_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_hydrate_assistant_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "operate"),
    3: .standard(proto: "last_drink_time"),
    4: .standard(proto: "daily_data"),
    5: .same(proto: "setting"),
    6: .standard(proto: "set_utc_time"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._lastDrinkTime) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.dailyData) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._setting) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.setUtcTime) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 1)
    }
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 2)
    }
    try { if let v = self._lastDrinkTime {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.dailyData.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.dailyData, fieldNumber: 4)
    }
    try { if let v = self._setting {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if self.setUtcTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.setUtcTime, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_hydrate_assistant_inquire_reply, rhs: protocol_hydrate_assistant_inquire_reply) -> Bool {
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.operate != rhs.operate {return false}
    if lhs._lastDrinkTime != rhs._lastDrinkTime {return false}
    if lhs.dailyData != rhs.dailyData {return false}
    if lhs._setting != rhs._setting {return false}
    if lhs.setUtcTime != rhs.setUtcTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
