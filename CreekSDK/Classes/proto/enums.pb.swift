// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: enums.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case invalid // = 0

  ///查询
  case inquire // = 1

  ///设置
  case set // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .invalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalid
    case 1: self = .inquire
    case 2: self = .set
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .invalid: return 0
    case .inquire: return 1
    case .set: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [operate_type] = [
    .invalid,
    .inquire,
    .set,
  ]

}

public enum Platform: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///炬芯3085C平台
  case jx3085CPlatform // = 0

  ///炬芯3085L平台
  case jx3085LPlatform // = 1

  ///炬芯3085E平台
  case jx3085EPlatform // = 2

  ///炬芯3085s平台
  case jx3085SPlatform // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .jx3085CPlatform
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .jx3085CPlatform
    case 1: self = .jx3085LPlatform
    case 2: self = .jx3085EPlatform
    case 3: self = .jx3085SPlatform
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .jx3085CPlatform: return 0
    case .jx3085LPlatform: return 1
    case .jx3085EPlatform: return 2
    case .jx3085SPlatform: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Platform] = [
    .jx3085CPlatform,
    .jx3085LPlatform,
    .jx3085EPlatform,
    .jx3085SPlatform,
  ]

}

public enum Shape: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///方形
  case squareShape // = 0

  ///圆形
  case roundShape // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .squareShape
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .squareShape
    case 1: self = .roundShape
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .squareShape: return 0
    case .roundShape: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Shape] = [
    .squareShape,
    .roundShape,
  ]

}

public enum Dev_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///手表
  case watchType // = 0

  ///手环
  case bandType // = 1

  ///戒指
  case ringType // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .watchType
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .watchType
    case 1: self = .bandType
    case 2: self = .ringType
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .watchType: return 0
    case .bandType: return 1
    case .ringType: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Dev_type] = [
    .watchType,
    .bandType,
    .ringType,
  ]

}

public enum Batt_mode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///无效
  case invalidMode // = 0

  ///正常模式（非省电模式）
  case normalMode // = 1

  ///省电模式
  case ecoMode // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .invalidMode
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalidMode
    case 1: self = .normalMode
    case 2: self = .ecoMode
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .invalidMode: return 0
    case .normalMode: return 1
    case .ecoMode: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Batt_mode] = [
    .invalidMode,
    .normalMode,
    .ecoMode,
  ]

}

public enum Batt_status: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///未充电
  case normal // = 0

  ///充电中
  case charing // = 1

  ///满电
  case full // = 2

  ///低电量
  case low // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .normal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .normal
    case 1: self = .charing
    case 2: self = .full
    case 3: self = .low
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .normal: return 0
    case .charing: return 1
    case .full: return 2
    case .low: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [Batt_status] = [
    .normal,
    .charing,
    .full,
    .low,
  ]

}

public enum bind_method_support: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///配对码绑定,直接绑定都支持
  case pairingCodeNormalSupport // = 0

  ///仅支持配对码绑定
  case pairingCodeSupport // = 1

  ///仅支持直接绑定
  case normalBindSupport // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .pairingCodeNormalSupport
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pairingCodeNormalSupport
    case 1: self = .pairingCodeSupport
    case 2: self = .normalBindSupport
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pairingCodeNormalSupport: return 0
    case .pairingCodeSupport: return 1
    case .normalBindSupport: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [bind_method_support] = [
    .pairingCodeNormalSupport,
    .pairingCodeSupport,
    .normalBindSupport,
  ]

}

public enum gender_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///男性
  case genderMale // = 0

  ///女性
  case genderFemale // = 1

  ///其他
  case genderOther // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .genderMale
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .genderMale
    case 1: self = .genderFemale
    case 2: self = .genderOther
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .genderMale: return 0
    case .genderFemale: return 1
    case .genderOther: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [gender_type] = [
    .genderMale,
    .genderFemale,
    .genderOther,
  ]

}

public enum notify_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///允许通知
  case allow // = 0

  ///静默通知
  case silent // = 1

  ///关闭通知
  case close // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .allow
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .allow
    case 1: self = .silent
    case 2: self = .close
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .allow: return 0
    case .silent: return 1
    case .close: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [notify_type] = [
    .allow,
    .silent,
    .close,
  ]

}

public enum language: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///无效
  case langInvalid // = 0

  ///中文
  case chinese // = 1

  ///英语
  case english // = 2

  ///德语
  case german // = 3

  ///西班牙语
  case spanish // = 4

  ///意大利语
  case italian // = 5

  ///日语
  case japanese // = 6

  ///俄罗斯语
  case russian // = 7

  ///葡萄牙语
  case portuguese // = 8

  ///法语
  case french // = 9

  ///韩语
  case korean // = 10

  ///波兰语
  case polish // = 11

  ///捷克语
  case czech // = 12

  ///斯洛伐克语
  case slovak // = 13

  ///匈牙利语
  case hungarian // = 14

  ///希腊语
  case greek // = 15

  ///立陶宛语
  case lithuanian // = 16

  ///拉脱维亚语
  case latvian // = 17

  ///爱沙尼亚语
  case estonian // = 18

  ///保加利亚语
  case bulgarian // = 19

  ///马来语
  case malay // = 20

  ///印尼语
  case indonesian // = 21

  ///泰国
  case thailand // = 22

  ///越南语
  case vietnamese // = 23

  ///希伯来语
  case hebrew // = 24

  ///天城文
  case devanagari // = 25

  ///土耳其语
  case turkey // = 26

  ///罗马尼亚语
  case romanian // = 27

  ///荷兰语
  case dutch // = 28

  ///乌克兰语
  case ukrainian // = 29

  ///阿拉伯语
  case arabic // = 30

  ///波斯语
  case farsi // = 31

  ///中文繁体
  case tradChinese // = 32
  case UNRECOGNIZED(Int)

  public init() {
    self = .langInvalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .langInvalid
    case 1: self = .chinese
    case 2: self = .english
    case 3: self = .german
    case 4: self = .spanish
    case 5: self = .italian
    case 6: self = .japanese
    case 7: self = .russian
    case 8: self = .portuguese
    case 9: self = .french
    case 10: self = .korean
    case 11: self = .polish
    case 12: self = .czech
    case 13: self = .slovak
    case 14: self = .hungarian
    case 15: self = .greek
    case 16: self = .lithuanian
    case 17: self = .latvian
    case 18: self = .estonian
    case 19: self = .bulgarian
    case 20: self = .malay
    case 21: self = .indonesian
    case 22: self = .thailand
    case 23: self = .vietnamese
    case 24: self = .hebrew
    case 25: self = .devanagari
    case 26: self = .turkey
    case 27: self = .romanian
    case 28: self = .dutch
    case 29: self = .ukrainian
    case 30: self = .arabic
    case 31: self = .farsi
    case 32: self = .tradChinese
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .langInvalid: return 0
    case .chinese: return 1
    case .english: return 2
    case .german: return 3
    case .spanish: return 4
    case .italian: return 5
    case .japanese: return 6
    case .russian: return 7
    case .portuguese: return 8
    case .french: return 9
    case .korean: return 10
    case .polish: return 11
    case .czech: return 12
    case .slovak: return 13
    case .hungarian: return 14
    case .greek: return 15
    case .lithuanian: return 16
    case .latvian: return 17
    case .estonian: return 18
    case .bulgarian: return 19
    case .malay: return 20
    case .indonesian: return 21
    case .thailand: return 22
    case .vietnamese: return 23
    case .hebrew: return 24
    case .devanagari: return 25
    case .turkey: return 26
    case .romanian: return 27
    case .dutch: return 28
    case .ukrainian: return 29
    case .arabic: return 30
    case .farsi: return 31
    case .tradChinese: return 32
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [language] = [
    .langInvalid,
    .chinese,
    .english,
    .german,
    .spanish,
    .italian,
    .japanese,
    .russian,
    .portuguese,
    .french,
    .korean,
    .polish,
    .czech,
    .slovak,
    .hungarian,
    .greek,
    .lithuanian,
    .latvian,
    .estonian,
    .bulgarian,
    .malay,
    .indonesian,
    .thailand,
    .vietnamese,
    .hebrew,
    .devanagari,
    .turkey,
    .romanian,
    .dutch,
    .ukrainian,
    .arabic,
    .farsi,
    .tradChinese,
  ]

}

public enum bind_method: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///授权码验证
  case bindEncrypted // = 0

  ///直接绑定
  case bindNormal // = 1

  ///解除绑定
  case bindRemove // = 2

  ///配对码绑定
  case bindPairingCode // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .bindEncrypted
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .bindEncrypted
    case 1: self = .bindNormal
    case 2: self = .bindRemove
    case 3: self = .bindPairingCode
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .bindEncrypted: return 0
    case .bindNormal: return 1
    case .bindRemove: return 2
    case .bindPairingCode: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [bind_method] = [
    .bindEncrypted,
    .bindNormal,
    .bindRemove,
    .bindPairingCode,
  ]

}

public enum bind_flag: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///表示请求绑定
  case request // = 0

  ///失败
  case failed // = 1

  ///成功
  case success // = 2

  ///已绑定
  case bound // = 3

  ///保存数据
  case saveData // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .request
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .request
    case 1: self = .failed
    case 2: self = .success
    case 3: self = .bound
    case 4: self = .saveData
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .request: return 0
    case .failed: return 1
    case .success: return 2
    case .bound: return 3
    case .saveData: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [bind_flag] = [
    .request,
    .failed,
    .success,
    .bound,
    .saveData,
  ]

}

public enum bind_phone_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///安卓
  case android // = 0

  ///IOS手机
  case ios // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .android
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .android
    case 1: self = .ios
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .android: return 0
    case .ios: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [bind_phone_type] = [
    .android,
    .ios,
  ]

}

public enum disp_status: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case dispOff // = 0
  case dispOn // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .dispOff
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .dispOff
    case 1: self = .dispOn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .dispOff: return 0
    case .dispOn: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [disp_status] = [
    .dispOff,
    .dispOn,
  ]

}

public enum alarm_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///起床
  case getUp // = 0

  ///睡觉
  case sleep // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .getUp
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .getUp
    case 1: self = .sleep
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .getUp: return 0
    case .sleep: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [alarm_type] = [
    .getUp,
    .sleep,
  ]

}

public enum aod_mode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case intelligentMode // = 0
  case timerMdoe // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .intelligentMode
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .intelligentMode
    case 1: self = .timerMdoe
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .intelligentMode: return 0
    case .timerMdoe: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [aod_mode] = [
    .intelligentMode,
    .timerMdoe,
  ]

}

public enum health_monitor_mode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///手动
  case manual // = 0

  ///自动
  case auto // = 1

  ///连续监测
  case continuous // = 2

  ///智能监测
  case intellihent // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .manual
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .manual
    case 1: self = .auto
    case 2: self = .continuous
    case 3: self = .intellihent
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .manual: return 0
    case .auto: return 1
    case .continuous: return 2
    case .intellihent: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [health_monitor_mode] = [
    .manual,
    .auto,
    .continuous,
    .intellihent,
  ]

}

public enum health_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///心率
  case heartRate // = 0

  ///压力
  case stress // = 1

  ///血氧
  case spo2 // = 2

  ///噪音
  case noise // = 3

  ///身体电量
  case bodyEnergy // = 4

  ///呼吸率
  case respiratoryRate // = 5

  ///皮肤温度
  case skinTemperature // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .heartRate
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .heartRate
    case 1: self = .stress
    case 2: self = .spo2
    case 3: self = .noise
    case 4: self = .bodyEnergy
    case 5: self = .respiratoryRate
    case 6: self = .skinTemperature
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .heartRate: return 0
    case .stress: return 1
    case .spo2: return 2
    case .noise: return 3
    case .bodyEnergy: return 4
    case .respiratoryRate: return 5
    case .skinTemperature: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [health_type] = [
    .heartRate,
    .stress,
    .spo2,
    .noise,
    .bodyEnergy,
    .respiratoryRate,
    .skinTemperature,
  ]

}

public enum sleep_monitor_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///普通睡眠
  case general // = 0

  ///科学睡眠
  case science // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .general
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .general
    case 1: self = .science
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .general: return 0
    case .science: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [sleep_monitor_type] = [
    .general,
    .science,
  ]

}

public enum sync_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///心率
  case syncHeartRate // = 0

  ///压力
  case syncStress // = 1

  ///血氧
  case syncSpo2 // = 2

  ///睡眠
  case syncSleep // = 3

  ///运动数据
  case syncWorkout // = 4

  ///日常活动数据
  case syncActivity // = 5

  ///游泳数据
  case syncSwimming // = 6

  ///hrv
  case syncHrv // = 7

  ///噪音
  case syncNoise // = 8

  ///身体电量
  case syncBodyEnergy // = 9

  ///呼吸率
  case syncRespiratoryRate // = 10

  ///体温
  case syncBodyTemperature // = 11

  ///飞利浦睡眠
  case syncPspSleep // = 12
  case UNRECOGNIZED(Int)

  public init() {
    self = .syncHeartRate
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .syncHeartRate
    case 1: self = .syncStress
    case 2: self = .syncSpo2
    case 3: self = .syncSleep
    case 4: self = .syncWorkout
    case 5: self = .syncActivity
    case 6: self = .syncSwimming
    case 7: self = .syncHrv
    case 8: self = .syncNoise
    case 9: self = .syncBodyEnergy
    case 10: self = .syncRespiratoryRate
    case 11: self = .syncBodyTemperature
    case 12: self = .syncPspSleep
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .syncHeartRate: return 0
    case .syncStress: return 1
    case .syncSpo2: return 2
    case .syncSleep: return 3
    case .syncWorkout: return 4
    case .syncActivity: return 5
    case .syncSwimming: return 6
    case .syncHrv: return 7
    case .syncNoise: return 8
    case .syncBodyEnergy: return 9
    case .syncRespiratoryRate: return 10
    case .syncBodyTemperature: return 11
    case .syncPspSleep: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [sync_type] = [
    .syncHeartRate,
    .syncStress,
    .syncSpo2,
    .syncSleep,
    .syncWorkout,
    .syncActivity,
    .syncSwimming,
    .syncHrv,
    .syncNoise,
    .syncBodyEnergy,
    .syncRespiratoryRate,
    .syncBodyTemperature,
    .syncPspSleep,
  ]

}

public enum sync_operate: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case startSync // = 0
  case endSync // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .startSync
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .startSync
    case 1: self = .endSync
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .startSync: return 0
    case .endSync: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [sync_operate] = [
    .startSync,
    .endSync,
  ]

}

public enum period_log: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///无记录
  case null // = 0

  ///无血量
  case notFlow // = 1

  ///照常
  case asUsual // = 2

  ///少血量
  case lightFlow // = 3

  ///中等血量
  case mendiumFlow // = 4

  ///大血量
  case heavyFlow // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .null
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .null
    case 1: self = .notFlow
    case 2: self = .asUsual
    case 3: self = .lightFlow
    case 4: self = .mendiumFlow
    case 5: self = .heavyFlow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .null: return 0
    case .notFlow: return 1
    case .asUsual: return 2
    case .lightFlow: return 3
    case .mendiumFlow: return 4
    case .heavyFlow: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [period_log] = [
    .null,
    .notFlow,
    .asUsual,
    .lightFlow,
    .mendiumFlow,
    .heavyFlow,
  ]

}

public enum event_id: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case null // = 0

  ///音乐控制
  case musicControl // = 1

  ///寻找手机
  case finePhone // = 2

  ///通知更新数据
  case syncData // = 3

  ///寻找手表
  case fineWatch // = 4

  ///音量变化(alexa需要)
  case volumeChange // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .null
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .null
    case 1: self = .musicControl
    case 2: self = .finePhone
    case 3: self = .syncData
    case 4: self = .fineWatch
    case 5: self = .volumeChange
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .null: return 0
    case .musicControl: return 1
    case .finePhone: return 2
    case .syncData: return 3
    case .fineWatch: return 4
    case .volumeChange: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [event_id] = [
    .null,
    .musicControl,
    .finePhone,
    .syncData,
    .fineWatch,
    .volumeChange,
  ]

}

public enum music_status: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///无效
  case invalid // = 0

  ///播放
  case play // = 1

  ///暂停
  case pause // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .invalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .invalid
    case 1: self = .play
    case 2: self = .pause
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .invalid: return 0
    case .play: return 1
    case .pause: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [music_status] = [
    .invalid,
    .play,
    .pause,
  ]

}

public enum weather_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///龙卷风
  case tornado // = 0

  ///热带风暴
  case tropicalStorm // = 1

  ///飓风
  case hurricane // = 2

  ///强风暴
  case strongStorms // = 3

  ///雷暴/雷雨
  case thunderstorms // = 4

  ///雨夹雪
  case rainSnow // = 5

  ///雨加冰雹
  case rainSleet // = 6

  ///混合降雨
  case wintryMix // = 7

  ///冻雨
  case freezingDrizzle // = 8

  ///毛毛雨
  case drizzle // = 9

  ///冻雨
  case freezingRain // = 10

  ///阵雨
  case showers // = 11

  ///雨
  case rain // = 12

  ///小雪
  case flurries // = 13

  ///阵雪
  case snowShowers // = 14

  ///飘雪（风力作用）
  case driftingSnow // = 15

  ///雪
  case snow // = 16

  ///冰雹
  case hail // = 17

  ///冰雹/冻雨
  case sleet // = 18

  ///扬尘/沙暴
  case blowingDustSandstorm // = 19

  ///雾气
  case foggy // = 20

  ///雾霾
  case haze // = 21

  ///烟雾
  case smoke // = 22

  ///微风
  case breezy // = 23

  ///大风
  case windy // = 24

  ///寒流
  case iceCrystals // = 25

  ///多云
  case cloudy // = 26

  ///多云间晴（晚上）
  case mostlyCloudyNight // = 27

  ///多云间晴（白天）
  case mostlyCloudyDay // = 28

  ///多云转晴（晚上）
  case partlyCloudyNight // = 29

  ///多云转晴（白天）
  case partlyCloudyDay // = 30

  ///晴天（晚上）
  case clear // = 31

  ///晴天（白天）
  case sunny // = 32

  ///晴时多云（晚上）
  case mostlyClear // = 33

  ///晴时多云（白天）
  case mostlySunny // = 34

  ///雨加冰雹
  case mixedRainHail // = 35

  ///炎热
  case hot // = 36

  ///局部雷雨
  case isolatedThunderstorms // = 37

  ///局部雷阵雨(DAY)
  case scatteredThunderstormsD // = 38

  ///零星阵雨(Night)
  case scatteredShowersNight // = 39

  ///暴雨
  case heavyRain // = 40

  ///零星阵雪
  case scatteredSnowShowersD // = 41

  ///暴雪
  case heavySnow // = 42

  ///暴风雪
  case blizzard // = 43

  ///无数据（无法使用）
  case notAvailable // = 44

  ///零星阵雨(Night)
  case scatteredSnowShowersN // = 45

  ///零星阵雪
  case scatteredShowers // = 46

  ///局部雷阵雨(Night)
  case scatteredThunderstormsN // = 47
  case UNRECOGNIZED(Int)

  public init() {
    self = .tornado
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .tornado
    case 1: self = .tropicalStorm
    case 2: self = .hurricane
    case 3: self = .strongStorms
    case 4: self = .thunderstorms
    case 5: self = .rainSnow
    case 6: self = .rainSleet
    case 7: self = .wintryMix
    case 8: self = .freezingDrizzle
    case 9: self = .drizzle
    case 10: self = .freezingRain
    case 11: self = .showers
    case 12: self = .rain
    case 13: self = .flurries
    case 14: self = .snowShowers
    case 15: self = .driftingSnow
    case 16: self = .snow
    case 17: self = .hail
    case 18: self = .sleet
    case 19: self = .blowingDustSandstorm
    case 20: self = .foggy
    case 21: self = .haze
    case 22: self = .smoke
    case 23: self = .breezy
    case 24: self = .windy
    case 25: self = .iceCrystals
    case 26: self = .cloudy
    case 27: self = .mostlyCloudyNight
    case 28: self = .mostlyCloudyDay
    case 29: self = .partlyCloudyNight
    case 30: self = .partlyCloudyDay
    case 31: self = .clear
    case 32: self = .sunny
    case 33: self = .mostlyClear
    case 34: self = .mostlySunny
    case 35: self = .mixedRainHail
    case 36: self = .hot
    case 37: self = .isolatedThunderstorms
    case 38: self = .scatteredThunderstormsD
    case 39: self = .scatteredShowersNight
    case 40: self = .heavyRain
    case 41: self = .scatteredSnowShowersD
    case 42: self = .heavySnow
    case 43: self = .blizzard
    case 44: self = .notAvailable
    case 45: self = .scatteredSnowShowersN
    case 46: self = .scatteredShowers
    case 47: self = .scatteredThunderstormsN
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .tornado: return 0
    case .tropicalStorm: return 1
    case .hurricane: return 2
    case .strongStorms: return 3
    case .thunderstorms: return 4
    case .rainSnow: return 5
    case .rainSleet: return 6
    case .wintryMix: return 7
    case .freezingDrizzle: return 8
    case .drizzle: return 9
    case .freezingRain: return 10
    case .showers: return 11
    case .rain: return 12
    case .flurries: return 13
    case .snowShowers: return 14
    case .driftingSnow: return 15
    case .snow: return 16
    case .hail: return 17
    case .sleet: return 18
    case .blowingDustSandstorm: return 19
    case .foggy: return 20
    case .haze: return 21
    case .smoke: return 22
    case .breezy: return 23
    case .windy: return 24
    case .iceCrystals: return 25
    case .cloudy: return 26
    case .mostlyCloudyNight: return 27
    case .mostlyCloudyDay: return 28
    case .partlyCloudyNight: return 29
    case .partlyCloudyDay: return 30
    case .clear: return 31
    case .sunny: return 32
    case .mostlyClear: return 33
    case .mostlySunny: return 34
    case .mixedRainHail: return 35
    case .hot: return 36
    case .isolatedThunderstorms: return 37
    case .scatteredThunderstormsD: return 38
    case .scatteredShowersNight: return 39
    case .heavyRain: return 40
    case .scatteredSnowShowersD: return 41
    case .heavySnow: return 42
    case .blizzard: return 43
    case .notAvailable: return 44
    case .scatteredSnowShowersN: return 45
    case .scatteredShowers: return 46
    case .scatteredThunderstormsN: return 47
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [weather_type] = [
    .tornado,
    .tropicalStorm,
    .hurricane,
    .strongStorms,
    .thunderstorms,
    .rainSnow,
    .rainSleet,
    .wintryMix,
    .freezingDrizzle,
    .drizzle,
    .freezingRain,
    .showers,
    .rain,
    .flurries,
    .snowShowers,
    .driftingSnow,
    .snow,
    .hail,
    .sleet,
    .blowingDustSandstorm,
    .foggy,
    .haze,
    .smoke,
    .breezy,
    .windy,
    .iceCrystals,
    .cloudy,
    .mostlyCloudyNight,
    .mostlyCloudyDay,
    .partlyCloudyNight,
    .partlyCloudyDay,
    .clear,
    .sunny,
    .mostlyClear,
    .mostlySunny,
    .mixedRainHail,
    .hot,
    .isolatedThunderstorms,
    .scatteredThunderstormsD,
    .scatteredShowersNight,
    .heavyRain,
    .scatteredSnowShowersD,
    .heavySnow,
    .blizzard,
    .notAvailable,
    .scatteredSnowShowersN,
    .scatteredShowers,
    .scatteredThunderstormsN,
  ]

}

///风向
public enum wind_direction_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///正北
  case weatherDirectionN // = 0

  ///北东北
  case weatherDirectionNne // = 1

  ///东北
  case weatherDirectionNe // = 2

  ///东东北
  case weatherDirectionEne // = 3

  ///东
  case weatherDirectionE // = 4

  ///东东南
  case weatherDirectionEse // = 5

  ///东南
  case weatherDirectionSe // = 6

  ///南东南
  case weatherDirectionSse // = 7

  ///南
  case weatherDirectionS // = 8

  ///南西南
  case weatherDirectionSsw // = 9

  ///西南
  case weatherDirectionSw // = 10

  ///西西南
  case weatherDirectionWsw // = 11

  ///西
  case weatherDirectionW // = 12

  ///西西北
  case weatherDirectionWnwm // = 13

  ///西北
  case weatherDirectionNw // = 14

  ///北西北
  case weatherDirectionNnw // = 15
  case UNRECOGNIZED(Int)

  public init() {
    self = .weatherDirectionN
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .weatherDirectionN
    case 1: self = .weatherDirectionNne
    case 2: self = .weatherDirectionNe
    case 3: self = .weatherDirectionEne
    case 4: self = .weatherDirectionE
    case 5: self = .weatherDirectionEse
    case 6: self = .weatherDirectionSe
    case 7: self = .weatherDirectionSse
    case 8: self = .weatherDirectionS
    case 9: self = .weatherDirectionSsw
    case 10: self = .weatherDirectionSw
    case 11: self = .weatherDirectionWsw
    case 12: self = .weatherDirectionW
    case 13: self = .weatherDirectionWnwm
    case 14: self = .weatherDirectionNw
    case 15: self = .weatherDirectionNnw
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .weatherDirectionN: return 0
    case .weatherDirectionNne: return 1
    case .weatherDirectionNe: return 2
    case .weatherDirectionEne: return 3
    case .weatherDirectionE: return 4
    case .weatherDirectionEse: return 5
    case .weatherDirectionSe: return 6
    case .weatherDirectionSse: return 7
    case .weatherDirectionS: return 8
    case .weatherDirectionSsw: return 9
    case .weatherDirectionSw: return 10
    case .weatherDirectionWsw: return 11
    case .weatherDirectionW: return 12
    case .weatherDirectionWnwm: return 13
    case .weatherDirectionNw: return 14
    case .weatherDirectionNnw: return 15
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [wind_direction_type] = [
    .weatherDirectionN,
    .weatherDirectionNne,
    .weatherDirectionNe,
    .weatherDirectionEne,
    .weatherDirectionE,
    .weatherDirectionEse,
    .weatherDirectionSe,
    .weatherDirectionSse,
    .weatherDirectionS,
    .weatherDirectionSsw,
    .weatherDirectionSw,
    .weatherDirectionWsw,
    .weatherDirectionW,
    .weatherDirectionWnwm,
    .weatherDirectionNw,
    .weatherDirectionNnw,
  ]

}

public enum moon_phase: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///新月
  case newMoon // = 0

  ///娥眉月
  case waxingCrescent // = 1

  ///上弦月
  case firstQuarter // = 2

  ///渐盈凸月
  case waxingGibbous // = 3

  ///满月
  case fullMoon // = 4

  ///渐亏凸月
  case waningGibbous // = 5

  ///下弦月
  case lastQuarter // = 6

  ///残月
  case waningMoon // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .newMoon
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .newMoon
    case 1: self = .waxingCrescent
    case 2: self = .firstQuarter
    case 3: self = .waxingGibbous
    case 4: self = .fullMoon
    case 5: self = .waningGibbous
    case 6: self = .lastQuarter
    case 7: self = .waningMoon
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .newMoon: return 0
    case .waxingCrescent: return 1
    case .firstQuarter: return 2
    case .waxingGibbous: return 3
    case .fullMoon: return 4
    case .waningGibbous: return 5
    case .lastQuarter: return 6
    case .waningMoon: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [moon_phase] = [
    .newMoon,
    .waxingCrescent,
    .firstQuarter,
    .waxingGibbous,
    .fullMoon,
    .waningGibbous,
    .lastQuarter,
    .waningMoon,
  ]

}

public enum message_remind_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case null // = 0
  case sms // = 1
  case email // = 2
  case calendar // = 3
  case missedCall // = 4
  case facebook // = 5
  case twitter // = 6
  case instagram // = 7
  case snapchat // = 8
  case whatsapp // = 9
  case line // = 10
  case tiktok // = 11
  case skype // = 12
  case wechat // = 13
  case fitbeing // = 14
  case microsoftTeams // = 15
  case telegramMessenger // = 16
  case messenger // = 17
  case linkedIn // = 18
  case gmail // = 19
  case microsoftOutlook // = 20
  case googleChat // = 21
  case qq // = 22
  case whatsAppBusiness // = 23
  case youtube // = 24
  case uber // = 25
  case uberEats // = 26
  case doorDashMissing // = 27
  case bancoGeneral // = 28
  case bacBank // = 29
  case googleMaps // = 30
  case amazonShopping // = 31
  case spotify // = 32
  case discord // = 33

  ///其他类型
  case ohter // = 34
  case dailyhunt // = 35
  case fastrackSmartWorld // = 36
  case inshorts // = 37
  case ola // = 38
  case phonepe // = 39
  case swiggy // = 40
  case zomato // = 41
  case amazonprime // = 42
  case amazonBusiness // = 43
  case amazonMusic // = 44
  case dunzo // = 45
  case zepto // = 46
  case flipkart // = 47
  case gaana // = 48
  case googleDrive // = 49
  case gpay // = 50
  case hotstar // = 51
  case netflix // = 52
  case jioCinema // = 53
  case rapido // = 54
  case digiLocker // = 55
  case myntra // = 56
  case urbanCompany // = 57
  case paytm // = 58
  case wynk // = 59
  case yahoo // = 60
  case ytmusic // = 61
  case titanSmartWorld // = 62
  case makeMyTrip // = 63
  case jioTv // = 64
  case feishu // = 65
  case ring // = 66
  case lark // = 67
  case kakao // = 68

  ///微博
  case weibo // = 69

  ///小红书
  case xhs // = 70

  ///拼多多
  case pinduoduo // = 71

  ///支付宝
  case alipay // = 72

  ///淘宝
  case taobao // = 73

  ///京东
  case jingdong // = 74

  ///美团
  case meituan // = 75

  ///滴滴
  case didi // = 76

  ///美团外卖
  case takeoutnew // = 77

  ///饿了么
  case ele // = 78

  ///抖音
  case douyin // = 79

  ///快手
  case kuaishou // = 80

  ///QQ邮箱
  case qqmail // = 81

  ///钉钉
  case dingtalk // = 82

  ///腾讯会议
  case wemeet // = 83

  ///企业微信
  case wework // = 84

  ///携程
  case ctrip // = 85

  ///BOSS直聘
  case boss // = 86
  case espn // = 87
  case UNRECOGNIZED(Int)

  public init() {
    self = .null
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .null
    case 1: self = .sms
    case 2: self = .email
    case 3: self = .calendar
    case 4: self = .missedCall
    case 5: self = .facebook
    case 6: self = .twitter
    case 7: self = .instagram
    case 8: self = .snapchat
    case 9: self = .whatsapp
    case 10: self = .line
    case 11: self = .tiktok
    case 12: self = .skype
    case 13: self = .wechat
    case 14: self = .fitbeing
    case 15: self = .microsoftTeams
    case 16: self = .telegramMessenger
    case 17: self = .messenger
    case 18: self = .linkedIn
    case 19: self = .gmail
    case 20: self = .microsoftOutlook
    case 21: self = .googleChat
    case 22: self = .qq
    case 23: self = .whatsAppBusiness
    case 24: self = .youtube
    case 25: self = .uber
    case 26: self = .uberEats
    case 27: self = .doorDashMissing
    case 28: self = .bancoGeneral
    case 29: self = .bacBank
    case 30: self = .googleMaps
    case 31: self = .amazonShopping
    case 32: self = .spotify
    case 33: self = .discord
    case 34: self = .ohter
    case 35: self = .dailyhunt
    case 36: self = .fastrackSmartWorld
    case 37: self = .inshorts
    case 38: self = .ola
    case 39: self = .phonepe
    case 40: self = .swiggy
    case 41: self = .zomato
    case 42: self = .amazonprime
    case 43: self = .amazonBusiness
    case 44: self = .amazonMusic
    case 45: self = .dunzo
    case 46: self = .zepto
    case 47: self = .flipkart
    case 48: self = .gaana
    case 49: self = .googleDrive
    case 50: self = .gpay
    case 51: self = .hotstar
    case 52: self = .netflix
    case 53: self = .jioCinema
    case 54: self = .rapido
    case 55: self = .digiLocker
    case 56: self = .myntra
    case 57: self = .urbanCompany
    case 58: self = .paytm
    case 59: self = .wynk
    case 60: self = .yahoo
    case 61: self = .ytmusic
    case 62: self = .titanSmartWorld
    case 63: self = .makeMyTrip
    case 64: self = .jioTv
    case 65: self = .feishu
    case 66: self = .ring
    case 67: self = .lark
    case 68: self = .kakao
    case 69: self = .weibo
    case 70: self = .xhs
    case 71: self = .pinduoduo
    case 72: self = .alipay
    case 73: self = .taobao
    case 74: self = .jingdong
    case 75: self = .meituan
    case 76: self = .didi
    case 77: self = .takeoutnew
    case 78: self = .ele
    case 79: self = .douyin
    case 80: self = .kuaishou
    case 81: self = .qqmail
    case 82: self = .dingtalk
    case 83: self = .wemeet
    case 84: self = .wework
    case 85: self = .ctrip
    case 86: self = .boss
    case 87: self = .espn
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .null: return 0
    case .sms: return 1
    case .email: return 2
    case .calendar: return 3
    case .missedCall: return 4
    case .facebook: return 5
    case .twitter: return 6
    case .instagram: return 7
    case .snapchat: return 8
    case .whatsapp: return 9
    case .line: return 10
    case .tiktok: return 11
    case .skype: return 12
    case .wechat: return 13
    case .fitbeing: return 14
    case .microsoftTeams: return 15
    case .telegramMessenger: return 16
    case .messenger: return 17
    case .linkedIn: return 18
    case .gmail: return 19
    case .microsoftOutlook: return 20
    case .googleChat: return 21
    case .qq: return 22
    case .whatsAppBusiness: return 23
    case .youtube: return 24
    case .uber: return 25
    case .uberEats: return 26
    case .doorDashMissing: return 27
    case .bancoGeneral: return 28
    case .bacBank: return 29
    case .googleMaps: return 30
    case .amazonShopping: return 31
    case .spotify: return 32
    case .discord: return 33
    case .ohter: return 34
    case .dailyhunt: return 35
    case .fastrackSmartWorld: return 36
    case .inshorts: return 37
    case .ola: return 38
    case .phonepe: return 39
    case .swiggy: return 40
    case .zomato: return 41
    case .amazonprime: return 42
    case .amazonBusiness: return 43
    case .amazonMusic: return 44
    case .dunzo: return 45
    case .zepto: return 46
    case .flipkart: return 47
    case .gaana: return 48
    case .googleDrive: return 49
    case .gpay: return 50
    case .hotstar: return 51
    case .netflix: return 52
    case .jioCinema: return 53
    case .rapido: return 54
    case .digiLocker: return 55
    case .myntra: return 56
    case .urbanCompany: return 57
    case .paytm: return 58
    case .wynk: return 59
    case .yahoo: return 60
    case .ytmusic: return 61
    case .titanSmartWorld: return 62
    case .makeMyTrip: return 63
    case .jioTv: return 64
    case .feishu: return 65
    case .ring: return 66
    case .lark: return 67
    case .kakao: return 68
    case .weibo: return 69
    case .xhs: return 70
    case .pinduoduo: return 71
    case .alipay: return 72
    case .taobao: return 73
    case .jingdong: return 74
    case .meituan: return 75
    case .didi: return 76
    case .takeoutnew: return 77
    case .ele: return 78
    case .douyin: return 79
    case .kuaishou: return 80
    case .qqmail: return 81
    case .dingtalk: return 82
    case .wemeet: return 83
    case .wework: return 84
    case .ctrip: return 85
    case .boss: return 86
    case .espn: return 87
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [message_remind_type] = [
    .null,
    .sms,
    .email,
    .calendar,
    .missedCall,
    .facebook,
    .twitter,
    .instagram,
    .snapchat,
    .whatsapp,
    .line,
    .tiktok,
    .skype,
    .wechat,
    .fitbeing,
    .microsoftTeams,
    .telegramMessenger,
    .messenger,
    .linkedIn,
    .gmail,
    .microsoftOutlook,
    .googleChat,
    .qq,
    .whatsAppBusiness,
    .youtube,
    .uber,
    .uberEats,
    .doorDashMissing,
    .bancoGeneral,
    .bacBank,
    .googleMaps,
    .amazonShopping,
    .spotify,
    .discord,
    .ohter,
    .dailyhunt,
    .fastrackSmartWorld,
    .inshorts,
    .ola,
    .phonepe,
    .swiggy,
    .zomato,
    .amazonprime,
    .amazonBusiness,
    .amazonMusic,
    .dunzo,
    .zepto,
    .flipkart,
    .gaana,
    .googleDrive,
    .gpay,
    .hotstar,
    .netflix,
    .jioCinema,
    .rapido,
    .digiLocker,
    .myntra,
    .urbanCompany,
    .paytm,
    .wynk,
    .yahoo,
    .ytmusic,
    .titanSmartWorld,
    .makeMyTrip,
    .jioTv,
    .feishu,
    .ring,
    .lark,
    .kakao,
    .weibo,
    .xhs,
    .pinduoduo,
    .alipay,
    .taobao,
    .jingdong,
    .meituan,
    .didi,
    .takeoutnew,
    .ele,
    .douyin,
    .kuaishou,
    .qqmail,
    .dingtalk,
    .wemeet,
    .wework,
    .ctrip,
    .boss,
    .espn,
  ]

}

public enum notify_os_platform: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///安卓
  case androidNotify // = 0
  case iosNotify // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .androidNotify
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .androidNotify
    case 1: self = .iosNotify
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .androidNotify: return 0
    case .iosNotify: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [notify_os_platform] = [
    .androidNotify,
    .iosNotify,
  ]

}

public enum msg_send_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///手表发送
  case watchMsgSend // = 0

  ///app回复
  case appMsgReply // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .watchMsgSend
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .watchMsgSend
    case 1: self = .appMsgReply
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .watchMsgSend: return 0
    case .appMsgReply: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [msg_send_type] = [
    .watchMsgSend,
    .appMsgReply,
  ]

}

public enum msg_reply_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///消息快捷回复
  case msgReplyMsg // = 0

  ///来电快捷回复
  case msgReplyCall // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .msgReplyMsg
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .msgReplyMsg
    case 1: self = .msgReplyCall
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .msgReplyMsg: return 0
    case .msgReplyCall: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [msg_reply_type] = [
    .msgReplyMsg,
    .msgReplyCall,
  ]

}

public enum call_status: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///来电已接
  case receivedCall // = 0

  ///来电已拒
  case rejectCall // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .receivedCall
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .receivedCall
    case 1: self = .rejectCall
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .receivedCall: return 0
    case .rejectCall: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [call_status] = [
    .receivedCall,
    .rejectCall,
  ]

}

public enum tran_direction_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///手表发起
  case watchTran // = 0

  ///app发起
  case appTran // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .watchTran
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .watchTran
    case 1: self = .appTran
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .watchTran: return 0
    case .appTran: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [tran_direction_type] = [
    .watchTran,
    .appTran,
  ]

}

public enum interval_division_mode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///最大心率区间模式
  case maximumMode // = 0

  ///储备心率区间模式
  case reserveMode // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .maximumMode
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .maximumMode
    case 1: self = .reserveMode
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .maximumMode: return 0
    case .reserveMode: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [interval_division_mode] = [
    .maximumMode,
    .reserveMode,
  ]

}

public enum heart_rate_zone_mode: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///最大心率模式
  case hrMaxMode // = 0

  ///储备心率模式
  case reserveHrMode // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .hrMaxMode
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .hrMaxMode
    case 1: self = .reserveHrMode
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .hrMaxMode: return 0
    case .reserveHrMode: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [heart_rate_zone_mode] = [
    .hrMaxMode,
    .reserveHrMode,
  ]

}

///同步gps信息
public enum gps_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///请求gps数据
  case gpsInfoRequest // = 0

  ///结束请求
  case gpsInfoEnd // = 1

  ///查询定位状态
  case gpsInfoInquire // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .gpsInfoRequest
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .gpsInfoRequest
    case 1: self = .gpsInfoEnd
    case 2: self = .gpsInfoInquire
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .gpsInfoRequest: return 0
    case .gpsInfoEnd: return 1
    case .gpsInfoInquire: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [gps_operate_type] = [
    .gpsInfoRequest,
    .gpsInfoEnd,
    .gpsInfoInquire,
  ]

}

public enum exercise_control_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case controlNull // = 0

  ///开始运动
  case controlStart // = 1

  ///结束运动
  case controlEnd // = 2

  ///暂停运动
  case controlPause // = 3

  ///恢复运动
  case controlResume // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .controlNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .controlNull
    case 1: self = .controlStart
    case 2: self = .controlEnd
    case 3: self = .controlPause
    case 4: self = .controlResume
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .controlNull: return 0
    case .controlStart: return 1
    case .controlEnd: return 2
    case .controlPause: return 3
    case .controlResume: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [exercise_control_type] = [
    .controlNull,
    .controlStart,
    .controlEnd,
    .controlPause,
    .controlResume,
  ]

}

public enum operate_course_list_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case courseInvalid // = 0

  ///查询
  case courseInquire // = 1

  ///删除
  case courseDelete // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .courseInvalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .courseInvalid
    case 1: self = .courseInquire
    case 2: self = .courseDelete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .courseInvalid: return 0
    case .courseInquire: return 1
    case .courseDelete: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [operate_course_list_type] = [
    .courseInvalid,
    .courseInquire,
    .courseDelete,
  ]

}

public enum dial_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///无效
  case null // = 0

  ///普通云表盘
  case general // = 1

  ///照片表盘
  case photo // = 2

  ///壁纸表盘
  case wallpaper // = 3

  ///自定义表盘
  case custom // = 4

  ///普通表盘+息屏表盘
  case generalAod // = 5

  ///常规息屏表盘
  case aod // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .null
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .null
    case 1: self = .general
    case 2: self = .photo
    case 3: self = .wallpaper
    case 4: self = .custom
    case 5: self = .generalAod
    case 6: self = .aod
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .null: return 0
    case .general: return 1
    case .photo: return 2
    case .wallpaper: return 3
    case .custom: return 4
    case .generalAod: return 5
    case .aod: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [dial_type] = [
    .null,
    .general,
    .photo,
    .wallpaper,
    .custom,
    .generalAod,
    .aod,
  ]

}

public enum dial_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///查询正在使用表盘
  case inquire // = 0

  ///设置表盘
  case set // = 1

  ///删除表盘
  case delete // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .inquire
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .inquire
    case 1: self = .set
    case 2: self = .delete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .inquire: return 0
    case .set: return 1
    case .delete: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [dial_operate_type] = [
    .inquire,
    .set,
    .delete,
  ]

}

public enum operate_II_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///增加
  case insert // = 0

  ///删除
  case delete // = 1

  ///改
  case update // = 2

  ///查
  case read // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .insert
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .insert
    case 1: self = .delete
    case 2: self = .update
    case 3: self = .read
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .insert: return 0
    case .delete: return 1
    case .update: return 2
    case .read: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [operate_II_type] = [
    .insert,
    .delete,
    .update,
    .read,
  ]

}

public enum alexa_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case alexaOperateNull // = 0

  ///打开mic
  case alexaMicOpen // = 1

  ///关闭mic
  case alexaMicClose // = 2

  /// 打开喇叭
  case alexaVoiceOpen // = 4

  ///关闭喇叭
  case alexaVoiceClose // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .alexaOperateNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .alexaOperateNull
    case 1: self = .alexaMicOpen
    case 2: self = .alexaMicClose
    case 4: self = .alexaVoiceOpen
    case 5: self = .alexaVoiceClose
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .alexaOperateNull: return 0
    case .alexaMicOpen: return 1
    case .alexaMicClose: return 2
    case .alexaVoiceOpen: return 4
    case .alexaVoiceClose: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [alexa_operate_type] = [
    .alexaOperateNull,
    .alexaMicOpen,
    .alexaMicClose,
    .alexaVoiceOpen,
    .alexaVoiceClose,
  ]

}

public enum alexa_status_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case alexaStatusNull // = 0

  ///正常
  case alexaStatusSuccess // = 1

  ///alexa未设置
  case alexaStatusSetUp // = 2

  ///alexa蓝牙断线
  case alexaStatusDisconnect // = 3

  ///alexa无网络
  case alexaStatusNetworkError // = 4

  ///未能识别
  case alexaStatusUnidentify // = 5

  ///重新登录
  case alexaStatusRelogin // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .alexaStatusNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .alexaStatusNull
    case 1: self = .alexaStatusSuccess
    case 2: self = .alexaStatusSetUp
    case 3: self = .alexaStatusDisconnect
    case 4: self = .alexaStatusNetworkError
    case 5: self = .alexaStatusUnidentify
    case 6: self = .alexaStatusRelogin
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .alexaStatusNull: return 0
    case .alexaStatusSuccess: return 1
    case .alexaStatusSetUp: return 2
    case .alexaStatusDisconnect: return 3
    case .alexaStatusNetworkError: return 4
    case .alexaStatusUnidentify: return 5
    case .alexaStatusRelogin: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [alexa_status_type] = [
    .alexaStatusNull,
    .alexaStatusSuccess,
    .alexaStatusSetUp,
    .alexaStatusDisconnect,
    .alexaStatusNetworkError,
    .alexaStatusUnidentify,
    .alexaStatusRelogin,
  ]

}

public enum alexa_noitce_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case alexaNoticeNull // = 0

  ///状态请求
  case alexaNoticeRequest // = 1

  ///退出alexa流程
  case alexaNoticeExit // = 2
  case alexaNoticeIrqRequest // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .alexaNoticeNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .alexaNoticeNull
    case 1: self = .alexaNoticeRequest
    case 2: self = .alexaNoticeExit
    case 3: self = .alexaNoticeIrqRequest
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .alexaNoticeNull: return 0
    case .alexaNoticeRequest: return 1
    case .alexaNoticeExit: return 2
    case .alexaNoticeIrqRequest: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [alexa_noitce_type] = [
    .alexaNoticeNull,
    .alexaNoticeRequest,
    .alexaNoticeExit,
    .alexaNoticeIrqRequest,
  ]

}

public enum alexa_timer_operate: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///添加
  case alexaTimerInsert // = 0

  ///删除
  case alexaTimerDelete // = 1

  ///删除所有
  case alexaTimerDeleteAll // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .alexaTimerInsert
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .alexaTimerInsert
    case 1: self = .alexaTimerDelete
    case 2: self = .alexaTimerDeleteAll
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .alexaTimerInsert: return 0
    case .alexaTimerDelete: return 1
    case .alexaTimerDeleteAll: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [alexa_timer_operate] = [
    .alexaTimerInsert,
    .alexaTimerDelete,
    .alexaTimerDeleteAll,
  ]

}

public enum log_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case logStart // = 0
  case logEnd // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .logStart
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .logStart
    case 1: self = .logEnd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .logStart: return 0
    case .logEnd: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [log_operate_type] = [
    .logStart,
    .logEnd,
  ]

}

public enum sensor_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case sensorTranStart // = 0
  case sensorTranEnd // = 1
  case offLineTranStart // = 2
  case offLineTranEnd // = 3
  case sensorAutoTran // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .sensorTranStart
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sensorTranStart
    case 1: self = .sensorTranEnd
    case 2: self = .offLineTranStart
    case 3: self = .offLineTranEnd
    case 4: self = .sensorAutoTran
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .sensorTranStart: return 0
    case .sensorTranEnd: return 1
    case .offLineTranStart: return 2
    case .offLineTranEnd: return 3
    case .sensorAutoTran: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [sensor_operate_type] = [
    .sensorTranStart,
    .sensorTranEnd,
    .offLineTranStart,
    .offLineTranEnd,
    .sensorAutoTran,
  ]

}

public enum long_2s_press_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case pressTypeNull // = 0
  case pressTypeSos // = 1
  case pressTypeWorkout // = 2
  case pressTypeAlexa // = 3

  ///关机重启
  case pressTypeRestart // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .pressTypeNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pressTypeNull
    case 1: self = .pressTypeSos
    case 2: self = .pressTypeWorkout
    case 3: self = .pressTypeAlexa
    case 4: self = .pressTypeRestart
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pressTypeNull: return 0
    case .pressTypeSos: return 1
    case .pressTypeWorkout: return 2
    case .pressTypeAlexa: return 3
    case .pressTypeRestart: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [long_2s_press_type] = [
    .pressTypeNull,
    .pressTypeSos,
    .pressTypeWorkout,
    .pressTypeAlexa,
    .pressTypeRestart,
  ]

}

public enum switch_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///NULL
  case switchNull // = 0

  ///开启
  case switchOn // = 1

  ///关闭
  case switchOff // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .switchNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .switchNull
    case 1: self = .switchOn
    case 2: self = .switchOff
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .switchNull: return 0
    case .switchOn: return 1
    case .switchOff: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [switch_type] = [
    .switchNull,
    .switchOn,
    .switchOff,
  ]

}

public enum http_request_method: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case post // = 0
  case get // = 1
  case delete // = 2
  case put // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .post
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .post
    case 1: self = .get
    case 2: self = .delete
    case 3: self = .put
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .post: return 0
    case .get: return 1
    case .delete: return 2
    case .put: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [http_request_method] = [
    .post,
    .get,
    .delete,
    .put,
  ]

}

public enum min_program_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///无效
  case null // = 0

  ///普通小程序
  case general // = 1

  ///表盘小程序
  case dial // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .null
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .null
    case 1: self = .general
    case 2: self = .dial
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .null: return 0
    case .general: return 1
    case .dial: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [min_program_type] = [
    .null,
    .general,
    .dial,
  ]

}

public enum min_program_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///查询小程序存储信息
  case inquire // = 0

  ///删除小程序
  case delete // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .inquire
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .inquire
    case 1: self = .delete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .inquire: return 0
    case .delete: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [min_program_operate_type] = [
    .inquire,
    .delete,
  ]

}

public enum voice_assistant_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case aiOperateNull // = 0

  ///打开mic
  case aiMicOpen // = 1

  ///关闭mic
  case aiMicClose // = 2

  /// 打开喇叭
  case aiVoiceOpen // = 4

  ///关闭喇叭
  case aiVoiceClose // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .aiOperateNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .aiOperateNull
    case 1: self = .aiMicOpen
    case 2: self = .aiMicClose
    case 4: self = .aiVoiceOpen
    case 5: self = .aiVoiceClose
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .aiOperateNull: return 0
    case .aiMicOpen: return 1
    case .aiMicClose: return 2
    case .aiVoiceOpen: return 4
    case .aiVoiceClose: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [voice_assistant_operate_type] = [
    .aiOperateNull,
    .aiMicOpen,
    .aiMicClose,
    .aiVoiceOpen,
    .aiVoiceClose,
  ]

}

public enum voice_assistant_status_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case aiStatusNull // = 0

  ///正常
  case aiStatusSuccess // = 1

  ///未设置
  case aiStatusSetUp // = 2

  ///蓝牙断线
  case aiStatusDisconnect // = 3

  ///无网络
  case aiStatusNetworkError // = 4

  ///未能识别
  case aiStatusUnidentify // = 5

  ///重新登录
  case aiStatusRelogin // = 6

  ///2s未识别到声音提示用户
  case aiStatusTips // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .aiStatusNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .aiStatusNull
    case 1: self = .aiStatusSuccess
    case 2: self = .aiStatusSetUp
    case 3: self = .aiStatusDisconnect
    case 4: self = .aiStatusNetworkError
    case 5: self = .aiStatusUnidentify
    case 6: self = .aiStatusRelogin
    case 7: self = .aiStatusTips
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .aiStatusNull: return 0
    case .aiStatusSuccess: return 1
    case .aiStatusSetUp: return 2
    case .aiStatusDisconnect: return 3
    case .aiStatusNetworkError: return 4
    case .aiStatusUnidentify: return 5
    case .aiStatusRelogin: return 6
    case .aiStatusTips: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [voice_assistant_status_type] = [
    .aiStatusNull,
    .aiStatusSuccess,
    .aiStatusSetUp,
    .aiStatusDisconnect,
    .aiStatusNetworkError,
    .aiStatusUnidentify,
    .aiStatusRelogin,
    .aiStatusTips,
  ]

}

public enum voice_assistant_noitce_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case aiNoticeNull // = 0

  ///状态请求
  case aiNoticeRequest // = 1

  ///退出语音助手流程
  case aiNoticeExit // = 2

  ///再次请求
  case aiNoticeIrqRequest // = 3

  ///结束聆听
  case aiNoticeListenStop // = 4

  ///新对话
  case aiNoticeNewTalk // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .aiNoticeNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .aiNoticeNull
    case 1: self = .aiNoticeRequest
    case 2: self = .aiNoticeExit
    case 3: self = .aiNoticeIrqRequest
    case 4: self = .aiNoticeListenStop
    case 5: self = .aiNoticeNewTalk
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .aiNoticeNull: return 0
    case .aiNoticeRequest: return 1
    case .aiNoticeExit: return 2
    case .aiNoticeIrqRequest: return 3
    case .aiNoticeListenStop: return 4
    case .aiNoticeNewTalk: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [voice_assistant_noitce_type] = [
    .aiNoticeNull,
    .aiNoticeRequest,
    .aiNoticeExit,
    .aiNoticeIrqRequest,
    .aiNoticeListenStop,
    .aiNoticeNewTalk,
  ]

}

public enum voice_assistant_dialog_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///正常对话
  case aiDialogNormal // = 0

  ///对话回显
  case aiDialogEcho // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .aiDialogNormal
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .aiDialogNormal
    case 1: self = .aiDialogEcho
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .aiDialogNormal: return 0
    case .aiDialogEcho: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [voice_assistant_dialog_type] = [
    .aiDialogNormal,
    .aiDialogEcho,
  ]

}

public enum skill_control_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///开始
  case skillControlStart // = 0

  ///停止
  case skillControlStop // = 1

  ///暂停
  case skillControlPause // = 2

  ///恢复
  case skillControlResume // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .skillControlStart
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .skillControlStart
    case 1: self = .skillControlStop
    case 2: self = .skillControlPause
    case 3: self = .skillControlResume
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .skillControlStart: return 0
    case .skillControlStop: return 1
    case .skillControlPause: return 2
    case .skillControlResume: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [skill_control_type] = [
    .skillControlStart,
    .skillControlStop,
    .skillControlPause,
    .skillControlResume,
  ]

}

public enum skill_timer_operate: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///添加
  case timerInsertTimer // = 0

  ///删除
  case timerDeleteTimer // = 1

  ///删除所有
  case timerDeleteAllTimer // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .timerInsertTimer
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .timerInsertTimer
    case 1: self = .timerDeleteTimer
    case 2: self = .timerDeleteAllTimer
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .timerInsertTimer: return 0
    case .timerDeleteTimer: return 1
    case .timerDeleteAllTimer: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [skill_timer_operate] = [
    .timerInsertTimer,
    .timerDeleteTimer,
    .timerDeleteAllTimer,
  ]

}

public enum skill_template_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///秒表
  case templateTypeStopwatch // = 0

  ///心率
  case templateTypeHeartrate // = 1

  ///压力
  case templateTypeStress // = 2

  ///血氧
  case templateTypeOxygen // = 3

  ///活动
  case templateTypeActivity // = 4

  ///步数
  case templateTypeSteps // = 5

  ///卡路里
  case templateTypeCalorie // = 6

  ///锻炼时长
  case templateTypeExerciseTime // = 7

  ///勿扰模式
  case templateTypeDisturb // = 8

  ///睡眠模式
  case templateTypeSleep // = 9

  ///亮度调节
  case templateTypeBrightness // = 10

  ///抬腕亮屏
  case templateTypeWrist // = 11

  ///手电筒
  case templateTypeFlashlight // = 12

  ///音量调节
  case templateTypeVolume // = 13

  ///查找手机
  case templateTypeFindPhone // = 14
  case UNRECOGNIZED(Int)

  public init() {
    self = .templateTypeStopwatch
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .templateTypeStopwatch
    case 1: self = .templateTypeHeartrate
    case 2: self = .templateTypeStress
    case 3: self = .templateTypeOxygen
    case 4: self = .templateTypeActivity
    case 5: self = .templateTypeSteps
    case 6: self = .templateTypeCalorie
    case 7: self = .templateTypeExerciseTime
    case 8: self = .templateTypeDisturb
    case 9: self = .templateTypeSleep
    case 10: self = .templateTypeBrightness
    case 11: self = .templateTypeWrist
    case 12: self = .templateTypeFlashlight
    case 13: self = .templateTypeVolume
    case 14: self = .templateTypeFindPhone
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .templateTypeStopwatch: return 0
    case .templateTypeHeartrate: return 1
    case .templateTypeStress: return 2
    case .templateTypeOxygen: return 3
    case .templateTypeActivity: return 4
    case .templateTypeSteps: return 5
    case .templateTypeCalorie: return 6
    case .templateTypeExerciseTime: return 7
    case .templateTypeDisturb: return 8
    case .templateTypeSleep: return 9
    case .templateTypeBrightness: return 10
    case .templateTypeWrist: return 11
    case .templateTypeFlashlight: return 12
    case .templateTypeVolume: return 13
    case .templateTypeFindPhone: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [skill_template_type] = [
    .templateTypeStopwatch,
    .templateTypeHeartrate,
    .templateTypeStress,
    .templateTypeOxygen,
    .templateTypeActivity,
    .templateTypeSteps,
    .templateTypeCalorie,
    .templateTypeExerciseTime,
    .templateTypeDisturb,
    .templateTypeSleep,
    .templateTypeBrightness,
    .templateTypeWrist,
    .templateTypeFlashlight,
    .templateTypeVolume,
    .templateTypeFindPhone,
  ]

}

public enum skill_naptimer_operate: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///添加
  case naptimerInsert // = 0

  ///删除
  case naptimerDelete // = 1

  ///删除所有
  case naptimerDeleteAll // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .naptimerInsert
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .naptimerInsert
    case 1: self = .naptimerDelete
    case 2: self = .naptimerDeleteAll
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .naptimerInsert: return 0
    case .naptimerDelete: return 1
    case .naptimerDeleteAll: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [skill_naptimer_operate] = [
    .naptimerInsert,
    .naptimerDelete,
    .naptimerDeleteAll,
  ]

}

public enum skill_music_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///played
  case skillMusicPlayed // = 0

  ///Paused
  case skillMusicPaused // = 1

  ///next
  case skillMusicNext // = 2

  ///previous
  case skillMusicPrevious // = 3

  ///volume down
  case skillMusicVolumeDown // = 4

  ///volume up
  case skillMusicVolumeUp // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .skillMusicPlayed
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .skillMusicPlayed
    case 1: self = .skillMusicPaused
    case 2: self = .skillMusicNext
    case 3: self = .skillMusicPrevious
    case 4: self = .skillMusicVolumeDown
    case 5: self = .skillMusicVolumeUp
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .skillMusicPlayed: return 0
    case .skillMusicPaused: return 1
    case .skillMusicNext: return 2
    case .skillMusicPrevious: return 3
    case .skillMusicVolumeDown: return 4
    case .skillMusicVolumeUp: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [skill_music_type] = [
    .skillMusicPlayed,
    .skillMusicPaused,
    .skillMusicNext,
    .skillMusicPrevious,
    .skillMusicVolumeDown,
    .skillMusicVolumeUp,
  ]

}

public enum app_list: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///活动
  case activity // = 0

  ///运动
  case workout // = 1

  ///计步
  case steps // = 2

  ///心率
  case heartrate // = 3

  ///睡眠
  case sleep // = 4

  ///压力
  case stress // = 5

  ///女性健康
  case menstruation // = 6

  ///呼吸训练
  case breathe // = 7

  ///闹钟
  case alarms // = 8

  ///电话
  case phone // = 9

  ///倒计时
  case timers // = 10

  ///秒表
  case stopwatch // = 11

  ///血氧
  case spo2 // = 12

  ///天气
  case weather // = 13

  ///相机控制
  case cameraRemote // = 14

  ///音乐控制
  case music // = 15

  ///寻找手机
  case findPhone // = 16

  ///世界时钟
  case worldClock // = 17

  ///设置
  case settings // = 18
  case UNRECOGNIZED(Int)

  public init() {
    self = .activity
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .activity
    case 1: self = .workout
    case 2: self = .steps
    case 3: self = .heartrate
    case 4: self = .sleep
    case 5: self = .stress
    case 6: self = .menstruation
    case 7: self = .breathe
    case 8: self = .alarms
    case 9: self = .phone
    case 10: self = .timers
    case 11: self = .stopwatch
    case 12: self = .spo2
    case 13: self = .weather
    case 14: self = .cameraRemote
    case 15: self = .music
    case 16: self = .findPhone
    case 17: self = .worldClock
    case 18: self = .settings
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .activity: return 0
    case .workout: return 1
    case .steps: return 2
    case .heartrate: return 3
    case .sleep: return 4
    case .stress: return 5
    case .menstruation: return 6
    case .breathe: return 7
    case .alarms: return 8
    case .phone: return 9
    case .timers: return 10
    case .stopwatch: return 11
    case .spo2: return 12
    case .weather: return 13
    case .cameraRemote: return 14
    case .music: return 15
    case .findPhone: return 16
    case .worldClock: return 17
    case .settings: return 18
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [app_list] = [
    .activity,
    .workout,
    .steps,
    .heartrate,
    .sleep,
    .stress,
    .menstruation,
    .breathe,
    .alarms,
    .phone,
    .timers,
    .stopwatch,
    .spo2,
    .weather,
    .cameraRemote,
    .music,
    .findPhone,
    .worldClock,
    .settings,
  ]

}

public enum prescription_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case prescriptionNull // = 0

  ///血糖
  case prescriptionBloodSugar // = 1

  ///血压
  case prescriptionBloodPressure // = 2

  ///血脂，记录体重
  case prescriptionWeight // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .prescriptionNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .prescriptionNull
    case 1: self = .prescriptionBloodSugar
    case 2: self = .prescriptionBloodPressure
    case 3: self = .prescriptionWeight
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .prescriptionNull: return 0
    case .prescriptionBloodSugar: return 1
    case .prescriptionBloodPressure: return 2
    case .prescriptionWeight: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [prescription_type] = [
    .prescriptionNull,
    .prescriptionBloodSugar,
    .prescriptionBloodPressure,
    .prescriptionWeight,
  ]

}

public enum alipay_net_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case alipayNetNull // = 0

  ///连接服务器
  case alipayNetConnect // = 1

  ///需要发送的数据
  case alipayNetWrite // = 2

  ///需要读取的数据
  case alipayNetRead // = 3

  ///断开连接
  case alipayNetClose // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .alipayNetNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .alipayNetNull
    case 1: self = .alipayNetConnect
    case 2: self = .alipayNetWrite
    case 3: self = .alipayNetRead
    case 4: self = .alipayNetClose
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .alipayNetNull: return 0
    case .alipayNetConnect: return 1
    case .alipayNetWrite: return 2
    case .alipayNetRead: return 3
    case .alipayNetClose: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [alipay_net_operate_type] = [
    .alipayNetNull,
    .alipayNetConnect,
    .alipayNetWrite,
    .alipayNetRead,
    .alipayNetClose,
  ]

}

public enum operate_music_file_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case musicInvalid // = 0

  ///查询
  case musicInquire // = 1

  ///删除
  case musicDelete // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .musicInvalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .musicInvalid
    case 1: self = .musicInquire
    case 3: self = .musicDelete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .musicInvalid: return 0
    case .musicInquire: return 1
    case .musicDelete: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [operate_music_file_type] = [
    .musicInvalid,
    .musicInquire,
    .musicDelete,
  ]

}

public enum watch_hand_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///左手
  case handLeft // = 0

  ///右手
  case handRight // = 1

  ///自动
  case handAuto // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .handLeft
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .handLeft
    case 1: self = .handRight
    case 2: self = .handAuto
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .handLeft: return 0
    case .handRight: return 1
    case .handAuto: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [watch_hand_type] = [
    .handLeft,
    .handRight,
    .handAuto,
  ]

}

public enum ring_health_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///心率
  case ringHeartRate // = 0

  ///压力
  case ringStress // = 1

  ///血氧
  case ringSpo2 // = 2

  ///HRV
  case ringHrv // = 3

  ///呼吸率
  case ringRespiratoryRate // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .ringHeartRate
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ringHeartRate
    case 1: self = .ringStress
    case 2: self = .ringSpo2
    case 3: self = .ringHrv
    case 4: self = .ringRespiratoryRate
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ringHeartRate: return 0
    case .ringStress: return 1
    case .ringSpo2: return 2
    case .ringHrv: return 3
    case .ringRespiratoryRate: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [ring_health_type] = [
    .ringHeartRate,
    .ringStress,
    .ringSpo2,
    .ringHrv,
    .ringRespiratoryRate,
  ]

}

public enum health_measure_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///开始测量
  case healthMeasureStart // = 0

  ///暂停测量
  case healthMeasurePause // = 1

  ///停止测量
  case healthMeasureStop // = 2

  ///查询状态
  case healthMeasureInquire // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .healthMeasureStart
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .healthMeasureStart
    case 1: self = .healthMeasurePause
    case 2: self = .healthMeasureStop
    case 3: self = .healthMeasureInquire
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .healthMeasureStart: return 0
    case .healthMeasurePause: return 1
    case .healthMeasureStop: return 2
    case .healthMeasureInquire: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [health_measure_type] = [
    .healthMeasureStart,
    .healthMeasurePause,
    .healthMeasureStop,
    .healthMeasureInquire,
  ]

}

public enum health_measure_status: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///测量中
  case healthStatusMeasuring // = 0

  ///未佩戴
  case healthStatusNoWear // = 1

  ///测量结果
  case healthStatusResult // = 2

  ///测量失败
  case healthStatusFail // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .healthStatusMeasuring
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .healthStatusMeasuring
    case 1: self = .healthStatusNoWear
    case 2: self = .healthStatusResult
    case 3: self = .healthStatusFail
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .healthStatusMeasuring: return 0
    case .healthStatusNoWear: return 1
    case .healthStatusResult: return 2
    case .healthStatusFail: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [health_measure_status] = [
    .healthStatusMeasuring,
    .healthStatusNoWear,
    .healthStatusResult,
    .healthStatusFail,
  ]

}

public enum repeat_calendar_date: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case repeatNull // = 0
  case repeatEveryDay // = 1
  case repeatEveryWeek // = 2
  case repeatEveryMonth // = 3
  case repeatEveryYear // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .repeatNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .repeatNull
    case 1: self = .repeatEveryDay
    case 2: self = .repeatEveryWeek
    case 3: self = .repeatEveryMonth
    case 4: self = .repeatEveryYear
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .repeatNull: return 0
    case .repeatEveryDay: return 1
    case .repeatEveryWeek: return 2
    case .repeatEveryMonth: return 3
    case .repeatEveryYear: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [repeat_calendar_date] = [
    .repeatNull,
    .repeatEveryDay,
    .repeatEveryWeek,
    .repeatEveryMonth,
    .repeatEveryYear,
  ]

}

public enum repeat_calendar_time: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case repeatTimeNull // = 0
  case repeatTime5Minutes // = 1
  case repeatTime10Minutes // = 2
  case repeatTime15Minutes // = 3
  case repeatTime30Minutes // = 4
  case repeatTime1Hour // = 5
  case repeatTime2Hour // = 6
  case repeatTime1Day // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .repeatTimeNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .repeatTimeNull
    case 1: self = .repeatTime5Minutes
    case 2: self = .repeatTime10Minutes
    case 3: self = .repeatTime15Minutes
    case 4: self = .repeatTime30Minutes
    case 5: self = .repeatTime1Hour
    case 6: self = .repeatTime2Hour
    case 7: self = .repeatTime1Day
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .repeatTimeNull: return 0
    case .repeatTime5Minutes: return 1
    case .repeatTime10Minutes: return 2
    case .repeatTime15Minutes: return 3
    case .repeatTime30Minutes: return 4
    case .repeatTime1Hour: return 5
    case .repeatTime2Hour: return 6
    case .repeatTime1Day: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [repeat_calendar_time] = [
    .repeatTimeNull,
    .repeatTime5Minutes,
    .repeatTime10Minutes,
    .repeatTime15Minutes,
    .repeatTime30Minutes,
    .repeatTime1Hour,
    .repeatTime2Hour,
    .repeatTime1Day,
  ]

}

public enum operate_health_snap_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case snapInvalid // = 0

  ///查询
  case snapInquire // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .snapInvalid
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .snapInvalid
    case 1: self = .snapInquire
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .snapInvalid: return 0
    case .snapInquire: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [operate_health_snap_type] = [
    .snapInvalid,
    .snapInquire,
  ]

}

public enum sport_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///室外跑步
  case orun // = 0

  ///室内跑步
  case irun // = 1

  ///户外走路
  case owalk // = 2

  ///室内走路
  case iwalk // = 3

  ///徒步
  case hiking // = 4

  ///户外骑行
  case ocycle // = 5

  ///室内单车
  case icycle // = 6

  ///板球
  case cricket // = 7

  ///足球
  case football // = 8

  ///泳池游泳
  case pswim // = 9

  ///开放区游泳
  case oswim // = 10

  ///瑜伽
  case yoga // = 11

  ///普拉提
  case pilates // = 12

  ///跳舞
  case dance // = 13

  ///尊巴舞
  case zumba // = 14

  ///划船机
  case rower // = 15

  ///椭圆机
  case elliptical // = 16

  ///核心训练
  case ctraining // = 17

  ///传统力量训练
  case tstraining // = 18

  ///功能性力量训练
  case fstraining // = 19

  ///HIIT
  case hiit // = 20

  ///整理放松
  case cooldown // = 21

  ///自由训练
  case workout // = 22

  ///健身
  case fitness // = 23

  ///越野跑
  case trailRunning // = 24

  /// 健身
  case treadmill // = 25

  ///有氧健身操
  case aerobics // = 26

  ///仰卧起坐
  case sitUp // = 27

  ///平板支撑
  case plank // = 28

  ///开合跳
  case jumpingJack // = 29

  ///引体向上
  case chinUp // = 30

  ///俯卧撑
  case pushUp // = 31

  ///深蹲
  case deepSquat // = 32

  ///高抬腿
  case highKneeLift // = 33

  ///哑铃
  case dumbbell // = 34

  ///杠铃
  case barbell // = 35

  ///拳击
  case boxing // = 36

  ///自由搏击
  case kickboxing // = 37

  ///单杠
  case horizontalBar // = 38

  ///双杠
  case parallelBars // = 39

  ///漫步机
  case walkingMachine // = 40

  ///登山机
  case summitTrainers // = 41

  ///球类
  case bowling // = 42

  ///网球
  case tennis // = 43

  ///乒乓球
  case tableTennis // = 44

  ///高尔夫球
  case golf // = 45

  ///篮球
  case basketball // = 46

  ///羽毛球
  case badminton // = 47

  ///曲棍球
  case hockey // = 48

  ///美式橄榄球
  case americanFootball // = 49

  ///手球
  case handball // = 50

  ///壁球
  case squash // = 51

  ///棒球
  case baseball // = 52

  ///垒球
  case softball // = 53

  ///毽球
  case shuttlecock // = 54

  ///藤球
  case sepaktakraw // = 55

  ///休闲运动
  case streetDance // = 56

  ///登山
  case mountainClinbing // = 57

  ///跳绳
  case ropeSkipping // = 58

  ///爬楼
  case climbStairs // = 59

  ///芭蕾
  case ballet // = 60

  ///社交舞
  case socialDance // = 61

  ///飞镖
  case darts // = 62

  ///骑马
  case horsebackRiding // = 63

  ///轮滑
  case rollerSkating // = 64

  ///太极
  case taiChi // = 65

  ///飞盘
  case frisbee // = 66

  ///呼啦圈
  case hulaHoop // = 67

  ///冰雪运动
  case sleigh // = 68

  ///滑冰
  case skating // = 69

  ///雪车
  case bobsleighAndTobogganing // = 70

  ///冰壶
  case curling // = 71

  ///冰球
  case iceHockey // = 72

  ///水上运动
  case surfing // = 73

  ///帆船
  case sailboat // = 74

  ///帆板
  case sailboard // = 75

  ///皮艇
  case foldboating // = 76

  ///划艇
  case canoeing // = 77

  ///赛艇
  case boatRace // = 78

  ///摩托艇
  case motorboat // = 79

  ///水球
  case waterPolo // = 80

  ///极限运动
  case slidingPlate // = 81

  ///攀岩
  case rockClimbing // = 82

  ///蹦极
  case bungeeJumping // = 83

  ///跑酷
  case parkour // = 84

  ///其他
  case other // = 85

  ///新增运动
  case spinning // = 86

  ///武术
  case martialArts // = 87

  ///跆拳道
  case taekwondo // = 88

  ///空手道
  case karate // = 89

  ///体操
  case gymnastics // = 90

  ///笼式网球
  case padel // = 91

  ///匹克球
  case pickleball // = 92

  ///单板滑雪
  case snowboarding // = 93

  ///双板滑雪
  case alpineSkiing // = 94

  ///划桨
  case paddling // = 95

  ///小轮车
  case bmx // = 96

  ///击剑
  case fencing // = 97

  ///台球/撞球
  case billiards // = 98

  ///沙滩足球
  case beachSoccer // = 99

  ///沙滩排球
  case beachVolleyball // = 100

  ///躲避球
  case dodgeball // = 101

  ///爵士舞
  case jazz // = 102

  ///拉丁舞
  case latin // = 103

  ///广场舞
  case squareDance // = 104

  ///排球
  case volleyball // = 105

  ///放风筝
  case kiteFlying // = 106

  ///钓鱼
  case fishing // = 107

  ///射箭
  case archery // = 108

  ///射击
  case shooting // = 109

  ///漂流
  case whiteWaterRafting // = 110

  ///高山滑雪
  case downhillSkiing // = 111

  ///越野滑雪
  case crossCountrySkiing // = 112

  ///冬季两项
  case biathon // = 113

  ///龙舟
  case dragonBoatRacing // = 114

  ///赛车
  case racing // = 115

  ///澳式足球
  case australianRulesFootball // = 116

  ///抱石
  case bouldering // = 117

  ///操场跑
  case trackRunning // = 118

  ///单桨冲浪
  case standupPaddleboarding // = 119

  ///短柄墙球
  case racquetball // = 120

  ///飞盘高尔夫
  case discOlf // = 121

  ///滑雪
  case skiing // = 122

  ///滑旱冰
  case inlineSkating // = 123

  ///户外健身
  case outdoorFitness // = 124

  ///滑板滑雪
  case snowSkateboarding // = 125

  ///划独木舟
  case canoe // = 126

  ///混合有氧
  case mixedAerobics // = 127

  ///举重
  case weightlifting // = 128

  ///极限飞盘
  case ultimateFrisbee // = 129

  ///交叉训练
  case crossTraining // = 130

  ///间歇锻炼
  case intervalTraining // = 131

  ///马术运动
  case equestrianSports // = 132

  ///皮划艇
  case kayaking // = 133

  ///摔跤/角力
  case wrestling // = 134

  ///室内攀岩
  case indoorClimbing // = 135

  ///田径
  case athletics // = 136

  ///踏步运动
  case stepAerobics // = 137

  ///体能训练
  case physicalConditioning // = 138

  ///休闲运动
  case recreationalSports // = 139

  ///循环训练
  case circuitTraining // = 140

  ///雪上运动
  case snowSports // = 141

  ///有氧运动
  case aerobicExercise // = 142

  ///橄榄球
  case rugby // = 143

  ///康复训练
  case rehealthyTraining // = 144

  ///组合运动
  case multisport // = 145

  ///健步训练
  case walkingBrisk // = 146

  ///慢跑
  case jogging // = 147

  ///蹦床
  case trampolining // = 148

  ///跳高
  case highJump // = 149

  ///铁人三项
  case triathlon // = 150

  ///马拉松
  case marathon // = 151

  ///竞走
  case raceWalking // = 152

  ///拔河
  case tugOfWar // = 153

  ///剑道
  case kendo // = 154

  ///拳击有氧
  case cardioBoxing // = 155

  ///泰拳
  case muayThai // = 156

  ///壶铃
  case kettlebell // = 157

  ///滑板车
  case skateboarding // = 158

  ///障碍赛
  case steeplechase // = 159

  ///滑翔伞冲浪
  case kitesurfing // = 160

  ///风帆冲浪
  case windsurfing // = 161

  ///手摇车
  case handcycling // = 162

  ///团体操
  case groupCalisthenics // = 163

  ///跳伞
  case parachuting // = 164

  ///赛马
  case horseRace // = 165

  ///搏击操
  case kickboxingAerobics // = 166

  ///民族舞
  case folkDancing // = 167

  ///恰恰
  case chaCha // = 168

  ///腰腹训练
  case waistTraining // = 169

  ///伸展运动
  case stretching // = 170

  ///跳水
  case diving // = 171

  ///混合健身
  case hybridTraining // = 172

  ///热气球
  case hotAirBalloon // = 173

  ///定向越野
  case orienteering // = 174

  ///健腹轮
  case abRoller // = 175

  ///交叉配合
  case crossFit // = 176

  ///钢管舞
  case poleDance // = 177

  ///门球
  case croquet // = 178
  case UNRECOGNIZED(Int)

  public init() {
    self = .orun
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .orun
    case 1: self = .irun
    case 2: self = .owalk
    case 3: self = .iwalk
    case 4: self = .hiking
    case 5: self = .ocycle
    case 6: self = .icycle
    case 7: self = .cricket
    case 8: self = .football
    case 9: self = .pswim
    case 10: self = .oswim
    case 11: self = .yoga
    case 12: self = .pilates
    case 13: self = .dance
    case 14: self = .zumba
    case 15: self = .rower
    case 16: self = .elliptical
    case 17: self = .ctraining
    case 18: self = .tstraining
    case 19: self = .fstraining
    case 20: self = .hiit
    case 21: self = .cooldown
    case 22: self = .workout
    case 23: self = .fitness
    case 24: self = .trailRunning
    case 25: self = .treadmill
    case 26: self = .aerobics
    case 27: self = .sitUp
    case 28: self = .plank
    case 29: self = .jumpingJack
    case 30: self = .chinUp
    case 31: self = .pushUp
    case 32: self = .deepSquat
    case 33: self = .highKneeLift
    case 34: self = .dumbbell
    case 35: self = .barbell
    case 36: self = .boxing
    case 37: self = .kickboxing
    case 38: self = .horizontalBar
    case 39: self = .parallelBars
    case 40: self = .walkingMachine
    case 41: self = .summitTrainers
    case 42: self = .bowling
    case 43: self = .tennis
    case 44: self = .tableTennis
    case 45: self = .golf
    case 46: self = .basketball
    case 47: self = .badminton
    case 48: self = .hockey
    case 49: self = .americanFootball
    case 50: self = .handball
    case 51: self = .squash
    case 52: self = .baseball
    case 53: self = .softball
    case 54: self = .shuttlecock
    case 55: self = .sepaktakraw
    case 56: self = .streetDance
    case 57: self = .mountainClinbing
    case 58: self = .ropeSkipping
    case 59: self = .climbStairs
    case 60: self = .ballet
    case 61: self = .socialDance
    case 62: self = .darts
    case 63: self = .horsebackRiding
    case 64: self = .rollerSkating
    case 65: self = .taiChi
    case 66: self = .frisbee
    case 67: self = .hulaHoop
    case 68: self = .sleigh
    case 69: self = .skating
    case 70: self = .bobsleighAndTobogganing
    case 71: self = .curling
    case 72: self = .iceHockey
    case 73: self = .surfing
    case 74: self = .sailboat
    case 75: self = .sailboard
    case 76: self = .foldboating
    case 77: self = .canoeing
    case 78: self = .boatRace
    case 79: self = .motorboat
    case 80: self = .waterPolo
    case 81: self = .slidingPlate
    case 82: self = .rockClimbing
    case 83: self = .bungeeJumping
    case 84: self = .parkour
    case 85: self = .other
    case 86: self = .spinning
    case 87: self = .martialArts
    case 88: self = .taekwondo
    case 89: self = .karate
    case 90: self = .gymnastics
    case 91: self = .padel
    case 92: self = .pickleball
    case 93: self = .snowboarding
    case 94: self = .alpineSkiing
    case 95: self = .paddling
    case 96: self = .bmx
    case 97: self = .fencing
    case 98: self = .billiards
    case 99: self = .beachSoccer
    case 100: self = .beachVolleyball
    case 101: self = .dodgeball
    case 102: self = .jazz
    case 103: self = .latin
    case 104: self = .squareDance
    case 105: self = .volleyball
    case 106: self = .kiteFlying
    case 107: self = .fishing
    case 108: self = .archery
    case 109: self = .shooting
    case 110: self = .whiteWaterRafting
    case 111: self = .downhillSkiing
    case 112: self = .crossCountrySkiing
    case 113: self = .biathon
    case 114: self = .dragonBoatRacing
    case 115: self = .racing
    case 116: self = .australianRulesFootball
    case 117: self = .bouldering
    case 118: self = .trackRunning
    case 119: self = .standupPaddleboarding
    case 120: self = .racquetball
    case 121: self = .discOlf
    case 122: self = .skiing
    case 123: self = .inlineSkating
    case 124: self = .outdoorFitness
    case 125: self = .snowSkateboarding
    case 126: self = .canoe
    case 127: self = .mixedAerobics
    case 128: self = .weightlifting
    case 129: self = .ultimateFrisbee
    case 130: self = .crossTraining
    case 131: self = .intervalTraining
    case 132: self = .equestrianSports
    case 133: self = .kayaking
    case 134: self = .wrestling
    case 135: self = .indoorClimbing
    case 136: self = .athletics
    case 137: self = .stepAerobics
    case 138: self = .physicalConditioning
    case 139: self = .recreationalSports
    case 140: self = .circuitTraining
    case 141: self = .snowSports
    case 142: self = .aerobicExercise
    case 143: self = .rugby
    case 144: self = .rehealthyTraining
    case 145: self = .multisport
    case 146: self = .walkingBrisk
    case 147: self = .jogging
    case 148: self = .trampolining
    case 149: self = .highJump
    case 150: self = .triathlon
    case 151: self = .marathon
    case 152: self = .raceWalking
    case 153: self = .tugOfWar
    case 154: self = .kendo
    case 155: self = .cardioBoxing
    case 156: self = .muayThai
    case 157: self = .kettlebell
    case 158: self = .skateboarding
    case 159: self = .steeplechase
    case 160: self = .kitesurfing
    case 161: self = .windsurfing
    case 162: self = .handcycling
    case 163: self = .groupCalisthenics
    case 164: self = .parachuting
    case 165: self = .horseRace
    case 166: self = .kickboxingAerobics
    case 167: self = .folkDancing
    case 168: self = .chaCha
    case 169: self = .waistTraining
    case 170: self = .stretching
    case 171: self = .diving
    case 172: self = .hybridTraining
    case 173: self = .hotAirBalloon
    case 174: self = .orienteering
    case 175: self = .abRoller
    case 176: self = .crossFit
    case 177: self = .poleDance
    case 178: self = .croquet
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .orun: return 0
    case .irun: return 1
    case .owalk: return 2
    case .iwalk: return 3
    case .hiking: return 4
    case .ocycle: return 5
    case .icycle: return 6
    case .cricket: return 7
    case .football: return 8
    case .pswim: return 9
    case .oswim: return 10
    case .yoga: return 11
    case .pilates: return 12
    case .dance: return 13
    case .zumba: return 14
    case .rower: return 15
    case .elliptical: return 16
    case .ctraining: return 17
    case .tstraining: return 18
    case .fstraining: return 19
    case .hiit: return 20
    case .cooldown: return 21
    case .workout: return 22
    case .fitness: return 23
    case .trailRunning: return 24
    case .treadmill: return 25
    case .aerobics: return 26
    case .sitUp: return 27
    case .plank: return 28
    case .jumpingJack: return 29
    case .chinUp: return 30
    case .pushUp: return 31
    case .deepSquat: return 32
    case .highKneeLift: return 33
    case .dumbbell: return 34
    case .barbell: return 35
    case .boxing: return 36
    case .kickboxing: return 37
    case .horizontalBar: return 38
    case .parallelBars: return 39
    case .walkingMachine: return 40
    case .summitTrainers: return 41
    case .bowling: return 42
    case .tennis: return 43
    case .tableTennis: return 44
    case .golf: return 45
    case .basketball: return 46
    case .badminton: return 47
    case .hockey: return 48
    case .americanFootball: return 49
    case .handball: return 50
    case .squash: return 51
    case .baseball: return 52
    case .softball: return 53
    case .shuttlecock: return 54
    case .sepaktakraw: return 55
    case .streetDance: return 56
    case .mountainClinbing: return 57
    case .ropeSkipping: return 58
    case .climbStairs: return 59
    case .ballet: return 60
    case .socialDance: return 61
    case .darts: return 62
    case .horsebackRiding: return 63
    case .rollerSkating: return 64
    case .taiChi: return 65
    case .frisbee: return 66
    case .hulaHoop: return 67
    case .sleigh: return 68
    case .skating: return 69
    case .bobsleighAndTobogganing: return 70
    case .curling: return 71
    case .iceHockey: return 72
    case .surfing: return 73
    case .sailboat: return 74
    case .sailboard: return 75
    case .foldboating: return 76
    case .canoeing: return 77
    case .boatRace: return 78
    case .motorboat: return 79
    case .waterPolo: return 80
    case .slidingPlate: return 81
    case .rockClimbing: return 82
    case .bungeeJumping: return 83
    case .parkour: return 84
    case .other: return 85
    case .spinning: return 86
    case .martialArts: return 87
    case .taekwondo: return 88
    case .karate: return 89
    case .gymnastics: return 90
    case .padel: return 91
    case .pickleball: return 92
    case .snowboarding: return 93
    case .alpineSkiing: return 94
    case .paddling: return 95
    case .bmx: return 96
    case .fencing: return 97
    case .billiards: return 98
    case .beachSoccer: return 99
    case .beachVolleyball: return 100
    case .dodgeball: return 101
    case .jazz: return 102
    case .latin: return 103
    case .squareDance: return 104
    case .volleyball: return 105
    case .kiteFlying: return 106
    case .fishing: return 107
    case .archery: return 108
    case .shooting: return 109
    case .whiteWaterRafting: return 110
    case .downhillSkiing: return 111
    case .crossCountrySkiing: return 112
    case .biathon: return 113
    case .dragonBoatRacing: return 114
    case .racing: return 115
    case .australianRulesFootball: return 116
    case .bouldering: return 117
    case .trackRunning: return 118
    case .standupPaddleboarding: return 119
    case .racquetball: return 120
    case .discOlf: return 121
    case .skiing: return 122
    case .inlineSkating: return 123
    case .outdoorFitness: return 124
    case .snowSkateboarding: return 125
    case .canoe: return 126
    case .mixedAerobics: return 127
    case .weightlifting: return 128
    case .ultimateFrisbee: return 129
    case .crossTraining: return 130
    case .intervalTraining: return 131
    case .equestrianSports: return 132
    case .kayaking: return 133
    case .wrestling: return 134
    case .indoorClimbing: return 135
    case .athletics: return 136
    case .stepAerobics: return 137
    case .physicalConditioning: return 138
    case .recreationalSports: return 139
    case .circuitTraining: return 140
    case .snowSports: return 141
    case .aerobicExercise: return 142
    case .rugby: return 143
    case .rehealthyTraining: return 144
    case .multisport: return 145
    case .walkingBrisk: return 146
    case .jogging: return 147
    case .trampolining: return 148
    case .highJump: return 149
    case .triathlon: return 150
    case .marathon: return 151
    case .raceWalking: return 152
    case .tugOfWar: return 153
    case .kendo: return 154
    case .cardioBoxing: return 155
    case .muayThai: return 156
    case .kettlebell: return 157
    case .skateboarding: return 158
    case .steeplechase: return 159
    case .kitesurfing: return 160
    case .windsurfing: return 161
    case .handcycling: return 162
    case .groupCalisthenics: return 163
    case .parachuting: return 164
    case .horseRace: return 165
    case .kickboxingAerobics: return 166
    case .folkDancing: return 167
    case .chaCha: return 168
    case .waistTraining: return 169
    case .stretching: return 170
    case .diving: return 171
    case .hybridTraining: return 172
    case .hotAirBalloon: return 173
    case .orienteering: return 174
    case .abRoller: return 175
    case .crossFit: return 176
    case .poleDance: return 177
    case .croquet: return 178
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [sport_type] = [
    .orun,
    .irun,
    .owalk,
    .iwalk,
    .hiking,
    .ocycle,
    .icycle,
    .cricket,
    .football,
    .pswim,
    .oswim,
    .yoga,
    .pilates,
    .dance,
    .zumba,
    .rower,
    .elliptical,
    .ctraining,
    .tstraining,
    .fstraining,
    .hiit,
    .cooldown,
    .workout,
    .fitness,
    .trailRunning,
    .treadmill,
    .aerobics,
    .sitUp,
    .plank,
    .jumpingJack,
    .chinUp,
    .pushUp,
    .deepSquat,
    .highKneeLift,
    .dumbbell,
    .barbell,
    .boxing,
    .kickboxing,
    .horizontalBar,
    .parallelBars,
    .walkingMachine,
    .summitTrainers,
    .bowling,
    .tennis,
    .tableTennis,
    .golf,
    .basketball,
    .badminton,
    .hockey,
    .americanFootball,
    .handball,
    .squash,
    .baseball,
    .softball,
    .shuttlecock,
    .sepaktakraw,
    .streetDance,
    .mountainClinbing,
    .ropeSkipping,
    .climbStairs,
    .ballet,
    .socialDance,
    .darts,
    .horsebackRiding,
    .rollerSkating,
    .taiChi,
    .frisbee,
    .hulaHoop,
    .sleigh,
    .skating,
    .bobsleighAndTobogganing,
    .curling,
    .iceHockey,
    .surfing,
    .sailboat,
    .sailboard,
    .foldboating,
    .canoeing,
    .boatRace,
    .motorboat,
    .waterPolo,
    .slidingPlate,
    .rockClimbing,
    .bungeeJumping,
    .parkour,
    .other,
    .spinning,
    .martialArts,
    .taekwondo,
    .karate,
    .gymnastics,
    .padel,
    .pickleball,
    .snowboarding,
    .alpineSkiing,
    .paddling,
    .bmx,
    .fencing,
    .billiards,
    .beachSoccer,
    .beachVolleyball,
    .dodgeball,
    .jazz,
    .latin,
    .squareDance,
    .volleyball,
    .kiteFlying,
    .fishing,
    .archery,
    .shooting,
    .whiteWaterRafting,
    .downhillSkiing,
    .crossCountrySkiing,
    .biathon,
    .dragonBoatRacing,
    .racing,
    .australianRulesFootball,
    .bouldering,
    .trackRunning,
    .standupPaddleboarding,
    .racquetball,
    .discOlf,
    .skiing,
    .inlineSkating,
    .outdoorFitness,
    .snowSkateboarding,
    .canoe,
    .mixedAerobics,
    .weightlifting,
    .ultimateFrisbee,
    .crossTraining,
    .intervalTraining,
    .equestrianSports,
    .kayaking,
    .wrestling,
    .indoorClimbing,
    .athletics,
    .stepAerobics,
    .physicalConditioning,
    .recreationalSports,
    .circuitTraining,
    .snowSports,
    .aerobicExercise,
    .rugby,
    .rehealthyTraining,
    .multisport,
    .walkingBrisk,
    .jogging,
    .trampolining,
    .highJump,
    .triathlon,
    .marathon,
    .raceWalking,
    .tugOfWar,
    .kendo,
    .cardioBoxing,
    .muayThai,
    .kettlebell,
    .skateboarding,
    .steeplechase,
    .kitesurfing,
    .windsurfing,
    .handcycling,
    .groupCalisthenics,
    .parachuting,
    .horseRace,
    .kickboxingAerobics,
    .folkDancing,
    .chaCha,
    .waistTraining,
    .stretching,
    .diving,
    .hybridTraining,
    .hotAirBalloon,
    .orienteering,
    .abRoller,
    .crossFit,
    .poleDance,
    .croquet,
  ]

}

public enum wtm_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case wtmStart // = 0
  case wtmEnd // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .wtmStart
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .wtmStart
    case 1: self = .wtmEnd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .wtmStart: return 0
    case .wtmEnd: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [wtm_operate_type] = [
    .wtmStart,
    .wtmEnd,
  ]

}

public enum quick_card_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case cardTypeExercise // = 0

  ///天气
  case cardTypeWeather // = 1

  ///建议
  case cardTypeSuggest // = 2
  case cardTypeDial // = 3
  case cardTypeActivity // = 4
  case cardTypeHeartrate // = 5

  ///睡眠
  case cardTypeSleep // = 6

  ///计步
  case cardTypeSteps // = 7
  case cardTypeSpo2 // = 8

  ///女性生理周期
  case cardTypeMenstruation // = 9

  ///一键测量（血氧、心率、压力）
  case cardTypeMeasurement // = 10

  ///最近一次户外运动的轨迹和活动
  case cardTypeRecentWorkout // = 11
  case cardTypeHrv // = 12

  ///紫外线
  case cardTypeUv // = 13

  ///月出月落、日出日落
  case cardTypeAstronomy // = 14

  ///世界时钟
  case cardTypeWorldClock // = 15

  ///alexa
  case cardTypeAlexa // = 16

  ///支付宝
  case cardTypeAlipay // = 17

  ///压力
  case cardTypeStress // = 18

  ///健康快照（心率，血氧，压力，hrv ,呼吸率）
  case cardTypeHealthExpress // = 19

  ///体温
  case cardTypeTemperature // = 20

  ///喝水助手
  case cardTypeDrinkAssistant // = 21

  ///训练负荷
  case cardTypeTrainingLoad // = 22

  ///健康快照
  case cardTypeHealthSnap // = 23

  ///周训练
  case cardTypeIntensityMinutes // = 24

  ///指南针
  case cardTypeCompass // = 25
  case UNRECOGNIZED(Int)

  public init() {
    self = .cardTypeExercise
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cardTypeExercise
    case 1: self = .cardTypeWeather
    case 2: self = .cardTypeSuggest
    case 3: self = .cardTypeDial
    case 4: self = .cardTypeActivity
    case 5: self = .cardTypeHeartrate
    case 6: self = .cardTypeSleep
    case 7: self = .cardTypeSteps
    case 8: self = .cardTypeSpo2
    case 9: self = .cardTypeMenstruation
    case 10: self = .cardTypeMeasurement
    case 11: self = .cardTypeRecentWorkout
    case 12: self = .cardTypeHrv
    case 13: self = .cardTypeUv
    case 14: self = .cardTypeAstronomy
    case 15: self = .cardTypeWorldClock
    case 16: self = .cardTypeAlexa
    case 17: self = .cardTypeAlipay
    case 18: self = .cardTypeStress
    case 19: self = .cardTypeHealthExpress
    case 20: self = .cardTypeTemperature
    case 21: self = .cardTypeDrinkAssistant
    case 22: self = .cardTypeTrainingLoad
    case 23: self = .cardTypeHealthSnap
    case 24: self = .cardTypeIntensityMinutes
    case 25: self = .cardTypeCompass
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .cardTypeExercise: return 0
    case .cardTypeWeather: return 1
    case .cardTypeSuggest: return 2
    case .cardTypeDial: return 3
    case .cardTypeActivity: return 4
    case .cardTypeHeartrate: return 5
    case .cardTypeSleep: return 6
    case .cardTypeSteps: return 7
    case .cardTypeSpo2: return 8
    case .cardTypeMenstruation: return 9
    case .cardTypeMeasurement: return 10
    case .cardTypeRecentWorkout: return 11
    case .cardTypeHrv: return 12
    case .cardTypeUv: return 13
    case .cardTypeAstronomy: return 14
    case .cardTypeWorldClock: return 15
    case .cardTypeAlexa: return 16
    case .cardTypeAlipay: return 17
    case .cardTypeStress: return 18
    case .cardTypeHealthExpress: return 19
    case .cardTypeTemperature: return 20
    case .cardTypeDrinkAssistant: return 21
    case .cardTypeTrainingLoad: return 22
    case .cardTypeHealthSnap: return 23
    case .cardTypeIntensityMinutes: return 24
    case .cardTypeCompass: return 25
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [quick_card_type] = [
    .cardTypeExercise,
    .cardTypeWeather,
    .cardTypeSuggest,
    .cardTypeDial,
    .cardTypeActivity,
    .cardTypeHeartrate,
    .cardTypeSleep,
    .cardTypeSteps,
    .cardTypeSpo2,
    .cardTypeMenstruation,
    .cardTypeMeasurement,
    .cardTypeRecentWorkout,
    .cardTypeHrv,
    .cardTypeUv,
    .cardTypeAstronomy,
    .cardTypeWorldClock,
    .cardTypeAlexa,
    .cardTypeAlipay,
    .cardTypeStress,
    .cardTypeHealthExpress,
    .cardTypeTemperature,
    .cardTypeDrinkAssistant,
    .cardTypeTrainingLoad,
    .cardTypeHealthSnap,
    .cardTypeIntensityMinutes,
    .cardTypeCompass,
  ]

}

public enum geobin_operate_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///查询轨迹列表
  case inquire // = 0

  ///删除指定轨迹
  case delete // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .inquire
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .inquire
    case 1: self = .delete
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .inquire: return 0
    case .delete: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [geobin_operate_type] = [
    .inquire,
    .delete,
  ]

}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID"),
    1: .same(proto: "INQUIRE"),
    2: .same(proto: "SET"),
  ]
}

extension Platform: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "JX_3085C_PLATFORM"),
    1: .same(proto: "JX_3085L_PLATFORM"),
    2: .same(proto: "JX_3085E_PLATFORM"),
    3: .same(proto: "JX_3085S_PLATFORM"),
  ]
}

extension Shape: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SQUARE_SHAPE"),
    1: .same(proto: "ROUND_SHAPE"),
  ]
}

extension Dev_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WATCH_TYPE"),
    1: .same(proto: "BAND_TYPE"),
    2: .same(proto: "RING_TYPE"),
  ]
}

extension Batt_mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INVALID_MODE"),
    1: .same(proto: "NORMAL_MODE"),
    2: .same(proto: "ECO_MODE"),
  ]
}

extension Batt_status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NORMAL"),
    1: .same(proto: "CHARING"),
    2: .same(proto: "FULL"),
    3: .same(proto: "LOW"),
  ]
}

extension bind_method_support: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAIRING_CODE_NORMAL_SUPPORT"),
    1: .same(proto: "PAIRING_CODE_SUPPORT"),
    2: .same(proto: "NORMAL_BIND_SUPPORT"),
  ]
}

extension gender_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENDER_MALE"),
    1: .same(proto: "GENDER_FEMALE"),
    2: .same(proto: "GENDER_OTHER"),
  ]
}

extension notify_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALLOW"),
    1: .same(proto: "SILENT"),
    2: .same(proto: "CLOSE"),
  ]
}

extension language: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LANG_INVALID"),
    1: .same(proto: "CHINESE"),
    2: .same(proto: "ENGLISH"),
    3: .same(proto: "GERMAN"),
    4: .same(proto: "SPANISH"),
    5: .same(proto: "ITALIAN"),
    6: .same(proto: "JAPANESE"),
    7: .same(proto: "RUSSIAN"),
    8: .same(proto: "PORTUGUESE"),
    9: .same(proto: "FRENCH"),
    10: .same(proto: "KOREAN"),
    11: .same(proto: "POLISH"),
    12: .same(proto: "CZECH"),
    13: .same(proto: "SLOVAK"),
    14: .same(proto: "HUNGARIAN"),
    15: .same(proto: "GREEK"),
    16: .same(proto: "LITHUANIAN"),
    17: .same(proto: "LATVIAN"),
    18: .same(proto: "ESTONIAN"),
    19: .same(proto: "BULGARIAN"),
    20: .same(proto: "MALAY"),
    21: .same(proto: "INDONESIAN"),
    22: .same(proto: "THAILAND"),
    23: .same(proto: "VIETNAMESE"),
    24: .same(proto: "HEBREW"),
    25: .same(proto: "DEVANAGARI"),
    26: .same(proto: "TURKEY"),
    27: .same(proto: "ROMANIAN"),
    28: .same(proto: "DUTCH"),
    29: .same(proto: "UKRAINIAN"),
    30: .same(proto: "ARABIC"),
    31: .same(proto: "FARSI"),
    32: .same(proto: "TRAD_CHINESE"),
  ]
}

extension bind_method: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BIND_ENCRYPTED"),
    1: .same(proto: "BIND_NORMAL"),
    2: .same(proto: "BIND_REMOVE"),
    3: .same(proto: "BIND_PAIRING_CODE"),
  ]
}

extension bind_flag: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BIND_FLAG_REQUEST"),
    1: .same(proto: "BIND_FLAG_FAILED"),
    2: .same(proto: "BIND_FLAG_SUCCESS"),
    3: .same(proto: "BIND_FLAG_BOUND"),
    4: .same(proto: "BIND_FLAG_SAVE_DATA"),
  ]
}

extension bind_phone_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANDROID"),
    1: .same(proto: "IOS"),
  ]
}

extension disp_status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DISP_OFF"),
    1: .same(proto: "DISP_ON"),
  ]
}

extension alarm_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GET_UP"),
    1: .same(proto: "SLEEP"),
  ]
}

extension aod_mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INTELLIGENT_MODE"),
    1: .same(proto: "TIMER_MDOE"),
  ]
}

extension health_monitor_mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MANUAL"),
    1: .same(proto: "AUTO"),
    2: .same(proto: "CONTINUOUS"),
    3: .same(proto: "INTELLIHENT"),
  ]
}

extension health_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEART_RATE"),
    1: .same(proto: "STRESS"),
    2: .same(proto: "SPO2"),
    3: .same(proto: "NOISE"),
    4: .same(proto: "BODY_ENERGY"),
    5: .same(proto: "RESPIRATORY_RATE"),
    6: .same(proto: "SKIN_TEMPERATURE"),
  ]
}

extension sleep_monitor_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENERAL"),
    1: .same(proto: "SCIENCE"),
  ]
}

extension sync_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SYNC_HEART_RATE"),
    1: .same(proto: "SYNC_STRESS"),
    2: .same(proto: "SYNC_SPO2"),
    3: .same(proto: "SYNC_SLEEP"),
    4: .same(proto: "SYNC_WORKOUT"),
    5: .same(proto: "SYNC_ACTIVITY"),
    6: .same(proto: "SYNC_SWIMMING"),
    7: .same(proto: "SYNC_HRV"),
    8: .same(proto: "SYNC_NOISE"),
    9: .same(proto: "SYNC_BODY_ENERGY"),
    10: .same(proto: "SYNC_RESPIRATORY_RATE"),
    11: .same(proto: "SYNC_BODY_TEMPERATURE"),
    12: .same(proto: "SYNC_PSP_SLEEP"),
  ]
}

extension sync_operate: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "START_SYNC"),
    1: .same(proto: "END_SYNC"),
  ]
}

extension period_log: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PERIOD_LOG_NULL"),
    1: .same(proto: "PERIOD_LOG_NOT_FLOW"),
    2: .same(proto: "PERIOD_LOG_AS_USUAL"),
    3: .same(proto: "PERIOD_LOG_LIGHT_FLOW"),
    4: .same(proto: "PERIOD_LOG_MENDIUM_FLOW"),
    5: .same(proto: "PERIOD_LOG_HEAVY_FLOW"),
  ]
}

extension event_id: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EVENT_ID_NULL"),
    1: .same(proto: "EVENT_ID_MUSIC_CONTROL"),
    2: .same(proto: "EVENT_ID_FINE_PHONE"),
    3: .same(proto: "EVENT_ID_SYNC_DATA"),
    4: .same(proto: "EVENT_ID_FINE_WATCH"),
    5: .same(proto: "EVENT_ID_VOLUME_CHANGE"),
  ]
}

extension music_status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MUSIC_STATUS_INVALID"),
    1: .same(proto: "MUSIC_STATUS_PLAY"),
    2: .same(proto: "MUSIC_STATUS_PAUSE"),
  ]
}

extension weather_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TORNADO"),
    1: .same(proto: "TROPICAL_STORM"),
    2: .same(proto: "HURRICANE"),
    3: .same(proto: "STRONG_STORMS"),
    4: .same(proto: "THUNDERSTORMS"),
    5: .same(proto: "RAIN_SNOW"),
    6: .same(proto: "RAIN_SLEET"),
    7: .same(proto: "WINTRY_MIX"),
    8: .same(proto: "FREEZING_DRIZZLE"),
    9: .same(proto: "DRIZZLE"),
    10: .same(proto: "FREEZING_RAIN"),
    11: .same(proto: "SHOWERS"),
    12: .same(proto: "RAIN"),
    13: .same(proto: "FLURRIES"),
    14: .same(proto: "SNOW_SHOWERS"),
    15: .same(proto: "DRIFTING_SNOW"),
    16: .same(proto: "SNOW"),
    17: .same(proto: "HAIL"),
    18: .same(proto: "SLEET"),
    19: .same(proto: "BLOWING_DUST_SANDSTORM"),
    20: .same(proto: "FOGGY"),
    21: .same(proto: "HAZE"),
    22: .same(proto: "SMOKE"),
    23: .same(proto: "BREEZY"),
    24: .same(proto: "WINDY"),
    25: .same(proto: "ICE_CRYSTALS"),
    26: .same(proto: "CLOUDY"),
    27: .same(proto: "MOSTLY_CLOUDY_NIGHT"),
    28: .same(proto: "MOSTLY_CLOUDY_DAY"),
    29: .same(proto: "PARTLY_CLOUDY_NIGHT"),
    30: .same(proto: "PARTLY_CLOUDY_DAY"),
    31: .same(proto: "CLEAR"),
    32: .same(proto: "SUNNY"),
    33: .same(proto: "MOSTLY_CLEAR"),
    34: .same(proto: "MOSTLY_SUNNY"),
    35: .same(proto: "MIXED_RAIN_HAIL"),
    36: .same(proto: "HOt"),
    37: .same(proto: "ISOLATED_THUNDERSTORMS"),
    38: .same(proto: "SCATTERED_THUNDERSTORMS_D"),
    39: .same(proto: "SCATTERED_SHOWERS_NIGHT"),
    40: .same(proto: "HEAVY_RAIN"),
    41: .same(proto: "SCATTERED_SNOW_SHOWERS_D"),
    42: .same(proto: "HEAVY_SNOW"),
    43: .same(proto: "BLIZZARD"),
    44: .same(proto: "NOT_AVAILABLE"),
    45: .same(proto: "SCATTERED_SNOW_SHOWERS_N"),
    46: .same(proto: "SCATTERED_SHOWERS"),
    47: .same(proto: "SCATTERED_THUNDERSTORMS_N"),
  ]
}

extension wind_direction_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WEATHER_DIRECTION_N"),
    1: .same(proto: "WEATHER_DIRECTION_NNE"),
    2: .same(proto: "WEATHER_DIRECTION_NE"),
    3: .same(proto: "WEATHER_DIRECTION_ENE"),
    4: .same(proto: "WEATHER_DIRECTION_E"),
    5: .same(proto: "WEATHER_DIRECTION_ESE"),
    6: .same(proto: "WEATHER_DIRECTION_SE"),
    7: .same(proto: "WEATHER_DIRECTION_SSE"),
    8: .same(proto: "WEATHER_DIRECTION_S"),
    9: .same(proto: "WEATHER_DIRECTION_SSW"),
    10: .same(proto: "WEATHER_DIRECTION_SW"),
    11: .same(proto: "WEATHER_DIRECTION_WSW"),
    12: .same(proto: "WEATHER_DIRECTION_W"),
    13: .same(proto: "WEATHER_DIRECTION_WNWM"),
    14: .same(proto: "WEATHER_DIRECTION_NW"),
    15: .same(proto: "WEATHER_DIRECTION_NNW"),
  ]
}

extension moon_phase: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NEW_MOON"),
    1: .same(proto: "WAXING_CRESCENT"),
    2: .same(proto: "FIRST_QUARTER"),
    3: .same(proto: "WAXING_GIBBOUS"),
    4: .same(proto: "FULL_MOON"),
    5: .same(proto: "WANING_GIBBOUS"),
    6: .same(proto: "LAST_QUARTER"),
    7: .same(proto: "WANING_MOON"),
  ]
}

extension message_remind_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NULL"),
    1: .same(proto: "SMS"),
    2: .same(proto: "Email"),
    3: .same(proto: "Calendar"),
    4: .same(proto: "Missed_Call"),
    5: .same(proto: "Facebook"),
    6: .same(proto: "Twitter"),
    7: .same(proto: "Instagram"),
    8: .same(proto: "Snapchat"),
    9: .same(proto: "Whatsapp"),
    10: .same(proto: "Line"),
    11: .same(proto: "Tiktok"),
    12: .same(proto: "Skype"),
    13: .same(proto: "Wechat"),
    14: .same(proto: "Fitbeing"),
    15: .same(proto: "Microsoft_Teams"),
    16: .same(proto: "Telegram_Messenger"),
    17: .same(proto: "Messenger"),
    18: .same(proto: "LinkedIn"),
    19: .same(proto: "Gmail"),
    20: .same(proto: "Microsoft_Outlook"),
    21: .same(proto: "Google_Chat"),
    22: .same(proto: "QQ"),
    23: .same(proto: "WhatsApp_Business"),
    24: .same(proto: "Youtube"),
    25: .same(proto: "Uber"),
    26: .same(proto: "Uber_eats"),
    27: .same(proto: "Door_Dash_missing"),
    28: .same(proto: "Banco_General"),
    29: .same(proto: "BAC_Bank"),
    30: .same(proto: "Google_Maps"),
    31: .same(proto: "Amazon_shopping"),
    32: .same(proto: "Spotify"),
    33: .same(proto: "Discord"),
    34: .same(proto: "OHTER"),
    35: .same(proto: "DAILYHUNT"),
    36: .same(proto: "FASTRACK_SMART_WORLD"),
    37: .same(proto: "INSHORTS"),
    38: .same(proto: "OLA"),
    39: .same(proto: "PHONEPE"),
    40: .same(proto: "SWIGGY"),
    41: .same(proto: "ZOMATO"),
    42: .same(proto: "AMAZONPRIME"),
    43: .same(proto: "AMAZON_BUSINESS"),
    44: .same(proto: "AMAZON_MUSIC"),
    45: .same(proto: "DUNZO"),
    46: .same(proto: "ZEPTO"),
    47: .same(proto: "FLIPKART"),
    48: .same(proto: "GAANA"),
    49: .same(proto: "GOOGLE_DRIVE"),
    50: .same(proto: "GPAY"),
    51: .same(proto: "HOTSTAR"),
    52: .same(proto: "NETFLIX"),
    53: .same(proto: "JIO_CINEMA"),
    54: .same(proto: "RAPIDO"),
    55: .same(proto: "DIGI_LOCKER"),
    56: .same(proto: "MYNTRA"),
    57: .same(proto: "URBAN_COMPANY"),
    58: .same(proto: "PAYTM"),
    59: .same(proto: "WYNK"),
    60: .same(proto: "YAHOO"),
    61: .same(proto: "YTMUSIC"),
    62: .same(proto: "TITAN_SMART_WORLD"),
    63: .same(proto: "MAKE_MY_TRIP"),
    64: .same(proto: "Jio_TV"),
    65: .same(proto: "feishu"),
    66: .same(proto: "RING"),
    67: .same(proto: "LARK"),
    68: .same(proto: "KAKAO"),
    69: .same(proto: "WEIBO"),
    70: .same(proto: "XHS"),
    71: .same(proto: "PINDUODUO"),
    72: .same(proto: "ALIPAY"),
    73: .same(proto: "TAOBAO"),
    74: .same(proto: "JINGDONG"),
    75: .same(proto: "MEITUAN"),
    76: .same(proto: "DIDI"),
    77: .same(proto: "TAKEOUTNEW"),
    78: .same(proto: "ELE"),
    79: .same(proto: "DOUYIN"),
    80: .same(proto: "KUAISHOU"),
    81: .same(proto: "QQMAIL"),
    82: .same(proto: "DINGTALK"),
    83: .same(proto: "WEMEET"),
    84: .same(proto: "WEWORK"),
    85: .same(proto: "CTRIP"),
    86: .same(proto: "BOSS"),
    87: .same(proto: "ESPN"),
  ]
}

extension notify_os_platform: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ANDROID_NOTIFY"),
    1: .same(proto: "IOS_NOTIFY"),
  ]
}

extension msg_send_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WATCH_MSG_SEND"),
    1: .same(proto: "APP_MSG_REPLY"),
  ]
}

extension msg_reply_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MSG_REPLY_MSG"),
    1: .same(proto: "MSG_REPLY_CALL"),
  ]
}

extension call_status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RECEIVED_CALL"),
    1: .same(proto: "REJECT_CALL"),
  ]
}

extension tran_direction_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WATCH_TRAN"),
    1: .same(proto: "APP_TRAN"),
  ]
}

extension interval_division_mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAXIMUM_MODE"),
    1: .same(proto: "RESERVE_MODE"),
  ]
}

extension heart_rate_zone_mode: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HR_MAX_MODE"),
    1: .same(proto: "RESERVE_HR_MODE"),
  ]
}

extension gps_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GPS_INFO_REQUEST"),
    1: .same(proto: "GPS_INFO_END"),
    2: .same(proto: "GPS_INFO_INQUIRE"),
  ]
}

extension exercise_control_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CONTROL_NULL"),
    1: .same(proto: "CONTROL_START"),
    2: .same(proto: "CONTROL_END"),
    3: .same(proto: "CONTROL_PAUSE"),
    4: .same(proto: "CONTROL_RESUME"),
  ]
}

extension operate_course_list_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "COURSE_INVALID"),
    1: .same(proto: "COURSE_INQUIRE"),
    2: .same(proto: "COURSE_DELETE"),
  ]
}

extension dial_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIAL_TYPE_NULL"),
    1: .same(proto: "DIAL_TYPE_GENERAL"),
    2: .same(proto: "DIAL_TYPE_PHOTO"),
    3: .same(proto: "DIAL_TYPE_WALLPAPER"),
    4: .same(proto: "DIAL_TYPE_CUSTOM"),
    5: .same(proto: "DIAL_TYPE_GENERAL_AOD"),
    6: .same(proto: "DIAL_TYPE_AOD"),
  ]
}

extension dial_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DIAL_OPERATE_TYPE_INQUIRE"),
    1: .same(proto: "DIAL_OPERATE_TYPE_SET"),
    2: .same(proto: "DIAL_OPERATE_TYPE_DELETE"),
  ]
}

extension operate_II_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "INSERT"),
    1: .same(proto: "DELETE"),
    2: .same(proto: "UPDATE"),
    3: .same(proto: "READ"),
  ]
}

extension alexa_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALEXA_OPERATE_NULL"),
    1: .same(proto: "ALEXA_MIC_OPEN"),
    2: .same(proto: "ALEXA_MIC_CLOSE"),
    4: .same(proto: "ALEXA_VOICE_OPEN"),
    5: .same(proto: "ALEXA_VOICE_CLOSE"),
  ]
}

extension alexa_status_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALEXA_STATUS_NULL"),
    1: .same(proto: "ALEXA_STATUS_SUCCESS"),
    2: .same(proto: "ALEXA_STATUS_SET_UP"),
    3: .same(proto: "ALEXA_STATUS_DISCONNECT"),
    4: .same(proto: "ALEXA_STATUS_NETWORK_ERROR"),
    5: .same(proto: "ALEXA_STATUS_UNIDENTIFY"),
    6: .same(proto: "ALEXA_STATUS_RELOGIN"),
  ]
}

extension alexa_noitce_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALEXA_NOTICE_NULL"),
    1: .same(proto: "ALEXA_NOTICE_REQUEST"),
    2: .same(proto: "ALEXA_NOTICE_EXIT"),
    3: .same(proto: "ALEXA_NOTICE_IRQ_REQUEST"),
  ]
}

extension alexa_timer_operate: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALEXA_TIMER_INSERT"),
    1: .same(proto: "ALEXA_TIMER_DELETE"),
    2: .same(proto: "ALEXA_TIMER_DELETE_ALL"),
  ]
}

extension log_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LOG_START"),
    1: .same(proto: "LOG_END"),
  ]
}

extension sensor_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SENSOR_TRAN_START"),
    1: .same(proto: "SENSOR_TRAN_END"),
    2: .same(proto: "OFF_LINE_TRAN_START"),
    3: .same(proto: "OFF_LINE_TRAN_END"),
    4: .same(proto: "SENSOR_AUTO_TRAN"),
  ]
}

extension long_2s_press_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRESS_TYPE_NULL"),
    1: .same(proto: "PRESS_TYPE_SOS"),
    2: .same(proto: "PRESS_TYPE_WORKOUT"),
    3: .same(proto: "PRESS_TYPE_ALEXA"),
    4: .same(proto: "PRESS_TYPE_RESTART"),
  ]
}

extension switch_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SWITCH_NULL"),
    1: .same(proto: "SWITCH_ON"),
    2: .same(proto: "SWITCH_OFF"),
  ]
}

extension http_request_method: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HTTP_REQUEST_METHOD_POST"),
    1: .same(proto: "HTTP_REQUEST_METHOD_GET"),
    2: .same(proto: "HTTP_REQUEST_METHOD_DELETE"),
    3: .same(proto: "HTTP_REQUEST_METHOD_PUT"),
  ]
}

extension min_program_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MINPROGRAM_TYPE_NULL"),
    1: .same(proto: "MINPROGRAM_TYPE_GENERAL"),
    2: .same(proto: "MINPROGRAM_TYPE_DIAL"),
  ]
}

extension min_program_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MINPROGRAM_OPERATE_TYPE_INQUIRE"),
    1: .same(proto: "MINPROGRAM_OPERATE_TYPE_DELETE"),
  ]
}

extension voice_assistant_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AI_OPERATE_NULL"),
    1: .same(proto: "AI_MIC_OPEN"),
    2: .same(proto: "AI_MIC_CLOSE"),
    4: .same(proto: "AI_VOICE_OPEN"),
    5: .same(proto: "AI_VOICE_CLOSE"),
  ]
}

extension voice_assistant_status_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AI_STATUS_NULL"),
    1: .same(proto: "AI_STATUS_SUCCESS"),
    2: .same(proto: "AI_STATUS_SET_UP"),
    3: .same(proto: "AI_STATUS_DISCONNECT"),
    4: .same(proto: "AI_STATUS_NETWORK_ERROR"),
    5: .same(proto: "AI_STATUS_UNIDENTIFY"),
    6: .same(proto: "AI_STATUS_RELOGIN"),
    7: .same(proto: "AI_STATUS_TIPS"),
  ]
}

extension voice_assistant_noitce_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AI_NOTICE_NULL"),
    1: .same(proto: "AI_NOTICE_REQUEST"),
    2: .same(proto: "AI_NOTICE_EXIT"),
    3: .same(proto: "AI_NOTICE_IRQ_REQUEST"),
    4: .same(proto: "AI_NOTICE_LISTEN_STOP"),
    5: .same(proto: "AI_NOTICE_NEW_TALK"),
  ]
}

extension voice_assistant_dialog_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AI_DIALOG_NORMAL"),
    1: .same(proto: "AI_DIALOG_ECHO"),
  ]
}

extension skill_control_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SKILL_CONTROL_START"),
    1: .same(proto: "SKILL_CONTROL_STOP"),
    2: .same(proto: "SKILL_CONTROL_PAUSE"),
    3: .same(proto: "SKILL_CONTROL_RESUME"),
  ]
}

extension skill_timer_operate: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TIMER_INSERT_TIMER"),
    1: .same(proto: "TIMER_DELETE_TIMER"),
    2: .same(proto: "TIMER_DELETE_ALL_TIMER"),
  ]
}

extension skill_template_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEMPLATE_TYPE_STOPWATCH"),
    1: .same(proto: "TEMPLATE_TYPE_HEARTRATE"),
    2: .same(proto: "TEMPLATE_TYPE_STRESS"),
    3: .same(proto: "TEMPLATE_TYPE_OXYGEN"),
    4: .same(proto: "TEMPLATE_TYPE_ACTIVITY"),
    5: .same(proto: "TEMPLATE_TYPE_STEPS"),
    6: .same(proto: "TEMPLATE_TYPE_CALORIE"),
    7: .same(proto: "TEMPLATE_TYPE_EXERCISE_TIME"),
    8: .same(proto: "TEMPLATE_TYPE_DISTURB"),
    9: .same(proto: "TEMPLATE_TYPE_SLEEP"),
    10: .same(proto: "TEMPLATE_TYPE_BRIGHTNESS"),
    11: .same(proto: "TEMPLATE_TYPE_WRIST"),
    12: .same(proto: "TEMPLATE_TYPE_FLASHLIGHT"),
    13: .same(proto: "TEMPLATE_TYPE_VOLUME"),
    14: .same(proto: "TEMPLATE_TYPE_FIND_PHONE"),
  ]
}

extension skill_naptimer_operate: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NAPTIMER_INSERT"),
    1: .same(proto: "NAPTIMER_DELETE"),
    2: .same(proto: "NAPTIMER_DELETE_ALL"),
  ]
}

extension skill_music_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SKILL_MUSIC_PLAYED"),
    1: .same(proto: "SKILL_MUSIC_PAUSED"),
    2: .same(proto: "SKILL_MUSIC_NEXT"),
    3: .same(proto: "SKILL_MUSIC_PREVIOUS"),
    4: .same(proto: "SKILL_MUSIC_VOLUME_DOWN"),
    5: .same(proto: "SKILL_MUSIC_VOLUME_UP"),
  ]
}

extension app_list: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "APP_LIST_ACTIVITY"),
    1: .same(proto: "APP_LIST_WORKOUT"),
    2: .same(proto: "APP_LIST_STEPS"),
    3: .same(proto: "APP_LIST_HEARTRATE"),
    4: .same(proto: "APP_LIST_SLEEP"),
    5: .same(proto: "APP_LIST_STRESS"),
    6: .same(proto: "APP_LIST_MENSTRUATION"),
    7: .same(proto: "APP_LIST_BREATHE"),
    8: .same(proto: "APP_LIST_ALARMS"),
    9: .same(proto: "APP_LIST_PHONE"),
    10: .same(proto: "APP_LIST_TIMERS"),
    11: .same(proto: "APP_LIST_STOPWATCH"),
    12: .same(proto: "APP_LIST_SPO2"),
    13: .same(proto: "APP_LIST_WEATHER"),
    14: .same(proto: "APP_LIST_CAMERA_REMOTE"),
    15: .same(proto: "APP_LIST_MUSIC"),
    16: .same(proto: "APP_LIST_FIND_PHONE"),
    17: .same(proto: "APP_LIST_WORLD_CLOCK"),
    18: .same(proto: "APP_LIST_SETTINGS"),
  ]
}

extension prescription_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRESCRIPTION_NULL"),
    1: .same(proto: "PRESCRIPTION_BLOOD_SUGAR"),
    2: .same(proto: "PRESCRIPTION_BLOOD_PRESSURE"),
    3: .same(proto: "PRESCRIPTION_WEIGHT"),
  ]
}

extension alipay_net_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALIPAY_NET_NULL"),
    1: .same(proto: "ALIPAY_NET_CONNECT"),
    2: .same(proto: "ALIPAY_NET_WRITE"),
    3: .same(proto: "ALIPAY_NET_READ"),
    4: .same(proto: "ALIPAY_NET_CLOSE"),
  ]
}

extension operate_music_file_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MUSIC_INVALID"),
    1: .same(proto: "MUSIC_INQUIRE"),
    3: .same(proto: "MUSIC_DELETE"),
  ]
}

extension watch_hand_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HAND_LEFT"),
    1: .same(proto: "HAND_RIGHT"),
    2: .same(proto: "HAND_AUTO"),
  ]
}

extension ring_health_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RING_HEART_RATE"),
    1: .same(proto: "RING_STRESS"),
    2: .same(proto: "RING_SPO2"),
    3: .same(proto: "RING_HRV"),
    4: .same(proto: "RING_RESPIRATORY_RATE"),
  ]
}

extension health_measure_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEALTH_MEASURE_START"),
    1: .same(proto: "HEALTH_MEASURE_PAUSE"),
    2: .same(proto: "HEALTH_MEASURE_STOP"),
    3: .same(proto: "HEALTH_MEASURE_INQUIRE"),
  ]
}

extension health_measure_status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "HEALTH_STATUS_MEASURING"),
    1: .same(proto: "HEALTH_STATUS_NO_WEAR"),
    2: .same(proto: "HEALTH_STATUS_RESULT"),
    3: .same(proto: "HEALTH_STATUS_FAIL"),
  ]
}

extension repeat_calendar_date: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REPEAT_NULL"),
    1: .same(proto: "REPEAT_EVERY_DAY"),
    2: .same(proto: "REPEAT_EVERY_WEEK"),
    3: .same(proto: "REPEAT_EVERY_MONTH"),
    4: .same(proto: "REPEAT_EVERY_YEAR"),
  ]
}

extension repeat_calendar_time: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REPEAT_TIME_NULL"),
    1: .same(proto: "REPEAT_TIME_5MINUTES"),
    2: .same(proto: "REPEAT_TIME_10MINUTES"),
    3: .same(proto: "REPEAT_TIME_15MINUTES"),
    4: .same(proto: "REPEAT_TIME_30MINUTES"),
    5: .same(proto: "REPEAT_TIME_1HOUR"),
    6: .same(proto: "REPEAT_TIME_2HOUR"),
    7: .same(proto: "REPEAT_TIME_1DAY"),
  ]
}

extension operate_health_snap_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SNAP_INVALID"),
    1: .same(proto: "SNAP_INQUIRE"),
  ]
}

extension sport_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ORUN"),
    1: .same(proto: "IRUN"),
    2: .same(proto: "OWALK"),
    3: .same(proto: "IWALK"),
    4: .same(proto: "HIKING"),
    5: .same(proto: "OCYCLE"),
    6: .same(proto: "ICYCLE"),
    7: .same(proto: "CRICKET"),
    8: .same(proto: "FOOTBALL"),
    9: .same(proto: "PSWIM"),
    10: .same(proto: "OSWIM"),
    11: .same(proto: "YOGA"),
    12: .same(proto: "PILATES"),
    13: .same(proto: "DANCE"),
    14: .same(proto: "ZUMBA"),
    15: .same(proto: "ROWER"),
    16: .same(proto: "ELLIPTICAL"),
    17: .same(proto: "CTRAINING"),
    18: .same(proto: "TSTRAINING"),
    19: .same(proto: "FSTRAINING"),
    20: .same(proto: "HIIT"),
    21: .same(proto: "COOLDOWN"),
    22: .same(proto: "WORKOUT"),
    23: .same(proto: "FITNESS"),
    24: .same(proto: "TRAIL_RUNNING"),
    25: .same(proto: "TREADMILL"),
    26: .same(proto: "AEROBICS"),
    27: .same(proto: "SIT_UP"),
    28: .same(proto: "PLANK"),
    29: .same(proto: "JUMPING_JACK"),
    30: .same(proto: "CHIN_UP"),
    31: .same(proto: "PUSH_UP"),
    32: .same(proto: "DEEP_SQUAT"),
    33: .same(proto: "HIGH_KNEE_LIFT"),
    34: .same(proto: "DUMBBELL"),
    35: .same(proto: "BARBELL"),
    36: .same(proto: "BOXING"),
    37: .same(proto: "KICKBOXING"),
    38: .same(proto: "HORIZONTAL_BAR"),
    39: .same(proto: "PARALLEL_BARS"),
    40: .same(proto: "WALKING_MACHINE"),
    41: .same(proto: "SUMMIT_TRAINERS"),
    42: .same(proto: "BOWLING"),
    43: .same(proto: "TENNIS"),
    44: .same(proto: "TABLE_TENNIS"),
    45: .same(proto: "GOLF"),
    46: .same(proto: "BASKETBALL"),
    47: .same(proto: "BADMINTON"),
    48: .same(proto: "HOCKEY"),
    49: .same(proto: "AMERICAN_FOOTBALL"),
    50: .same(proto: "HANDBALL"),
    51: .same(proto: "SQUASH"),
    52: .same(proto: "BASEBALL"),
    53: .same(proto: "SOFTBALL"),
    54: .same(proto: "SHUTTLECOCK"),
    55: .same(proto: "SEPAKTAKRAW"),
    56: .same(proto: "STREET_DANCE"),
    57: .same(proto: "MOUNTAIN_CLINBING"),
    58: .same(proto: "ROPE_SKIPPING"),
    59: .same(proto: "CLIMB_STAIRS"),
    60: .same(proto: "BALLET"),
    61: .same(proto: "SOCIAL_DANCE"),
    62: .same(proto: "DARTS"),
    63: .same(proto: "HORSEBACK_RIDING"),
    64: .same(proto: "ROLLER_SKATING"),
    65: .same(proto: "TAI_CHI"),
    66: .same(proto: "FRISBEE"),
    67: .same(proto: "HULA_HOOP"),
    68: .same(proto: "SLEIGH"),
    69: .same(proto: "SKATING"),
    70: .same(proto: "BOBSLEIGH_AND_TOBOGGANING"),
    71: .same(proto: "CURLING"),
    72: .same(proto: "ICE_HOCKEY"),
    73: .same(proto: "SURFING"),
    74: .same(proto: "SAILBOAT"),
    75: .same(proto: "SAILBOARD"),
    76: .same(proto: "FOLDBOATING"),
    77: .same(proto: "CANOEING"),
    78: .same(proto: "BOAT_RACE"),
    79: .same(proto: "MOTORBOAT"),
    80: .same(proto: "WATER_POLO"),
    81: .same(proto: "SLIDING_PLATE"),
    82: .same(proto: "ROCK_CLIMBING"),
    83: .same(proto: "BUNGEE_JUMPING"),
    84: .same(proto: "PARKOUR"),
    85: .same(proto: "OTHER"),
    86: .same(proto: "SPINNING"),
    87: .same(proto: "MARTIAL_ARTS"),
    88: .same(proto: "TAEKWONDO"),
    89: .same(proto: "KARATE"),
    90: .same(proto: "GYMNASTICS"),
    91: .same(proto: "PADEL"),
    92: .same(proto: "PICKLEBALL"),
    93: .same(proto: "SNOWBOARDING"),
    94: .same(proto: "ALPINE_SKIING"),
    95: .same(proto: "PADDLING"),
    96: .same(proto: "BMX"),
    97: .same(proto: "FENCING"),
    98: .same(proto: "BILLIARDS"),
    99: .same(proto: "BEACH_SOCCER"),
    100: .same(proto: "BEACH_VOLLEYBALL"),
    101: .same(proto: "DODGEBALL"),
    102: .same(proto: "JAZZ"),
    103: .same(proto: "LATIN"),
    104: .same(proto: "SQUARE_DANCE"),
    105: .same(proto: "VOLLEYBALL"),
    106: .same(proto: "KITE_FLYING"),
    107: .same(proto: "FISHING"),
    108: .same(proto: "ARCHERY"),
    109: .same(proto: "SHOOTING"),
    110: .same(proto: "WHITE_WATER_RAFTING"),
    111: .same(proto: "DOWNHILL_SKIING"),
    112: .same(proto: "CROSS_COUNTRY_SKIING"),
    113: .same(proto: "BIATHON"),
    114: .same(proto: "DRAGON_BOAT_RACING"),
    115: .same(proto: "RACING"),
    116: .same(proto: "AUSTRALIAN_RULES_FOOTBALL"),
    117: .same(proto: "BOULDERING"),
    118: .same(proto: "TRACK_RUNNING"),
    119: .same(proto: "STANDUP_PADDLEBOARDING"),
    120: .same(proto: "RACQUETBALL"),
    121: .same(proto: "DISC_OLF"),
    122: .same(proto: "SKIING"),
    123: .same(proto: "INLINE_SKATING"),
    124: .same(proto: "OUTDOOR_FITNESS"),
    125: .same(proto: "SNOW_SKATEBOARDING"),
    126: .same(proto: "CANOE"),
    127: .same(proto: "MIXED_AEROBICS"),
    128: .same(proto: "WEIGHTLIFTING"),
    129: .same(proto: "ULTIMATE_FRISBEE"),
    130: .same(proto: "CROSS_TRAINING"),
    131: .same(proto: "INTERVAL_TRAINING"),
    132: .same(proto: "EQUESTRIAN_SPORTS"),
    133: .same(proto: "KAYAKING"),
    134: .same(proto: "WRESTLING"),
    135: .same(proto: "INDOOR_CLIMBING"),
    136: .same(proto: "ATHLETICS"),
    137: .same(proto: "STEP_AEROBICS"),
    138: .same(proto: "PHYSICAL_CONDITIONING"),
    139: .same(proto: "RECREATIONAL_SPORTS"),
    140: .same(proto: "CIRCUIT_TRAINING"),
    141: .same(proto: "SNOW_SPORTS"),
    142: .same(proto: "AEROBIC_EXERCISE"),
    143: .same(proto: "RUGBY"),
    144: .same(proto: "REHEALTHY_TRAINING"),
    145: .same(proto: "MULTISPORT"),
    146: .same(proto: "WALKING_BRISK"),
    147: .same(proto: "JOGGING"),
    148: .same(proto: "TRAMPOLINING"),
    149: .same(proto: "HIGH_JUMP"),
    150: .same(proto: "TRIATHLON"),
    151: .same(proto: "MARATHON"),
    152: .same(proto: "RACE_WALKING"),
    153: .same(proto: "TUG_OF_WAR"),
    154: .same(proto: "KENDO"),
    155: .same(proto: "CARDIO_BOXING"),
    156: .same(proto: "MUAY_THAI"),
    157: .same(proto: "KETTLEBELL"),
    158: .same(proto: "SKATEBOARDING"),
    159: .same(proto: "STEEPLECHASE"),
    160: .same(proto: "KITESURFING"),
    161: .same(proto: "WINDSURFING"),
    162: .same(proto: "HANDCYCLING"),
    163: .same(proto: "GROUP_CALISTHENICS"),
    164: .same(proto: "PARACHUTING"),
    165: .same(proto: "HORSE_RACE"),
    166: .same(proto: "KICKBOXING_AEROBICS"),
    167: .same(proto: "FOLK_DANCING"),
    168: .same(proto: "CHA_CHA"),
    169: .same(proto: "WAIST_TRAINING"),
    170: .same(proto: "STRETCHING"),
    171: .same(proto: "DIVING"),
    172: .same(proto: "HYBRID_TRAINING"),
    173: .same(proto: "HOT_AIR_BALLOON"),
    174: .same(proto: "ORIENTEERING"),
    175: .same(proto: "AB_ROLLER"),
    176: .same(proto: "CROSS_FIT"),
    177: .same(proto: "POLE_DANCE"),
    178: .same(proto: "CROQUET"),
  ]
}

extension wtm_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WTM_START"),
    1: .same(proto: "WTM_END"),
  ]
}

extension quick_card_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CARD_TYPE_EXERCISE"),
    1: .same(proto: "CARD_TYPE_WEATHER"),
    2: .same(proto: "CARD_TYPE_SUGGEST"),
    3: .same(proto: "CARD_TYPE_DIAL"),
    4: .same(proto: "CARD_TYPE_ACTIVITY"),
    5: .same(proto: "CARD_TYPE_HEARTRATE"),
    6: .same(proto: "CARD_TYPE_SLEEP"),
    7: .same(proto: "CARD_TYPE_STEPS"),
    8: .same(proto: "CARD_TYPE_SPO2"),
    9: .same(proto: "CARD_TYPE_MENSTRUATION"),
    10: .same(proto: "CARD_TYPE_MEASUREMENT"),
    11: .same(proto: "CARD_TYPE_RECENT_WORKOUT"),
    12: .same(proto: "CARD_TYPE_HRV"),
    13: .same(proto: "CARD_TYPE_UV"),
    14: .same(proto: "CARD_TYPE_ASTRONOMY"),
    15: .same(proto: "CARD_TYPE_WORLD_CLOCK"),
    16: .same(proto: "CARD_TYPE_ALEXA"),
    17: .same(proto: "CARD_TYPE_ALIPAY"),
    18: .same(proto: "CARD_TYPE_STRESS"),
    19: .same(proto: "CARD_TYPE_HEALTH_EXPRESS"),
    20: .same(proto: "CARD_TYPE_TEMPERATURE"),
    21: .same(proto: "CARD_TYPE_DRINK_ASSISTANT"),
    22: .same(proto: "CARD_TYPE_TRAINING_LOAD"),
    23: .same(proto: "CARD_TYPE_HEALTH_SNAP"),
    24: .same(proto: "CARD_TYPE_INTENSITY_MINUTES"),
    25: .same(proto: "CARD_TYPE_COMPASS"),
  ]
}

extension geobin_operate_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GEOBIN_OPERATE_TYPE_INQUIRE"),
    1: .same(proto: "GEOBIN_OPERATE_TYPE_DELETE"),
  ]
}
