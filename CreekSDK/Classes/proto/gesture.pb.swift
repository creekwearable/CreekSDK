// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: gesture.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct gesture_switch: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gestureType: gesture_type = .doubleclick

  /////1模拟翻页  2模拟拍照
  public var controlSwitchType: gesture_switch_hid_type = .switchHidNull

  ///控制关闭闹钟
  public var controlCloseAlarm: switch_type = .switchNull

  ///控制接听电话
  public var controlCall: switch_type = .switchNull

  ///当前手势总开关
  public var switchFlag: switch_type = .switchNull

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_gesture_control_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  public var gestureSwitch: [gesture_switch] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_gesture_control_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  public var gestureSwitch: [gesture_switch] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension gesture_switch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "gesture_switch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "gesture_type"),
    2: .standard(proto: "control_switch_type"),
    3: .standard(proto: "control_close_alarm"),
    4: .standard(proto: "control_call"),
    5: .standard(proto: "switch_flag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.gestureType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.controlSwitchType) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.controlCloseAlarm) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.controlCall) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.switchFlag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.gestureType != .doubleclick {
      try visitor.visitSingularEnumField(value: self.gestureType, fieldNumber: 1)
    }
    if self.controlSwitchType != .switchHidNull {
      try visitor.visitSingularEnumField(value: self.controlSwitchType, fieldNumber: 2)
    }
    if self.controlCloseAlarm != .switchNull {
      try visitor.visitSingularEnumField(value: self.controlCloseAlarm, fieldNumber: 3)
    }
    if self.controlCall != .switchNull {
      try visitor.visitSingularEnumField(value: self.controlCall, fieldNumber: 4)
    }
    if self.switchFlag != .switchNull {
      try visitor.visitSingularEnumField(value: self.switchFlag, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: gesture_switch, rhs: gesture_switch) -> Bool {
    if lhs.gestureType != rhs.gestureType {return false}
    if lhs.controlSwitchType != rhs.controlSwitchType {return false}
    if lhs.controlCloseAlarm != rhs.controlCloseAlarm {return false}
    if lhs.controlCall != rhs.controlCall {return false}
    if lhs.switchFlag != rhs.switchFlag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_gesture_control_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_gesture_control_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "gesture_switch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.gestureSwitch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if !self.gestureSwitch.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gestureSwitch, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_gesture_control_operate, rhs: protocol_gesture_control_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.gestureSwitch != rhs.gestureSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_gesture_control_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_gesture_control_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "func_table"),
    3: .standard(proto: "gesture_switch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.gestureSwitch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 2)
    }
    if !self.gestureSwitch.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gestureSwitch, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_gesture_control_inquire_reply, rhs: protocol_gesture_control_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.gestureSwitch != rhs.gestureSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
