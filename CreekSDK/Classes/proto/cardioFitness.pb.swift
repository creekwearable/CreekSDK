// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cardioFitness.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct cardio_fitness_score: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var fiveKm: UInt32 = 0

  public var tenKm: UInt32 = 0

  public var halfMarathon: UInt32 = 0

  public var marathon: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct cardio_fitness_vo2max_data: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///实际值乘以10，10倍
  public var vo2MaxValue: UInt32 = 0

  public var unixTime: UInt32 = 0

  public var level: cardio_fitness_level = .cfLevelNull

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_cardio_fitness_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///最佳vo2max,固件会传给app，app也会下发
  public var vo2MaxBest: cardio_fitness_vo2max_data {
    get {return _vo2MaxBest ?? cardio_fitness_vo2max_data()}
    set {_vo2MaxBest = newValue}
  }
  /// Returns true if `vo2MaxBest` has been explicitly set.
  public var hasVo2MaxBest: Bool {return self._vo2MaxBest != nil}
  /// Clears the value of `vo2MaxBest`. Subsequent reads from it will return its default value.
  public mutating func clearVo2MaxBest() {self._vo2MaxBest = nil}

  ///每次测量后需要上传app,若是新设备需要旧设备历史信息，数据来源为APP下发，下发时携带时间戳，
  ///固件会上传，app会下发
  public var vo2MaxHistory: [cardio_fitness_vo2max_data] = []

  ///马拉松预测成绩，每次测量完都会更新给app，app不下发
  public var scoreBest: cardio_fitness_score {
    get {return _scoreBest ?? cardio_fitness_score()}
    set {_scoreBest = newValue}
  }
  /// Returns true if `scoreBest` has been explicitly set.
  public var hasScoreBest: Bool {return self._scoreBest != nil}
  /// Clears the value of `scoreBest`. Subsequent reads from it will return its default value.
  public mutating func clearScoreBest() {self._scoreBest = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vo2MaxBest: cardio_fitness_vo2max_data? = nil
  fileprivate var _scoreBest: cardio_fitness_score? = nil
}

public struct protocol_cardio_fitness_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///最佳vo2max,固件会传给app，app也会下发
  public var vo2MaxBest: cardio_fitness_vo2max_data {
    get {return _vo2MaxBest ?? cardio_fitness_vo2max_data()}
    set {_vo2MaxBest = newValue}
  }
  /// Returns true if `vo2MaxBest` has been explicitly set.
  public var hasVo2MaxBest: Bool {return self._vo2MaxBest != nil}
  /// Clears the value of `vo2MaxBest`. Subsequent reads from it will return its default value.
  public mutating func clearVo2MaxBest() {self._vo2MaxBest = nil}

  ///每次测量后需要上传app,若是新设备需要旧设备历史信息，数据来源为APP下发，下发时携带时间戳，
  ///固件会上传，app会下发
  public var vo2MaxHistory: [cardio_fitness_vo2max_data] = []

  ///马拉松预测成绩，每次测量完都会更新给app，app不下发
  public var scorePredict: cardio_fitness_score {
    get {return _scorePredict ?? cardio_fitness_score()}
    set {_scorePredict = newValue}
  }
  /// Returns true if `scorePredict` has been explicitly set.
  public var hasScorePredict: Bool {return self._scorePredict != nil}
  /// Clears the value of `scorePredict`. Subsequent reads from it will return its default value.
  public mutating func clearScorePredict() {self._scorePredict = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _vo2MaxBest: cardio_fitness_vo2max_data? = nil
  fileprivate var _scorePredict: cardio_fitness_score? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension cardio_fitness_score: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "cardio_fitness_score"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "five_km"),
    2: .standard(proto: "ten_km"),
    3: .standard(proto: "half_marathon"),
    4: .same(proto: "marathon"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.fiveKm) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.tenKm) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.halfMarathon) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.marathon) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.fiveKm != 0 {
      try visitor.visitSingularUInt32Field(value: self.fiveKm, fieldNumber: 1)
    }
    if self.tenKm != 0 {
      try visitor.visitSingularUInt32Field(value: self.tenKm, fieldNumber: 2)
    }
    if self.halfMarathon != 0 {
      try visitor.visitSingularUInt32Field(value: self.halfMarathon, fieldNumber: 3)
    }
    if self.marathon != 0 {
      try visitor.visitSingularUInt32Field(value: self.marathon, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: cardio_fitness_score, rhs: cardio_fitness_score) -> Bool {
    if lhs.fiveKm != rhs.fiveKm {return false}
    if lhs.tenKm != rhs.tenKm {return false}
    if lhs.halfMarathon != rhs.halfMarathon {return false}
    if lhs.marathon != rhs.marathon {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension cardio_fitness_vo2max_data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "cardio_fitness_vo2max_data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "vo2max_value"),
    2: .standard(proto: "unix_time"),
    3: .same(proto: "level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.vo2MaxValue) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.unixTime) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.level) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.vo2MaxValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.vo2MaxValue, fieldNumber: 1)
    }
    if self.unixTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.unixTime, fieldNumber: 2)
    }
    if self.level != .cfLevelNull {
      try visitor.visitSingularEnumField(value: self.level, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: cardio_fitness_vo2max_data, rhs: cardio_fitness_vo2max_data) -> Bool {
    if lhs.vo2MaxValue != rhs.vo2MaxValue {return false}
    if lhs.unixTime != rhs.unixTime {return false}
    if lhs.level != rhs.level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_cardio_fitness_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_cardio_fitness_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "vo2max_best"),
    3: .standard(proto: "vo2max_history"),
    4: .standard(proto: "score_best"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._vo2MaxBest) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.vo2MaxHistory) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._scoreBest) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    try { if let v = self._vo2MaxBest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if !self.vo2MaxHistory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vo2MaxHistory, fieldNumber: 3)
    }
    try { if let v = self._scoreBest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_cardio_fitness_operate, rhs: protocol_cardio_fitness_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs._vo2MaxBest != rhs._vo2MaxBest {return false}
    if lhs.vo2MaxHistory != rhs.vo2MaxHistory {return false}
    if lhs._scoreBest != rhs._scoreBest {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_cardio_fitness_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_cardio_fitness_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "func_table"),
    3: .standard(proto: "vo2max_best"),
    4: .standard(proto: "vo2max_history"),
    5: .standard(proto: "score_predict"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._vo2MaxBest) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.vo2MaxHistory) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._scorePredict) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 2)
    }
    try { if let v = self._vo2MaxBest {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.vo2MaxHistory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.vo2MaxHistory, fieldNumber: 4)
    }
    try { if let v = self._scorePredict {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_cardio_fitness_inquire_reply, rhs: protocol_cardio_fitness_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs._vo2MaxBest != rhs._vo2MaxBest {return false}
    if lhs.vo2MaxHistory != rhs.vo2MaxHistory {return false}
    if lhs._scorePredict != rhs._scorePredict {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
