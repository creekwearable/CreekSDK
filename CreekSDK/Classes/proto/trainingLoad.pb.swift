// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: trainingLoad.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_training_load_item: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var year: UInt32 = 0

  public var month: UInt32 = 0

  public var day: UInt32 = 0

  ///训练负荷值
  public var loadValue: UInt32 = 0

  ///建议区间最大值
  public var loadSuggestMax: UInt32 = 0

  ///建议区间最小值
  public var loadSuggestMin: UInt32 = 0

  ///区间临界值，用于划图表
  public var loadCriticalMax: UInt32 = 0

  ///训练准备度值
  public var readinessValue: UInt32 = 0

  ///训练准备度等级
  public var readinessLevel: readiness_level = .readinessLow

  ///训练准备度状态
  public var readinessStatus: readiness_status = .readinessNull

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_training_load_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型
  public var operate: operate_type = .invalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_training_load_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes操作类型
  public var operate: operate_type = .invalid

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 训练负荷记录最大数量
  public var snapRecordSupportMax: UInt32 = 0

  ///训练负荷数据
  public var loadItems: [protocol_training_load_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_training_load_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_training_load_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "year"),
    2: .same(proto: "month"),
    3: .same(proto: "day"),
    4: .standard(proto: "load_value"),
    5: .standard(proto: "load_suggest_max"),
    6: .standard(proto: "load_suggest_min"),
    7: .standard(proto: "load_critical_max"),
    8: .standard(proto: "readiness_value"),
    9: .standard(proto: "readiness_level"),
    10: .standard(proto: "readiness_status"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.year) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.month) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.day) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.loadValue) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.loadSuggestMax) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.loadSuggestMin) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.loadCriticalMax) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.readinessValue) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self.readinessLevel) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self.readinessStatus) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.year != 0 {
      try visitor.visitSingularUInt32Field(value: self.year, fieldNumber: 1)
    }
    if self.month != 0 {
      try visitor.visitSingularUInt32Field(value: self.month, fieldNumber: 2)
    }
    if self.day != 0 {
      try visitor.visitSingularUInt32Field(value: self.day, fieldNumber: 3)
    }
    if self.loadValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.loadValue, fieldNumber: 4)
    }
    if self.loadSuggestMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.loadSuggestMax, fieldNumber: 5)
    }
    if self.loadSuggestMin != 0 {
      try visitor.visitSingularUInt32Field(value: self.loadSuggestMin, fieldNumber: 6)
    }
    if self.loadCriticalMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.loadCriticalMax, fieldNumber: 7)
    }
    if self.readinessValue != 0 {
      try visitor.visitSingularUInt32Field(value: self.readinessValue, fieldNumber: 8)
    }
    if self.readinessLevel != .readinessLow {
      try visitor.visitSingularEnumField(value: self.readinessLevel, fieldNumber: 9)
    }
    if self.readinessStatus != .readinessNull {
      try visitor.visitSingularEnumField(value: self.readinessStatus, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_training_load_item, rhs: protocol_training_load_item) -> Bool {
    if lhs.year != rhs.year {return false}
    if lhs.month != rhs.month {return false}
    if lhs.day != rhs.day {return false}
    if lhs.loadValue != rhs.loadValue {return false}
    if lhs.loadSuggestMax != rhs.loadSuggestMax {return false}
    if lhs.loadSuggestMin != rhs.loadSuggestMin {return false}
    if lhs.loadCriticalMax != rhs.loadCriticalMax {return false}
    if lhs.readinessValue != rhs.readinessValue {return false}
    if lhs.readinessLevel != rhs.readinessLevel {return false}
    if lhs.readinessStatus != rhs.readinessStatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_training_load_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_training_load_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_training_load_operate, rhs: protocol_training_load_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_training_load_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_training_load_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "func_table"),
    3: .standard(proto: "snap_record_support_max"),
    4: .standard(proto: "load_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.snapRecordSupportMax) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.loadItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 2)
    }
    if self.snapRecordSupportMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.snapRecordSupportMax, fieldNumber: 3)
    }
    if !self.loadItems.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.loadItems, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_training_load_inquire_reply, rhs: protocol_training_load_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.snapRecordSupportMax != rhs.snapRecordSupportMax {return false}
    if lhs.loadItems != rhs.loadItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
