// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: message.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_message_notify_switch_item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes enumeration type of message
  public var remindType: message_remind_type = .null

  ///1bytes reserved: notification type: 0 allows notification; 1: silent notification; 2: close notification
  public var notifyFlag: notify_type = .allow

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Get the device support message type
public struct protocol_message_notify_func_support_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sms: Bool {
    get {return _storage._sms}
    set {_uniqueStorage()._sms = newValue}
  }

  public var email: Bool {
    get {return _storage._email}
    set {_uniqueStorage()._email = newValue}
  }

  public var calendar: Bool {
    get {return _storage._calendar}
    set {_uniqueStorage()._calendar = newValue}
  }

  public var missedCall: Bool {
    get {return _storage._missedCall}
    set {_uniqueStorage()._missedCall = newValue}
  }

  public var facebook: Bool {
    get {return _storage._facebook}
    set {_uniqueStorage()._facebook = newValue}
  }

  public var twitter: Bool {
    get {return _storage._twitter}
    set {_uniqueStorage()._twitter = newValue}
  }

  public var instagram: Bool {
    get {return _storage._instagram}
    set {_uniqueStorage()._instagram = newValue}
  }

  public var snapchat: Bool {
    get {return _storage._snapchat}
    set {_uniqueStorage()._snapchat = newValue}
  }

  public var whatsapp: Bool {
    get {return _storage._whatsapp}
    set {_uniqueStorage()._whatsapp = newValue}
  }

  public var line: Bool {
    get {return _storage._line}
    set {_uniqueStorage()._line = newValue}
  }

  public var tiktok: Bool {
    get {return _storage._tiktok}
    set {_uniqueStorage()._tiktok = newValue}
  }

  public var skype: Bool {
    get {return _storage._skype}
    set {_uniqueStorage()._skype = newValue}
  }

  public var wechat: Bool {
    get {return _storage._wechat}
    set {_uniqueStorage()._wechat = newValue}
  }

  public var fitbeing: Bool {
    get {return _storage._fitbeing}
    set {_uniqueStorage()._fitbeing = newValue}
  }

  public var microsoftTeams: Bool {
    get {return _storage._microsoftTeams}
    set {_uniqueStorage()._microsoftTeams = newValue}
  }

  public var telegramMessenger: Bool {
    get {return _storage._telegramMessenger}
    set {_uniqueStorage()._telegramMessenger = newValue}
  }

  public var messenger: Bool {
    get {return _storage._messenger}
    set {_uniqueStorage()._messenger = newValue}
  }

  public var linkedin: Bool {
    get {return _storage._linkedin}
    set {_uniqueStorage()._linkedin = newValue}
  }

  public var gmail: Bool {
    get {return _storage._gmail}
    set {_uniqueStorage()._gmail = newValue}
  }

  public var microsoftOutlook: Bool {
    get {return _storage._microsoftOutlook}
    set {_uniqueStorage()._microsoftOutlook = newValue}
  }

  public var googleChat: Bool {
    get {return _storage._googleChat}
    set {_uniqueStorage()._googleChat = newValue}
  }

  public var qq: Bool {
    get {return _storage._qq}
    set {_uniqueStorage()._qq = newValue}
  }

  public var whatsappBusiness: Bool {
    get {return _storage._whatsappBusiness}
    set {_uniqueStorage()._whatsappBusiness = newValue}
  }

  public var youtube: Bool {
    get {return _storage._youtube}
    set {_uniqueStorage()._youtube = newValue}
  }

  public var uber: Bool {
    get {return _storage._uber}
    set {_uniqueStorage()._uber = newValue}
  }

  public var uberEats: Bool {
    get {return _storage._uberEats}
    set {_uniqueStorage()._uberEats = newValue}
  }

  public var doorDashMissing: Bool {
    get {return _storage._doorDashMissing}
    set {_uniqueStorage()._doorDashMissing = newValue}
  }

  public var bancoGeneral: Bool {
    get {return _storage._bancoGeneral}
    set {_uniqueStorage()._bancoGeneral = newValue}
  }

  public var bacBank: Bool {
    get {return _storage._bacBank}
    set {_uniqueStorage()._bacBank = newValue}
  }

  public var googleMaps: Bool {
    get {return _storage._googleMaps}
    set {_uniqueStorage()._googleMaps = newValue}
  }

  public var amazonShopping: Bool {
    get {return _storage._amazonShopping}
    set {_uniqueStorage()._amazonShopping = newValue}
  }

  public var spotify: Bool {
    get {return _storage._spotify}
    set {_uniqueStorage()._spotify = newValue}
  }

  public var discord: Bool {
    get {return _storage._discord}
    set {_uniqueStorage()._discord = newValue}
  }

  public var remindTypeMax: Bool {
    get {return _storage._remindTypeMax}
    set {_uniqueStorage()._remindTypeMax = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///app message reminder
public struct protocol_message_notify_data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: setting
  public var operate: operate_type = .invalid

  ///1bytes platform type
  public var osPlatform: notify_os_platform = .androidNotify

  ///1bytes reserved: notification type: 0 allows notification; 1: silent notification; 2: close notification
  public var notifyFlag: notify_type = .allow

  ///1bytes message enumeration type
  public var remindType: message_remind_type = .null

  ///max:64 contact name
  public var contactText: Data = Data()

  /// max:250 message content
  public var msgContent: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_message_notify_data_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes function table
  public var funcTable: UInt32 = 0

  ///1bytes operation type 0: invalid operation 1: query 2: setting
  public var operate: operate_type = .invalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Set message switch
public struct protocol_message_notify_switch {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: setting
  public var operate: operate_type = .invalid

  ///1bytes app message notification switch
  public var notifySwitch: Bool = false

  public var items: [protocol_message_notify_switch_item] = []

  ///1bytes Whether to directly enter the message details or pop up the application icon switch
  public var accessDetailsDirectSwitch: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_message_notify_switch_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: setting
  public var operate: operate_type = .invalid

  ///1bytes app message notification switch
  public var notifySwitch: Bool = false

  public var items: [protocol_message_notify_switch_item] = []

  ///1bytes Whether to directly enter the message details or pop up the application icon switch
  public var accessDetailsDirectSwitch: Bool = false

  ///Function table
  public var funcTable: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_message_notify_switch_item: @unchecked Sendable {}
extension protocol_message_notify_func_support_reply: @unchecked Sendable {}
extension protocol_message_notify_data: @unchecked Sendable {}
extension protocol_message_notify_data_inquire_reply: @unchecked Sendable {}
extension protocol_message_notify_switch: @unchecked Sendable {}
extension protocol_message_notify_switch_inquire_reply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_message_notify_switch_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_message_notify_switch_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "remind_type"),
    2: .standard(proto: "notify_flag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.remindType) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.notifyFlag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.remindType != .null {
      try visitor.visitSingularEnumField(value: self.remindType, fieldNumber: 1)
    }
    if self.notifyFlag != .allow {
      try visitor.visitSingularEnumField(value: self.notifyFlag, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_message_notify_switch_item, rhs: protocol_message_notify_switch_item) -> Bool {
    if lhs.remindType != rhs.remindType {return false}
    if lhs.notifyFlag != rhs.notifyFlag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_message_notify_func_support_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_message_notify_func_support_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sms"),
    2: .same(proto: "email"),
    3: .same(proto: "calendar"),
    4: .standard(proto: "missed_call"),
    5: .same(proto: "facebook"),
    6: .same(proto: "twitter"),
    7: .same(proto: "instagram"),
    8: .same(proto: "snapchat"),
    9: .same(proto: "whatsapp"),
    10: .same(proto: "line"),
    11: .same(proto: "tiktok"),
    12: .same(proto: "skype"),
    13: .same(proto: "wechat"),
    14: .same(proto: "Fitbeing"),
    15: .standard(proto: "microsoft_teams"),
    16: .standard(proto: "telegram_messenger"),
    17: .same(proto: "messenger"),
    18: .same(proto: "linkedin"),
    19: .same(proto: "gmail"),
    20: .standard(proto: "microsoft_outlook"),
    21: .standard(proto: "google_chat"),
    22: .same(proto: "qq"),
    23: .standard(proto: "whatsapp_business"),
    24: .same(proto: "Youtube"),
    25: .same(proto: "Uber"),
    26: .standard(proto: "Uber_eats"),
    27: .standard(proto: "Door_Dash_missing"),
    28: .standard(proto: "Banco_General"),
    29: .standard(proto: "BAC_Bank"),
    30: .standard(proto: "Google_Maps"),
    31: .standard(proto: "Amazon_shopping"),
    32: .same(proto: "Spotify"),
    33: .same(proto: "Discord"),
    34: .standard(proto: "remind_type_max"),
  ]

  fileprivate class _StorageClass {
    var _sms: Bool = false
    var _email: Bool = false
    var _calendar: Bool = false
    var _missedCall: Bool = false
    var _facebook: Bool = false
    var _twitter: Bool = false
    var _instagram: Bool = false
    var _snapchat: Bool = false
    var _whatsapp: Bool = false
    var _line: Bool = false
    var _tiktok: Bool = false
    var _skype: Bool = false
    var _wechat: Bool = false
    var _fitbeing: Bool = false
    var _microsoftTeams: Bool = false
    var _telegramMessenger: Bool = false
    var _messenger: Bool = false
    var _linkedin: Bool = false
    var _gmail: Bool = false
    var _microsoftOutlook: Bool = false
    var _googleChat: Bool = false
    var _qq: Bool = false
    var _whatsappBusiness: Bool = false
    var _youtube: Bool = false
    var _uber: Bool = false
    var _uberEats: Bool = false
    var _doorDashMissing: Bool = false
    var _bancoGeneral: Bool = false
    var _bacBank: Bool = false
    var _googleMaps: Bool = false
    var _amazonShopping: Bool = false
    var _spotify: Bool = false
    var _discord: Bool = false
    var _remindTypeMax: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sms = source._sms
      _email = source._email
      _calendar = source._calendar
      _missedCall = source._missedCall
      _facebook = source._facebook
      _twitter = source._twitter
      _instagram = source._instagram
      _snapchat = source._snapchat
      _whatsapp = source._whatsapp
      _line = source._line
      _tiktok = source._tiktok
      _skype = source._skype
      _wechat = source._wechat
      _fitbeing = source._fitbeing
      _microsoftTeams = source._microsoftTeams
      _telegramMessenger = source._telegramMessenger
      _messenger = source._messenger
      _linkedin = source._linkedin
      _gmail = source._gmail
      _microsoftOutlook = source._microsoftOutlook
      _googleChat = source._googleChat
      _qq = source._qq
      _whatsappBusiness = source._whatsappBusiness
      _youtube = source._youtube
      _uber = source._uber
      _uberEats = source._uberEats
      _doorDashMissing = source._doorDashMissing
      _bancoGeneral = source._bancoGeneral
      _bacBank = source._bacBank
      _googleMaps = source._googleMaps
      _amazonShopping = source._amazonShopping
      _spotify = source._spotify
      _discord = source._discord
      _remindTypeMax = source._remindTypeMax
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._sms) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._email) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._calendar) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._missedCall) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._facebook) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._twitter) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._instagram) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._snapchat) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._whatsapp) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._line) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._tiktok) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._skype) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._wechat) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._fitbeing) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._microsoftTeams) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._telegramMessenger) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._messenger) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._linkedin) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._gmail) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._microsoftOutlook) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._googleChat) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._qq) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._whatsappBusiness) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._youtube) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._uber) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._uberEats) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._doorDashMissing) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._bancoGeneral) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._bacBank) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._googleMaps) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._amazonShopping) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._spotify) }()
        case 33: try { try decoder.decodeSingularBoolField(value: &_storage._discord) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._remindTypeMax) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._sms != false {
        try visitor.visitSingularBoolField(value: _storage._sms, fieldNumber: 1)
      }
      if _storage._email != false {
        try visitor.visitSingularBoolField(value: _storage._email, fieldNumber: 2)
      }
      if _storage._calendar != false {
        try visitor.visitSingularBoolField(value: _storage._calendar, fieldNumber: 3)
      }
      if _storage._missedCall != false {
        try visitor.visitSingularBoolField(value: _storage._missedCall, fieldNumber: 4)
      }
      if _storage._facebook != false {
        try visitor.visitSingularBoolField(value: _storage._facebook, fieldNumber: 5)
      }
      if _storage._twitter != false {
        try visitor.visitSingularBoolField(value: _storage._twitter, fieldNumber: 6)
      }
      if _storage._instagram != false {
        try visitor.visitSingularBoolField(value: _storage._instagram, fieldNumber: 7)
      }
      if _storage._snapchat != false {
        try visitor.visitSingularBoolField(value: _storage._snapchat, fieldNumber: 8)
      }
      if _storage._whatsapp != false {
        try visitor.visitSingularBoolField(value: _storage._whatsapp, fieldNumber: 9)
      }
      if _storage._line != false {
        try visitor.visitSingularBoolField(value: _storage._line, fieldNumber: 10)
      }
      if _storage._tiktok != false {
        try visitor.visitSingularBoolField(value: _storage._tiktok, fieldNumber: 11)
      }
      if _storage._skype != false {
        try visitor.visitSingularBoolField(value: _storage._skype, fieldNumber: 12)
      }
      if _storage._wechat != false {
        try visitor.visitSingularBoolField(value: _storage._wechat, fieldNumber: 13)
      }
      if _storage._fitbeing != false {
        try visitor.visitSingularBoolField(value: _storage._fitbeing, fieldNumber: 14)
      }
      if _storage._microsoftTeams != false {
        try visitor.visitSingularBoolField(value: _storage._microsoftTeams, fieldNumber: 15)
      }
      if _storage._telegramMessenger != false {
        try visitor.visitSingularBoolField(value: _storage._telegramMessenger, fieldNumber: 16)
      }
      if _storage._messenger != false {
        try visitor.visitSingularBoolField(value: _storage._messenger, fieldNumber: 17)
      }
      if _storage._linkedin != false {
        try visitor.visitSingularBoolField(value: _storage._linkedin, fieldNumber: 18)
      }
      if _storage._gmail != false {
        try visitor.visitSingularBoolField(value: _storage._gmail, fieldNumber: 19)
      }
      if _storage._microsoftOutlook != false {
        try visitor.visitSingularBoolField(value: _storage._microsoftOutlook, fieldNumber: 20)
      }
      if _storage._googleChat != false {
        try visitor.visitSingularBoolField(value: _storage._googleChat, fieldNumber: 21)
      }
      if _storage._qq != false {
        try visitor.visitSingularBoolField(value: _storage._qq, fieldNumber: 22)
      }
      if _storage._whatsappBusiness != false {
        try visitor.visitSingularBoolField(value: _storage._whatsappBusiness, fieldNumber: 23)
      }
      if _storage._youtube != false {
        try visitor.visitSingularBoolField(value: _storage._youtube, fieldNumber: 24)
      }
      if _storage._uber != false {
        try visitor.visitSingularBoolField(value: _storage._uber, fieldNumber: 25)
      }
      if _storage._uberEats != false {
        try visitor.visitSingularBoolField(value: _storage._uberEats, fieldNumber: 26)
      }
      if _storage._doorDashMissing != false {
        try visitor.visitSingularBoolField(value: _storage._doorDashMissing, fieldNumber: 27)
      }
      if _storage._bancoGeneral != false {
        try visitor.visitSingularBoolField(value: _storage._bancoGeneral, fieldNumber: 28)
      }
      if _storage._bacBank != false {
        try visitor.visitSingularBoolField(value: _storage._bacBank, fieldNumber: 29)
      }
      if _storage._googleMaps != false {
        try visitor.visitSingularBoolField(value: _storage._googleMaps, fieldNumber: 30)
      }
      if _storage._amazonShopping != false {
        try visitor.visitSingularBoolField(value: _storage._amazonShopping, fieldNumber: 31)
      }
      if _storage._spotify != false {
        try visitor.visitSingularBoolField(value: _storage._spotify, fieldNumber: 32)
      }
      if _storage._discord != false {
        try visitor.visitSingularBoolField(value: _storage._discord, fieldNumber: 33)
      }
      if _storage._remindTypeMax != false {
        try visitor.visitSingularBoolField(value: _storage._remindTypeMax, fieldNumber: 34)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_message_notify_func_support_reply, rhs: protocol_message_notify_func_support_reply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sms != rhs_storage._sms {return false}
        if _storage._email != rhs_storage._email {return false}
        if _storage._calendar != rhs_storage._calendar {return false}
        if _storage._missedCall != rhs_storage._missedCall {return false}
        if _storage._facebook != rhs_storage._facebook {return false}
        if _storage._twitter != rhs_storage._twitter {return false}
        if _storage._instagram != rhs_storage._instagram {return false}
        if _storage._snapchat != rhs_storage._snapchat {return false}
        if _storage._whatsapp != rhs_storage._whatsapp {return false}
        if _storage._line != rhs_storage._line {return false}
        if _storage._tiktok != rhs_storage._tiktok {return false}
        if _storage._skype != rhs_storage._skype {return false}
        if _storage._wechat != rhs_storage._wechat {return false}
        if _storage._fitbeing != rhs_storage._fitbeing {return false}
        if _storage._microsoftTeams != rhs_storage._microsoftTeams {return false}
        if _storage._telegramMessenger != rhs_storage._telegramMessenger {return false}
        if _storage._messenger != rhs_storage._messenger {return false}
        if _storage._linkedin != rhs_storage._linkedin {return false}
        if _storage._gmail != rhs_storage._gmail {return false}
        if _storage._microsoftOutlook != rhs_storage._microsoftOutlook {return false}
        if _storage._googleChat != rhs_storage._googleChat {return false}
        if _storage._qq != rhs_storage._qq {return false}
        if _storage._whatsappBusiness != rhs_storage._whatsappBusiness {return false}
        if _storage._youtube != rhs_storage._youtube {return false}
        if _storage._uber != rhs_storage._uber {return false}
        if _storage._uberEats != rhs_storage._uberEats {return false}
        if _storage._doorDashMissing != rhs_storage._doorDashMissing {return false}
        if _storage._bancoGeneral != rhs_storage._bancoGeneral {return false}
        if _storage._bacBank != rhs_storage._bacBank {return false}
        if _storage._googleMaps != rhs_storage._googleMaps {return false}
        if _storage._amazonShopping != rhs_storage._amazonShopping {return false}
        if _storage._spotify != rhs_storage._spotify {return false}
        if _storage._discord != rhs_storage._discord {return false}
        if _storage._remindTypeMax != rhs_storage._remindTypeMax {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_message_notify_data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_message_notify_data"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "os_platform"),
    3: .standard(proto: "notify_flag"),
    4: .standard(proto: "remind_type"),
    5: .standard(proto: "contact_text"),
    6: .standard(proto: "msg_content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.osPlatform) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.notifyFlag) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.remindType) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.contactText) }()
      case 6: try { try decoder.decodeSingularBytesField(value: &self.msgContent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.osPlatform != .androidNotify {
      try visitor.visitSingularEnumField(value: self.osPlatform, fieldNumber: 2)
    }
    if self.notifyFlag != .allow {
      try visitor.visitSingularEnumField(value: self.notifyFlag, fieldNumber: 3)
    }
    if self.remindType != .null {
      try visitor.visitSingularEnumField(value: self.remindType, fieldNumber: 4)
    }
    if !self.contactText.isEmpty {
      try visitor.visitSingularBytesField(value: self.contactText, fieldNumber: 5)
    }
    if !self.msgContent.isEmpty {
      try visitor.visitSingularBytesField(value: self.msgContent, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_message_notify_data, rhs: protocol_message_notify_data) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.osPlatform != rhs.osPlatform {return false}
    if lhs.notifyFlag != rhs.notifyFlag {return false}
    if lhs.remindType != rhs.remindType {return false}
    if lhs.contactText != rhs.contactText {return false}
    if lhs.msgContent != rhs.msgContent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_message_notify_data_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_message_notify_data_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "operate"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 1)
    }
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_message_notify_data_inquire_reply, rhs: protocol_message_notify_data_inquire_reply) -> Bool {
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.operate != rhs.operate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_message_notify_switch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_message_notify_switch"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "notify_switch"),
    3: .same(proto: "items"),
    4: .standard(proto: "access_details_direct_switch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.notifySwitch) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.accessDetailsDirectSwitch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.notifySwitch != false {
      try visitor.visitSingularBoolField(value: self.notifySwitch, fieldNumber: 2)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 3)
    }
    if self.accessDetailsDirectSwitch != false {
      try visitor.visitSingularBoolField(value: self.accessDetailsDirectSwitch, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_message_notify_switch, rhs: protocol_message_notify_switch) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.notifySwitch != rhs.notifySwitch {return false}
    if lhs.items != rhs.items {return false}
    if lhs.accessDetailsDirectSwitch != rhs.accessDetailsDirectSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_message_notify_switch_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_message_notify_switch_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "notify_switch"),
    3: .same(proto: "items"),
    4: .standard(proto: "access_details_direct_switch"),
    5: .standard(proto: "func_table"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.notifySwitch) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.accessDetailsDirectSwitch) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.notifySwitch != false {
      try visitor.visitSingularBoolField(value: self.notifySwitch, fieldNumber: 2)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 3)
    }
    if self.accessDetailsDirectSwitch != false {
      try visitor.visitSingularBoolField(value: self.accessDetailsDirectSwitch, fieldNumber: 4)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_message_notify_switch_inquire_reply, rhs: protocol_message_notify_switch_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.notifySwitch != rhs.notifySwitch {return false}
    if lhs.items != rhs.items {return false}
    if lhs.accessDetailsDirectSwitch != rhs.accessDetailsDirectSwitch {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
