// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: card.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate  struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct quick_card_func {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Whether it is supported
  public var isSupport: Bool = false

  ///Whether deletion is supported
  public var isDelete: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct protocol_quick_card_operate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: setting
  public var operate: operate_type = .invalid

  public var cardType: [quick_card_type] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
}

public struct protocol_quick_card_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: setting
  public var operate: operate_type {
    get {return _storage._operate}
    set {_uniqueStorage()._operate = newValue}
  }

  ///1bytes quick card supports displaying the maximum number
  public var quickCardSupportMax: UInt32 {
    get {return _storage._quickCardSupportMax}
    set {_uniqueStorage()._quickCardSupportMax = newValue}
  }

  ///1bytes quick card support display minimum number
  public var quickCardSupportMin: UInt32 {
    get {return _storage._quickCardSupportMin}
    set {_uniqueStorage()._quickCardSupportMin = newValue}
  }

  public var funcTable: UInt32 {
    get {return _storage._funcTable}
    set {_uniqueStorage()._funcTable = newValue}
  }

  public var cardType: [quick_card_type] {
    get {return _storage._cardType}
    set {_uniqueStorage()._cardType = newValue}
  }

  ///Support type
  public var cardTypeExerciseSupport: quick_card_func {
    get {return _storage._cardTypeExerciseSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeExerciseSupport = newValue}
  }
  /// Returns true if `cardTypeExerciseSupport` has been explicitly set.
  public var hasCardTypeExerciseSupport: Bool {return _storage._cardTypeExerciseSupport != nil}
  /// Clears the value of `cardTypeExerciseSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeExerciseSupport() {_uniqueStorage()._cardTypeExerciseSupport = nil}

  public var cardTypeWeatherSupport: quick_card_func {
    get {return _storage._cardTypeWeatherSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeWeatherSupport = newValue}
  }
  /// Returns true if `cardTypeWeatherSupport` has been explicitly set.
  public var hasCardTypeWeatherSupport: Bool {return _storage._cardTypeWeatherSupport != nil}
  /// Clears the value of `cardTypeWeatherSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeWeatherSupport() {_uniqueStorage()._cardTypeWeatherSupport = nil}

  public var cardTypeSuggestSupport: quick_card_func {
    get {return _storage._cardTypeSuggestSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeSuggestSupport = newValue}
  }
  /// Returns true if `cardTypeSuggestSupport` has been explicitly set.
  public var hasCardTypeSuggestSupport: Bool {return _storage._cardTypeSuggestSupport != nil}
  /// Clears the value of `cardTypeSuggestSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeSuggestSupport() {_uniqueStorage()._cardTypeSuggestSupport = nil}

  public var cardTypeDialSupport: quick_card_func {
    get {return _storage._cardTypeDialSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeDialSupport = newValue}
  }
  /// Returns true if `cardTypeDialSupport` has been explicitly set.
  public var hasCardTypeDialSupport: Bool {return _storage._cardTypeDialSupport != nil}
  /// Clears the value of `cardTypeDialSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeDialSupport() {_uniqueStorage()._cardTypeDialSupport = nil}

  public var cardTypeActivitySupport: quick_card_func {
    get {return _storage._cardTypeActivitySupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeActivitySupport = newValue}
  }
  /// Returns true if `cardTypeActivitySupport` has been explicitly set.
  public var hasCardTypeActivitySupport: Bool {return _storage._cardTypeActivitySupport != nil}
  /// Clears the value of `cardTypeActivitySupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeActivitySupport() {_uniqueStorage()._cardTypeActivitySupport = nil}

  public var cardTypeHeartrateSupport: quick_card_func {
    get {return _storage._cardTypeHeartrateSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeHeartrateSupport = newValue}
  }
  /// Returns true if `cardTypeHeartrateSupport` has been explicitly set.
  public var hasCardTypeHeartrateSupport: Bool {return _storage._cardTypeHeartrateSupport != nil}
  /// Clears the value of `cardTypeHeartrateSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeHeartrateSupport() {_uniqueStorage()._cardTypeHeartrateSupport = nil}

  public var cardTypeSleepSupport: quick_card_func {
    get {return _storage._cardTypeSleepSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeSleepSupport = newValue}
  }
  /// Returns true if `cardTypeSleepSupport` has been explicitly set.
  public var hasCardTypeSleepSupport: Bool {return _storage._cardTypeSleepSupport != nil}
  /// Clears the value of `cardTypeSleepSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeSleepSupport() {_uniqueStorage()._cardTypeSleepSupport = nil}

  public var cardTypeStepsSupport: quick_card_func {
    get {return _storage._cardTypeStepsSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeStepsSupport = newValue}
  }
  /// Returns true if `cardTypeStepsSupport` has been explicitly set.
  public var hasCardTypeStepsSupport: Bool {return _storage._cardTypeStepsSupport != nil}
  /// Clears the value of `cardTypeStepsSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeStepsSupport() {_uniqueStorage()._cardTypeStepsSupport = nil}

  public var cardTypeSpo2Support: quick_card_func {
    get {return _storage._cardTypeSpo2Support ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeSpo2Support = newValue}
  }
  /// Returns true if `cardTypeSpo2Support` has been explicitly set.
  public var hasCardTypeSpo2Support: Bool {return _storage._cardTypeSpo2Support != nil}
  /// Clears the value of `cardTypeSpo2Support`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeSpo2Support() {_uniqueStorage()._cardTypeSpo2Support = nil}

  public var cardTypeMenstruationSupport: quick_card_func {
    get {return _storage._cardTypeMenstruationSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeMenstruationSupport = newValue}
  }
  /// Returns true if `cardTypeMenstruationSupport` has been explicitly set.
  public var hasCardTypeMenstruationSupport: Bool {return _storage._cardTypeMenstruationSupport != nil}
  /// Clears the value of `cardTypeMenstruationSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeMenstruationSupport() {_uniqueStorage()._cardTypeMenstruationSupport = nil}

  public var cardTypeMeasurementSupport: quick_card_func {
    get {return _storage._cardTypeMeasurementSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeMeasurementSupport = newValue}
  }
  /// Returns true if `cardTypeMeasurementSupport` has been explicitly set.
  public var hasCardTypeMeasurementSupport: Bool {return _storage._cardTypeMeasurementSupport != nil}
  /// Clears the value of `cardTypeMeasurementSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeMeasurementSupport() {_uniqueStorage()._cardTypeMeasurementSupport = nil}

  public var cardTypeRecentWorkoutSupport: quick_card_func {
    get {return _storage._cardTypeRecentWorkoutSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeRecentWorkoutSupport = newValue}
  }
  /// Returns true if `cardTypeRecentWorkoutSupport` has been explicitly set.
  public var hasCardTypeRecentWorkoutSupport: Bool {return _storage._cardTypeRecentWorkoutSupport != nil}
  /// Clears the value of `cardTypeRecentWorkoutSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeRecentWorkoutSupport() {_uniqueStorage()._cardTypeRecentWorkoutSupport = nil}

  public var cardTypeHrvSupport: quick_card_func {
    get {return _storage._cardTypeHrvSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeHrvSupport = newValue}
  }
  /// Returns true if `cardTypeHrvSupport` has been explicitly set.
  public var hasCardTypeHrvSupport: Bool {return _storage._cardTypeHrvSupport != nil}
  /// Clears the value of `cardTypeHrvSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeHrvSupport() {_uniqueStorage()._cardTypeHrvSupport = nil}

  public var cardTypeUvSupport: quick_card_func {
    get {return _storage._cardTypeUvSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeUvSupport = newValue}
  }
  /// Returns true if `cardTypeUvSupport` has been explicitly set.
  public var hasCardTypeUvSupport: Bool {return _storage._cardTypeUvSupport != nil}
  /// Clears the value of `cardTypeUvSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeUvSupport() {_uniqueStorage()._cardTypeUvSupport = nil}

  public var cardTypeAstronomySupport: quick_card_func {
    get {return _storage._cardTypeAstronomySupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeAstronomySupport = newValue}
  }
  /// Returns true if `cardTypeAstronomySupport` has been explicitly set.
  public var hasCardTypeAstronomySupport: Bool {return _storage._cardTypeAstronomySupport != nil}
  /// Clears the value of `cardTypeAstronomySupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeAstronomySupport() {_uniqueStorage()._cardTypeAstronomySupport = nil}

  public var cardTypeWorldClockSupport: quick_card_func {
    get {return _storage._cardTypeWorldClockSupport ?? quick_card_func()}
    set {_uniqueStorage()._cardTypeWorldClockSupport = newValue}
  }
  /// Returns true if `cardTypeWorldClockSupport` has been explicitly set.
  public var hasCardTypeWorldClockSupport: Bool {return _storage._cardTypeWorldClockSupport != nil}
  /// Clears the value of `cardTypeWorldClockSupport`. Subsequent reads from it will return its default value.
  mutating func clearCardTypeWorldClockSupport() {_uniqueStorage()._cardTypeWorldClockSupport = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

  fileprivate  var _storage = _StorageClass.defaultInstance
}

#if swift(>=5.5) && canImport(_Concurrency)
extension quick_card_func: @unchecked Sendable {}
extension protocol_quick_card_operate: @unchecked Sendable {}
extension protocol_quick_card_inquire_reply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension quick_card_func: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "quick_card_func"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_support"),
    2: .standard(proto: "is_delete"),
  ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isSupport) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isDelete) }()
      default: break
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isSupport != false {
      try visitor.visitSingularBoolField(value: self.isSupport, fieldNumber: 1)
    }
    if self.isDelete != false {
      try visitor.visitSingularBoolField(value: self.isDelete, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: quick_card_func, rhs: quick_card_func) -> Bool {
    if lhs.isSupport != rhs.isSupport {return false}
    if lhs.isDelete != rhs.isDelete {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_quick_card_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_quick_card_operate"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "card_type"),
  ]

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeRepeatedEnumField(value: &self.cardType) }()
      default: break
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if !self.cardType.isEmpty {
      try visitor.visitPackedEnumField(value: self.cardType, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: protocol_quick_card_operate, rhs: protocol_quick_card_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.cardType != rhs.cardType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_quick_card_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_quick_card_inquire_reply"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "quick_card_support_max"),
    3: .standard(proto: "quick_card_support_min"),
    4: .standard(proto: "func_table"),
    5: .standard(proto: "card_type"),
    6: .standard(proto: "card_type_exercise_support"),
    7: .standard(proto: "card_type_weather_support"),
    8: .standard(proto: "card_type_suggest_support"),
    9: .standard(proto: "card_type_dial_support"),
    10: .standard(proto: "card_type_activity_support"),
    11: .standard(proto: "card_type_heartrate_support"),
    12: .standard(proto: "card_type_sleep_support"),
    13: .standard(proto: "card_type_steps_support"),
    14: .standard(proto: "card_type_spo2_support"),
    15: .standard(proto: "card_type_menstruation_support"),
    16: .standard(proto: "card_type_measurement_support"),
    17: .standard(proto: "card_type_recent_workout_support"),
    18: .standard(proto: "card_type_hrv_support"),
    19: .standard(proto: "card_type_uv_support"),
    20: .standard(proto: "card_type_astronomy_support"),
    21: .standard(proto: "card_type_world_clock_support"),
  ]

  fileprivate class _StorageClass {
    public var _operate: operate_type = .invalid
    public var _quickCardSupportMax: UInt32 = 0
    public var _quickCardSupportMin: UInt32 = 0
    public var _funcTable: UInt32 = 0
    public var _cardType: [quick_card_type] = []
    public var _cardTypeExerciseSupport: quick_card_func? = nil
    public var _cardTypeWeatherSupport: quick_card_func? = nil
    public var _cardTypeSuggestSupport: quick_card_func? = nil
    public var _cardTypeDialSupport: quick_card_func? = nil
    public var _cardTypeActivitySupport: quick_card_func? = nil
    public var _cardTypeHeartrateSupport: quick_card_func? = nil
    public var _cardTypeSleepSupport: quick_card_func? = nil
    public var _cardTypeStepsSupport: quick_card_func? = nil
    public var _cardTypeSpo2Support: quick_card_func? = nil
    public var _cardTypeMenstruationSupport: quick_card_func? = nil
    public var _cardTypeMeasurementSupport: quick_card_func? = nil
    public var _cardTypeRecentWorkoutSupport: quick_card_func? = nil
    public var _cardTypeHrvSupport: quick_card_func? = nil
    public var _cardTypeUvSupport: quick_card_func? = nil
    public var _cardTypeAstronomySupport: quick_card_func? = nil
    public var _cardTypeWorldClockSupport: quick_card_func? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operate = source._operate
      _quickCardSupportMax = source._quickCardSupportMax
      _quickCardSupportMin = source._quickCardSupportMin
      _funcTable = source._funcTable
      _cardType = source._cardType
      _cardTypeExerciseSupport = source._cardTypeExerciseSupport
      _cardTypeWeatherSupport = source._cardTypeWeatherSupport
      _cardTypeSuggestSupport = source._cardTypeSuggestSupport
      _cardTypeDialSupport = source._cardTypeDialSupport
      _cardTypeActivitySupport = source._cardTypeActivitySupport
      _cardTypeHeartrateSupport = source._cardTypeHeartrateSupport
      _cardTypeSleepSupport = source._cardTypeSleepSupport
      _cardTypeStepsSupport = source._cardTypeStepsSupport
      _cardTypeSpo2Support = source._cardTypeSpo2Support
      _cardTypeMenstruationSupport = source._cardTypeMenstruationSupport
      _cardTypeMeasurementSupport = source._cardTypeMeasurementSupport
      _cardTypeRecentWorkoutSupport = source._cardTypeRecentWorkoutSupport
      _cardTypeHrvSupport = source._cardTypeHrvSupport
      _cardTypeUvSupport = source._cardTypeUvSupport
      _cardTypeAstronomySupport = source._cardTypeAstronomySupport
      _cardTypeWorldClockSupport = source._cardTypeWorldClockSupport
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._operate) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._quickCardSupportMax) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._quickCardSupportMin) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._funcTable) }()
        case 5: try { try decoder.decodeRepeatedEnumField(value: &_storage._cardType) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeExerciseSupport) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeWeatherSupport) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeSuggestSupport) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeDialSupport) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeActivitySupport) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeHeartrateSupport) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeSleepSupport) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeStepsSupport) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeSpo2Support) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeMenstruationSupport) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeMeasurementSupport) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeRecentWorkoutSupport) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeHrvSupport) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeUvSupport) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeAstronomySupport) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._cardTypeWorldClockSupport) }()
        default: break
        }
      }
    }
  }

    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._operate != .invalid {
        try visitor.visitSingularEnumField(value: _storage._operate, fieldNumber: 1)
      }
      if _storage._quickCardSupportMax != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._quickCardSupportMax, fieldNumber: 2)
      }
      if _storage._quickCardSupportMin != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._quickCardSupportMin, fieldNumber: 3)
      }
      if _storage._funcTable != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._funcTable, fieldNumber: 4)
      }
      if !_storage._cardType.isEmpty {
        try visitor.visitPackedEnumField(value: _storage._cardType, fieldNumber: 5)
      }
      try { if let v = _storage._cardTypeExerciseSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._cardTypeWeatherSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._cardTypeSuggestSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._cardTypeDialSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._cardTypeActivitySupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._cardTypeHeartrateSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._cardTypeSleepSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._cardTypeStepsSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._cardTypeSpo2Support {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._cardTypeMenstruationSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._cardTypeMeasurementSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._cardTypeRecentWorkoutSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._cardTypeHrvSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._cardTypeUvSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._cardTypeAstronomySupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._cardTypeWorldClockSupport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

    public static func ==(lhs: protocol_quick_card_inquire_reply, rhs: protocol_quick_card_inquire_reply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operate != rhs_storage._operate {return false}
        if _storage._quickCardSupportMax != rhs_storage._quickCardSupportMax {return false}
        if _storage._quickCardSupportMin != rhs_storage._quickCardSupportMin {return false}
        if _storage._funcTable != rhs_storage._funcTable {return false}
        if _storage._cardType != rhs_storage._cardType {return false}
        if _storage._cardTypeExerciseSupport != rhs_storage._cardTypeExerciseSupport {return false}
        if _storage._cardTypeWeatherSupport != rhs_storage._cardTypeWeatherSupport {return false}
        if _storage._cardTypeSuggestSupport != rhs_storage._cardTypeSuggestSupport {return false}
        if _storage._cardTypeDialSupport != rhs_storage._cardTypeDialSupport {return false}
        if _storage._cardTypeActivitySupport != rhs_storage._cardTypeActivitySupport {return false}
        if _storage._cardTypeHeartrateSupport != rhs_storage._cardTypeHeartrateSupport {return false}
        if _storage._cardTypeSleepSupport != rhs_storage._cardTypeSleepSupport {return false}
        if _storage._cardTypeStepsSupport != rhs_storage._cardTypeStepsSupport {return false}
        if _storage._cardTypeSpo2Support != rhs_storage._cardTypeSpo2Support {return false}
        if _storage._cardTypeMenstruationSupport != rhs_storage._cardTypeMenstruationSupport {return false}
        if _storage._cardTypeMeasurementSupport != rhs_storage._cardTypeMeasurementSupport {return false}
        if _storage._cardTypeRecentWorkoutSupport != rhs_storage._cardTypeRecentWorkoutSupport {return false}
        if _storage._cardTypeHrvSupport != rhs_storage._cardTypeHrvSupport {return false}
        if _storage._cardTypeUvSupport != rhs_storage._cardTypeUvSupport {return false}
        if _storage._cardTypeAstronomySupport != rhs_storage._cardTypeAstronomySupport {return false}
        if _storage._cardTypeWorldClockSupport != rhs_storage._cardTypeWorldClockSupport {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
