// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: qrcodeList.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct qr_code_list_item: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///唯一标识
  public var id: UInt32 = 0

  ///名称
  public var name: Data = Data()

  ///内容
  public var content: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_qr_code_list_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes
  public var operate: operate_II_type = .insert

  ///当前多少页，用于分段传输。
  public var pageIndex: UInt32 = 0

  ///当前页传输多少条数据，用于分段传输。
  public var pageNum: UInt32 = 0

  ///二维码内容
  public var items: [qr_code_list_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_qr_code_list_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 二维码列表最大数量
  public var qrCodeSupportMax: UInt32 = 0

  ///当前多少页，用于分段传输。
  public var pageIndex: UInt32 = 0

  ///当前页传输多少条数据，用于分段传输。
  public var pageNum: UInt32 = 0

  ///二维码内容
  public var items: [qr_code_list_item] = []

  ///总共有多少个items
  public var totalItems: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension qr_code_list_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "qr_code_list_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularBytesField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularBytesField(value: self.name, fieldNumber: 2)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularBytesField(value: self.content, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: qr_code_list_item, rhs: qr_code_list_item) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_qr_code_list_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_qr_code_list_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "page_index"),
    3: .standard(proto: "page_num"),
    4: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.pageIndex) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.pageNum) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .insert {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.pageIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageIndex, fieldNumber: 2)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageNum, fieldNumber: 3)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_qr_code_list_operate, rhs: protocol_qr_code_list_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.pageIndex != rhs.pageIndex {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_qr_code_list_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_qr_code_list_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "func_table"),
    3: .standard(proto: "qr_code_support_max"),
    4: .standard(proto: "page_index"),
    5: .standard(proto: "page_num"),
    6: .same(proto: "items"),
    7: .standard(proto: "total_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.qrCodeSupportMax) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.pageIndex) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.pageNum) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.totalItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 2)
    }
    if self.qrCodeSupportMax != 0 {
      try visitor.visitSingularUInt32Field(value: self.qrCodeSupportMax, fieldNumber: 3)
    }
    if self.pageIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageIndex, fieldNumber: 4)
    }
    if self.pageNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.pageNum, fieldNumber: 5)
    }
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 6)
    }
    if self.totalItems != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalItems, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_qr_code_list_inquire_reply, rhs: protocol_qr_code_list_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.qrCodeSupportMax != rhs.qrCodeSupportMax {return false}
    if lhs.pageIndex != rhs.pageIndex {return false}
    if lhs.pageNum != rhs.pageNum {return false}
    if lhs.items != rhs.items {return false}
    if lhs.totalItems != rhs.totalItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
