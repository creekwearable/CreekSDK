// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: multifileTran.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum multifile_tran_control_type: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case multifileTranTypeNone // = 0

  ///音频
  case multifileTranTypeMusic // = 1

  ///地图
  case multifileTranTypeMap // = 2

  ///动作指导
  case multifileTranTypeAction // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .multifileTranTypeNone
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .multifileTranTypeNone
    case 1: self = .multifileTranTypeMusic
    case 2: self = .multifileTranTypeMap
    case 3: self = .multifileTranTypeAction
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .multifileTranTypeNone: return 0
    case .multifileTranTypeMusic: return 1
    case .multifileTranTypeMap: return 2
    case .multifileTranTypeAction: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [multifile_tran_control_type] = [
    .multifileTranTypeNone,
    .multifileTranTypeMusic,
    .multifileTranTypeMap,
    .multifileTranTypeAction,
  ]

}

public enum multifile_tran_control_status: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int
  case multifileTranStatusNone // = 0

  ///开始传输
  case multifileTranStatusStart // = 1

  ///传输结束
  case multifileTranStatusEnd // = 2

  ///传输中进度
  case multifileTranStatusProgress // = 3

  ///传输异常
  case multifileTranStatusException // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .multifileTranStatusNone
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .multifileTranStatusNone
    case 1: self = .multifileTranStatusStart
    case 2: self = .multifileTranStatusEnd
    case 3: self = .multifileTranStatusProgress
    case 4: self = .multifileTranStatusException
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .multifileTranStatusNone: return 0
    case .multifileTranStatusStart: return 1
    case .multifileTranStatusEnd: return 2
    case .multifileTranStatusProgress: return 3
    case .multifileTranStatusException: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [multifile_tran_control_status] = [
    .multifileTranStatusNone,
    .multifileTranStatusStart,
    .multifileTranStatusEnd,
    .multifileTranStatusProgress,
    .multifileTranStatusException,
  ]

}

public struct protocol_multifile_tran_control_operate: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  /// 类型
  public var multifileType: multifile_tran_control_type = .multifileTranTypeNone

  /// 状态
  public var multifileStatus: multifile_tran_control_status = .multifileTranStatusNone

  /// 标题
  public var title: Data = Data()

  ///描述
  public var msg: Data = Data()

  /// 传输进度
  public var progress: UInt32 = 0

  ///传输文件总数
  public var filesTotal: UInt32 = 0

  ///传输文件index
  public var filesIndex: UInt32 = 0

  /// 传输总文件大小
  public var bytesTotal: UInt32 = 0

  /// 已传输文件大小
  public var bytesCurrent: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension multifile_tran_control_type: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MULTIFILE_TRAN_TYPE_NONE"),
    1: .same(proto: "MULTIFILE_TRAN_TYPE_MUSIC"),
    2: .same(proto: "MULTIFILE_TRAN_TYPE_MAP"),
    3: .same(proto: "MULTIFILE_TRAN_TYPE_ACTION"),
  ]
}

extension multifile_tran_control_status: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MULTIFILE_TRAN_STATUS_NONE"),
    1: .same(proto: "MULTIFILE_TRAN_STATUS_START"),
    2: .same(proto: "MULTIFILE_TRAN_STATUS_END"),
    3: .same(proto: "MULTIFILE_TRAN_STATUS_PROGRESS"),
    4: .same(proto: "MULTIFILE_TRAN_STATUS_EXCEPTION"),
  ]
}

extension protocol_multifile_tran_control_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_multifile_tran_control_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "multifile_type"),
    3: .standard(proto: "multifile_status"),
    4: .same(proto: "title"),
    5: .same(proto: "msg"),
    6: .same(proto: "progress"),
    7: .standard(proto: "files_total"),
    8: .standard(proto: "files_index"),
    9: .standard(proto: "bytes_total"),
    10: .standard(proto: "bytes_current"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.multifileType) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.multifileStatus) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.title) }()
      case 5: try { try decoder.decodeSingularBytesField(value: &self.msg) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.progress) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.filesTotal) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.filesIndex) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.bytesTotal) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.bytesCurrent) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.multifileType != .multifileTranTypeNone {
      try visitor.visitSingularEnumField(value: self.multifileType, fieldNumber: 2)
    }
    if self.multifileStatus != .multifileTranStatusNone {
      try visitor.visitSingularEnumField(value: self.multifileStatus, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularBytesField(value: self.title, fieldNumber: 4)
    }
    if !self.msg.isEmpty {
      try visitor.visitSingularBytesField(value: self.msg, fieldNumber: 5)
    }
    if self.progress != 0 {
      try visitor.visitSingularUInt32Field(value: self.progress, fieldNumber: 6)
    }
    if self.filesTotal != 0 {
      try visitor.visitSingularUInt32Field(value: self.filesTotal, fieldNumber: 7)
    }
    if self.filesIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.filesIndex, fieldNumber: 8)
    }
    if self.bytesTotal != 0 {
      try visitor.visitSingularUInt32Field(value: self.bytesTotal, fieldNumber: 9)
    }
    if self.bytesCurrent != 0 {
      try visitor.visitSingularUInt32Field(value: self.bytesCurrent, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_multifile_tran_control_operate, rhs: protocol_multifile_tran_control_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.multifileType != rhs.multifileType {return false}
    if lhs.multifileStatus != rhs.multifileStatus {return false}
    if lhs.title != rhs.title {return false}
    if lhs.msg != rhs.msg {return false}
    if lhs.progress != rhs.progress {return false}
    if lhs.filesTotal != rhs.filesTotal {return false}
    if lhs.filesIndex != rhs.filesIndex {return false}
    if lhs.bytesTotal != rhs.bytesTotal {return false}
    if lhs.bytesCurrent != rhs.bytesCurrent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
