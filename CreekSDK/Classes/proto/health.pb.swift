// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: health.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_health_get_data_size_item {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: sync_type = .syncHeartRate

  ///1bytes synchronous data offset
  public var dataOffset: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_health_get_data_size_operate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  public var item: [protocol_health_get_data_size_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_health_get_data_size_set_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  public var totalSize: UInt32 = 0

  ///0 is normal, non-0 is failed
  public var errorCode: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_health_get_data_size_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  /// support heart rate data
  public var hearRateSupport: Bool = false

  ///support blood oxygen data
  public var stressSupport: Bool = false

  ///support pressure data
  public var spo2Support: Bool = false

  ///support sleep data
  public var sleepSupport: Bool = false

  ///support multi-exercise data
  public var exerciseSupport: Bool = false

  ///support daily activity data
  public var activitySupport: Bool = false

  ///support swimming data
  public var swimSupport: Bool = false

  ///gps data
  public var gpsSupport: Bool = false

  ///support noise data
  public var noiseSupport: Bool = false

  ///support body energy data
  public var bodyEnergySupport: Bool = false

  ///support respiratory rate data
  public var respiratoryRateSupport: Bool = false

  ///Support skin temperature data
  public var skinTemperatureSupport: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_health_get_data_size_item: @unchecked Sendable {}
extension protocol_health_get_data_size_operate: @unchecked Sendable {}
extension protocol_health_get_data_size_set_reply: @unchecked Sendable {}
extension protocol_health_get_data_size_inquire_reply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_health_get_data_size_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "data_offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.dataOffset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .syncHeartRate {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.dataOffset != 0 {
      try visitor.visitSingularUInt32Field(value: self.dataOffset, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_item, rhs: protocol_health_get_data_size_item) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.dataOffset != rhs.dataOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_health_get_data_size_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_operate, rhs: protocol_health_get_data_size_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_health_get_data_size_set_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_set_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "total_size"),
    3: .standard(proto: "error_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.totalSize) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.errorCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.totalSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalSize, fieldNumber: 2)
    }
    if self.errorCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.errorCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_set_reply, rhs: protocol_health_get_data_size_set_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.totalSize != rhs.totalSize {return false}
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_health_get_data_size_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "hear_rate_support"),
    3: .standard(proto: "stress_support"),
    4: .standard(proto: "spo2_support"),
    5: .standard(proto: "sleep_support"),
    6: .standard(proto: "exercise_support"),
    7: .standard(proto: "activity_support"),
    8: .standard(proto: "swim_support"),
    9: .standard(proto: "gps_support"),
    10: .standard(proto: "noise_support"),
    11: .standard(proto: "body_energy_support"),
    12: .standard(proto: "respiratory_rate_support"),
    13: .standard(proto: "skin_temperature_support"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hearRateSupport) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.stressSupport) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.spo2Support) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.sleepSupport) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.exerciseSupport) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.activitySupport) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.swimSupport) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.gpsSupport) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.noiseSupport) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.bodyEnergySupport) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.respiratoryRateSupport) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.skinTemperatureSupport) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.hearRateSupport != false {
      try visitor.visitSingularBoolField(value: self.hearRateSupport, fieldNumber: 2)
    }
    if self.stressSupport != false {
      try visitor.visitSingularBoolField(value: self.stressSupport, fieldNumber: 3)
    }
    if self.spo2Support != false {
      try visitor.visitSingularBoolField(value: self.spo2Support, fieldNumber: 4)
    }
    if self.sleepSupport != false {
      try visitor.visitSingularBoolField(value: self.sleepSupport, fieldNumber: 5)
    }
    if self.exerciseSupport != false {
      try visitor.visitSingularBoolField(value: self.exerciseSupport, fieldNumber: 6)
    }
    if self.activitySupport != false {
      try visitor.visitSingularBoolField(value: self.activitySupport, fieldNumber: 7)
    }
    if self.swimSupport != false {
      try visitor.visitSingularBoolField(value: self.swimSupport, fieldNumber: 8)
    }
    if self.gpsSupport != false {
      try visitor.visitSingularBoolField(value: self.gpsSupport, fieldNumber: 9)
    }
    if self.noiseSupport != false {
      try visitor.visitSingularBoolField(value: self.noiseSupport, fieldNumber: 10)
    }
    if self.bodyEnergySupport != false {
      try visitor.visitSingularBoolField(value: self.bodyEnergySupport, fieldNumber: 11)
    }
    if self.respiratoryRateSupport != false {
      try visitor.visitSingularBoolField(value: self.respiratoryRateSupport, fieldNumber: 12)
    }
    if self.skinTemperatureSupport != false {
      try visitor.visitSingularBoolField(value: self.skinTemperatureSupport, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_inquire_reply, rhs: protocol_health_get_data_size_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.hearRateSupport != rhs.hearRateSupport {return false}
    if lhs.stressSupport != rhs.stressSupport {return false}
    if lhs.spo2Support != rhs.spo2Support {return false}
    if lhs.sleepSupport != rhs.sleepSupport {return false}
    if lhs.exerciseSupport != rhs.exerciseSupport {return false}
    if lhs.activitySupport != rhs.activitySupport {return false}
    if lhs.swimSupport != rhs.swimSupport {return false}
    if lhs.gpsSupport != rhs.gpsSupport {return false}
    if lhs.noiseSupport != rhs.noiseSupport {return false}
    if lhs.bodyEnergySupport != rhs.bodyEnergySupport {return false}
    if lhs.respiratoryRateSupport != rhs.respiratoryRateSupport {return false}
    if lhs.skinTemperatureSupport != rhs.skinTemperatureSupport {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
