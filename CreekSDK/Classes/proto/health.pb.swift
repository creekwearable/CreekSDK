// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: health.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_health_get_data_size_item: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var type: sync_type = .syncHeartRate

  ///1bytes 同步数据偏移
  public var dataOffset: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_health_get_data_size_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  public var item: [protocol_health_get_data_size_item] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_health_get_data_size_set_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  public var totalSize: UInt32 = 0

  ///0正常,非0失败
  public var errorCode: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_health_get_data_size_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///支持心率数据
  public var hearRateSupport: Bool = false

  ///支持血氧数据
  public var stressSupport: Bool = false

  ///支持压力数据
  public var spo2Support: Bool = false

  ///支持睡眠数据
  public var sleepSupport: Bool = false

  ///支持多运动数据
  public var exerciseSupport: Bool = false

  ///支持日常活动数据
  public var activitySupport: Bool = false

  ///支持游泳数据
  public var swimSupport: Bool = false

  ///hrv数据
  public var hrvSupport: Bool = false

  ///支持噪音数据
  public var noiseSupport: Bool = false

  ///支持身体电量数据
  public var bodyEnergySupport: Bool = false

  ///支持呼吸率数据
  public var respiratoryRateSupport: Bool = false

  ///支持皮肤温度数据
  public var bodyTemperatureSupport: Bool = false

  ///支持飞利浦睡眠数据
  public var pspSleppSupport: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_health_get_data_size_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .standard(proto: "data_offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.type) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.dataOffset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.type != .syncHeartRate {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 1)
    }
    if self.dataOffset != 0 {
      try visitor.visitSingularUInt32Field(value: self.dataOffset, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_item, rhs: protocol_health_get_data_size_item) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.dataOffset != rhs.dataOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_health_get_data_size_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .same(proto: "item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.item) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if !self.item.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.item, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_operate, rhs: protocol_health_get_data_size_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.item != rhs.item {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_health_get_data_size_set_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_set_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "total_size"),
    3: .standard(proto: "error_code"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.totalSize) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.errorCode) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.totalSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.totalSize, fieldNumber: 2)
    }
    if self.errorCode != 0 {
      try visitor.visitSingularUInt32Field(value: self.errorCode, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_set_reply, rhs: protocol_health_get_data_size_set_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.totalSize != rhs.totalSize {return false}
    if lhs.errorCode != rhs.errorCode {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_health_get_data_size_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_get_data_size_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "hear_rate_support"),
    3: .standard(proto: "stress_support"),
    4: .standard(proto: "spo2_support"),
    5: .standard(proto: "sleep_support"),
    6: .standard(proto: "exercise_support"),
    7: .standard(proto: "activity_support"),
    8: .standard(proto: "swim_support"),
    9: .standard(proto: "hrv_support"),
    10: .standard(proto: "noise_support"),
    11: .standard(proto: "body_energy_support"),
    12: .standard(proto: "respiratory_rate_support"),
    13: .standard(proto: "body_temperature_support"),
    14: .standard(proto: "psp_slepp_support"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.hearRateSupport) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.stressSupport) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.spo2Support) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.sleepSupport) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.exerciseSupport) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.activitySupport) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.swimSupport) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.hrvSupport) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.noiseSupport) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.bodyEnergySupport) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self.respiratoryRateSupport) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self.bodyTemperatureSupport) }()
      case 14: try { try decoder.decodeSingularBoolField(value: &self.pspSleppSupport) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.hearRateSupport != false {
      try visitor.visitSingularBoolField(value: self.hearRateSupport, fieldNumber: 2)
    }
    if self.stressSupport != false {
      try visitor.visitSingularBoolField(value: self.stressSupport, fieldNumber: 3)
    }
    if self.spo2Support != false {
      try visitor.visitSingularBoolField(value: self.spo2Support, fieldNumber: 4)
    }
    if self.sleepSupport != false {
      try visitor.visitSingularBoolField(value: self.sleepSupport, fieldNumber: 5)
    }
    if self.exerciseSupport != false {
      try visitor.visitSingularBoolField(value: self.exerciseSupport, fieldNumber: 6)
    }
    if self.activitySupport != false {
      try visitor.visitSingularBoolField(value: self.activitySupport, fieldNumber: 7)
    }
    if self.swimSupport != false {
      try visitor.visitSingularBoolField(value: self.swimSupport, fieldNumber: 8)
    }
    if self.hrvSupport != false {
      try visitor.visitSingularBoolField(value: self.hrvSupport, fieldNumber: 9)
    }
    if self.noiseSupport != false {
      try visitor.visitSingularBoolField(value: self.noiseSupport, fieldNumber: 10)
    }
    if self.bodyEnergySupport != false {
      try visitor.visitSingularBoolField(value: self.bodyEnergySupport, fieldNumber: 11)
    }
    if self.respiratoryRateSupport != false {
      try visitor.visitSingularBoolField(value: self.respiratoryRateSupport, fieldNumber: 12)
    }
    if self.bodyTemperatureSupport != false {
      try visitor.visitSingularBoolField(value: self.bodyTemperatureSupport, fieldNumber: 13)
    }
    if self.pspSleppSupport != false {
      try visitor.visitSingularBoolField(value: self.pspSleppSupport, fieldNumber: 14)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_get_data_size_inquire_reply, rhs: protocol_health_get_data_size_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.hearRateSupport != rhs.hearRateSupport {return false}
    if lhs.stressSupport != rhs.stressSupport {return false}
    if lhs.spo2Support != rhs.spo2Support {return false}
    if lhs.sleepSupport != rhs.sleepSupport {return false}
    if lhs.exerciseSupport != rhs.exerciseSupport {return false}
    if lhs.activitySupport != rhs.activitySupport {return false}
    if lhs.swimSupport != rhs.swimSupport {return false}
    if lhs.hrvSupport != rhs.hrvSupport {return false}
    if lhs.noiseSupport != rhs.noiseSupport {return false}
    if lhs.bodyEnergySupport != rhs.bodyEnergySupport {return false}
    if lhs.respiratoryRateSupport != rhs.respiratoryRateSupport {return false}
    if lhs.bodyTemperatureSupport != rhs.bodyTemperatureSupport {return false}
    if lhs.pspSleppSupport != rhs.pspSleppSupport {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
