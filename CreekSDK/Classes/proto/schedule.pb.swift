// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: schedule.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///设置事项数据子项数据
public struct protocol_schedule_item: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 事项id
  public var scheduleID: UInt32 = 0

  ///1bytes  DISP_ON 显示 ;   DISP_OFF-不显示
  public var status: disp_status = .dispOff

  ///2bytes 年份
  public var year: UInt32 = 0

  public var mon: UInt32 = 0

  public var day: UInt32 = 0

  ///1bytes
  public var hour: UInt32 = 0

  ///1bytes
  public var minute: UInt32 = 0

  public var sec: UInt32 = 0

  ///7bytes 重复 周一到周日
  public var `repeat`: [Bool] = []

  ///1bytes
  public var titleLen: UInt32 = 0

  ///1bytes
  public var contentLen: UInt32 = 0

  ///max:70
  public var title: String = String()

  ///max:150
  public var content: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_schedule_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型
  public var operate: operate_II_type = .insert

  ///1bytes 通知类型
  public var notifyFlag: notify_type = .allow

  ///items的个数， 操作类型1,2,3，每次发送1个item数据 查询的时候填0
  public var itemNum: UInt32 = 0

  ///事项数据item
  public var scheduleItem: protocol_schedule_item {
    get {return _scheduleItem ?? protocol_schedule_item()}
    set {_scheduleItem = newValue}
  }
  /// Returns true if `scheduleItem` has been explicitly set.
  public var hasScheduleItem: Bool {return self._scheduleItem != nil}
  /// Clears the value of `scheduleItem`. Subsequent reads from it will return its default value.
  public mutating func clearScheduleItem() {self._scheduleItem = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _scheduleItem: protocol_schedule_item? = nil
}

public struct protocol_schedule_inquire_reply: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 功能表
  public var funcTable: UInt32 {
    get {return _storage._funcTable}
    set {_uniqueStorage()._funcTable = newValue}
  }

  ///1bytes 操作类型
  public var operate: operate_II_type {
    get {return _storage._operate}
    set {_uniqueStorage()._operate = newValue}
  }

  ///1bytes 通知类型
  public var notifyFlag: notify_type {
    get {return _storage._notifyFlag}
    set {_uniqueStorage()._notifyFlag = newValue}
  }

  ///items的个数， 操作类型1,2,3，每次发送1个item数据 查询的时候填0
  public var itemNum: UInt32 {
    get {return _storage._itemNum}
    set {_uniqueStorage()._itemNum = newValue}
  }

  ///事项数据item
  public var scheduleItem: protocol_schedule_item {
    get {return _storage._scheduleItem ?? protocol_schedule_item()}
    set {_uniqueStorage()._scheduleItem = newValue}
  }
  /// Returns true if `scheduleItem` has been explicitly set.
  public var hasScheduleItem: Bool {return _storage._scheduleItem != nil}
  /// Clears the value of `scheduleItem`. Subsequent reads from it will return its default value.
  public mutating func clearScheduleItem() {_uniqueStorage()._scheduleItem = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_schedule_item: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_schedule_item"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "schedule_id"),
    2: .same(proto: "status"),
    3: .same(proto: "year"),
    4: .same(proto: "mon"),
    5: .same(proto: "day"),
    6: .same(proto: "hour"),
    7: .same(proto: "minute"),
    8: .same(proto: "sec"),
    9: .same(proto: "repeat"),
    10: .standard(proto: "title_len"),
    11: .standard(proto: "content_len"),
    12: .same(proto: "title"),
    13: .same(proto: "content"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.scheduleID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.status) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.year) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.mon) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.day) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.hour) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.minute) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.sec) }()
      case 9: try { try decoder.decodeRepeatedBoolField(value: &self.`repeat`) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.titleLen) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.contentLen) }()
      case 12: try { try decoder.decodeSingularStringField(value: &self.title) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self.content) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.scheduleID != 0 {
      try visitor.visitSingularUInt32Field(value: self.scheduleID, fieldNumber: 1)
    }
    if self.status != .dispOff {
      try visitor.visitSingularEnumField(value: self.status, fieldNumber: 2)
    }
    if self.year != 0 {
      try visitor.visitSingularUInt32Field(value: self.year, fieldNumber: 3)
    }
    if self.mon != 0 {
      try visitor.visitSingularUInt32Field(value: self.mon, fieldNumber: 4)
    }
    if self.day != 0 {
      try visitor.visitSingularUInt32Field(value: self.day, fieldNumber: 5)
    }
    if self.hour != 0 {
      try visitor.visitSingularUInt32Field(value: self.hour, fieldNumber: 6)
    }
    if self.minute != 0 {
      try visitor.visitSingularUInt32Field(value: self.minute, fieldNumber: 7)
    }
    if self.sec != 0 {
      try visitor.visitSingularUInt32Field(value: self.sec, fieldNumber: 8)
    }
    if !self.`repeat`.isEmpty {
      try visitor.visitPackedBoolField(value: self.`repeat`, fieldNumber: 9)
    }
    if self.titleLen != 0 {
      try visitor.visitSingularUInt32Field(value: self.titleLen, fieldNumber: 10)
    }
    if self.contentLen != 0 {
      try visitor.visitSingularUInt32Field(value: self.contentLen, fieldNumber: 11)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 12)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_schedule_item, rhs: protocol_schedule_item) -> Bool {
    if lhs.scheduleID != rhs.scheduleID {return false}
    if lhs.status != rhs.status {return false}
    if lhs.year != rhs.year {return false}
    if lhs.mon != rhs.mon {return false}
    if lhs.day != rhs.day {return false}
    if lhs.hour != rhs.hour {return false}
    if lhs.minute != rhs.minute {return false}
    if lhs.sec != rhs.sec {return false}
    if lhs.`repeat` != rhs.`repeat` {return false}
    if lhs.titleLen != rhs.titleLen {return false}
    if lhs.contentLen != rhs.contentLen {return false}
    if lhs.title != rhs.title {return false}
    if lhs.content != rhs.content {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_schedule_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_schedule_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "notify_flag"),
    3: .standard(proto: "item_num"),
    4: .standard(proto: "schedule_item"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.notifyFlag) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.itemNum) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._scheduleItem) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.operate != .insert {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.notifyFlag != .allow {
      try visitor.visitSingularEnumField(value: self.notifyFlag, fieldNumber: 2)
    }
    if self.itemNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.itemNum, fieldNumber: 3)
    }
    try { if let v = self._scheduleItem {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_schedule_operate, rhs: protocol_schedule_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.notifyFlag != rhs.notifyFlag {return false}
    if lhs.itemNum != rhs.itemNum {return false}
    if lhs._scheduleItem != rhs._scheduleItem {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_schedule_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_schedule_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "operate"),
    3: .standard(proto: "notify_flag"),
    4: .standard(proto: "item_num"),
    5: .standard(proto: "schedule_item"),
  ]

  fileprivate class _StorageClass {
    var _funcTable: UInt32 = 0
    var _operate: operate_II_type = .insert
    var _notifyFlag: notify_type = .allow
    var _itemNum: UInt32 = 0
    var _scheduleItem: protocol_schedule_item? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _funcTable = source._funcTable
      _operate = source._operate
      _notifyFlag = source._notifyFlag
      _itemNum = source._itemNum
      _scheduleItem = source._scheduleItem
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._funcTable) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._operate) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._notifyFlag) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._itemNum) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._scheduleItem) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._funcTable != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._funcTable, fieldNumber: 1)
      }
      if _storage._operate != .insert {
        try visitor.visitSingularEnumField(value: _storage._operate, fieldNumber: 2)
      }
      if _storage._notifyFlag != .allow {
        try visitor.visitSingularEnumField(value: _storage._notifyFlag, fieldNumber: 3)
      }
      if _storage._itemNum != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._itemNum, fieldNumber: 4)
      }
      try { if let v = _storage._scheduleItem {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_schedule_inquire_reply, rhs: protocol_schedule_inquire_reply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._funcTable != rhs_storage._funcTable {return false}
        if _storage._operate != rhs_storage._operate {return false}
        if _storage._notifyFlag != rhs_storage._notifyFlag {return false}
        if _storage._itemNum != rhs_storage._itemNum {return false}
        if _storage._scheduleItem != rhs_storage._scheduleItem {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
