// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ephemeris.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 通用星历信息
public struct ephemeris_info: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 更新时间（Unix 时间戳，秒级或毫秒级，可按需要调整）
  public var updateTime: UInt32 = 0

  /// 是否支持该类型星历
  public var isSupported: Bool = false

  /// 是否需要更新
  public var needUpdate: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// 星历集合
public struct ephemeris_data_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 在线星历信息
  public var onlineEphemeris: ephemeris_info {
    get {return _onlineEphemeris ?? ephemeris_info()}
    set {_onlineEphemeris = newValue}
  }
  /// Returns true if `onlineEphemeris` has been explicitly set.
  public var hasOnlineEphemeris: Bool {return self._onlineEphemeris != nil}
  /// Clears the value of `onlineEphemeris`. Subsequent reads from it will return its default value.
  public mutating func clearOnlineEphemeris() {self._onlineEphemeris = nil}

  /// 离线星历信息
  public var offlineEphemeris: ephemeris_info {
    get {return _offlineEphemeris ?? ephemeris_info()}
    set {_offlineEphemeris = newValue}
  }
  /// Returns true if `offlineEphemeris` has been explicitly set.
  public var hasOfflineEphemeris: Bool {return self._offlineEphemeris != nil}
  /// Clears the value of `offlineEphemeris`. Subsequent reads from it will return its default value.
  public mutating func clearOfflineEphemeris() {self._offlineEphemeris = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _onlineEphemeris: ephemeris_info? = nil
  fileprivate var _offlineEphemeris: ephemeris_info? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension ephemeris_info: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ephemeris_info"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "update_time"),
    2: .standard(proto: "is_supported"),
    3: .standard(proto: "need_update"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.updateTime) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.isSupported) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.needUpdate) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.updateTime != 0 {
      try visitor.visitSingularUInt32Field(value: self.updateTime, fieldNumber: 1)
    }
    if self.isSupported != false {
      try visitor.visitSingularBoolField(value: self.isSupported, fieldNumber: 2)
    }
    if self.needUpdate != false {
      try visitor.visitSingularBoolField(value: self.needUpdate, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ephemeris_info, rhs: ephemeris_info) -> Bool {
    if lhs.updateTime != rhs.updateTime {return false}
    if lhs.isSupported != rhs.isSupported {return false}
    if lhs.needUpdate != rhs.needUpdate {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension ephemeris_data_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "ephemeris_data_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "online_ephemeris"),
    2: .standard(proto: "offline_ephemeris"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._onlineEphemeris) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._offlineEphemeris) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._onlineEphemeris {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._offlineEphemeris {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: ephemeris_data_operate, rhs: ephemeris_data_operate) -> Bool {
    if lhs._onlineEphemeris != rhs._onlineEphemeris {return false}
    if lhs._offlineEphemeris != rhs._offlineEphemeris {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
