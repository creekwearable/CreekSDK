// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: event.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

struct protocol_event_report {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    ///event id
    public var eventID: String = String()
    
    ///event sub id
    public var eventSubID: String = String()
    
    ///event generation time
    public var eventTime: String = String()
    
    ///message body
    public var eventMessage: String = String()
    
    public var unknownFields = SwiftProtobuf.UnknownStorage()
    
    public  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_event_report: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_event_report: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    public static let protoMessageName: String = "protocol_event_report"
    public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .standard(proto: "event_id"),
        2: .standard(proto: "event_sub_id"),
        3: .standard(proto: "event_time"),
        4: .standard(proto: "event_message"),
    ]
    
    mutating public func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            // The use of inline closures is to circumvent an issue where the compiler
            // allocates stack space for every case branch when no optimizations are
            // enabled. https://github.com/apple/swift-protobuf/issues/1034
            switch fieldNumber {
            case 1: try { try decoder.decodeSingularStringField(value: &self.eventID) }()
            case 2: try { try decoder.decodeSingularStringField(value: &self.eventSubID) }()
            case 3: try { try decoder.decodeSingularStringField(value: &self.eventTime) }()
            case 4: try { try decoder.decodeSingularStringField(value: &self.eventMessage) }()
            default: break
            }
        }
    }
    
    public  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.eventID.isEmpty {
            try visitor.visitSingularStringField(value: self.eventID, fieldNumber: 1)
        }
        if !self.eventSubID.isEmpty {
            try visitor.visitSingularStringField(value: self.eventSubID, fieldNumber: 2)
        }
        if !self.eventTime.isEmpty {
            try visitor.visitSingularStringField(value: self.eventTime, fieldNumber: 3)
        }
        if !self.eventMessage.isEmpty {
            try visitor.visitSingularStringField(value: self.eventMessage, fieldNumber: 4)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    public static func ==(lhs: protocol_event_report, rhs: protocol_event_report) -> Bool {
        if lhs.eventID != rhs.eventID {return false}
        if lhs.eventSubID != rhs.eventSubID {return false}
        if lhs.eventTime != rhs.eventTime {return false}
        if lhs.eventMessage != rhs.eventMessage {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
