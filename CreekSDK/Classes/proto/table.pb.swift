// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: table.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct function_table: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var isSupport: Bool = false

  ///2bytes
  public var cmdID: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_function_table: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///勿扰
  public var disturb: function_table {
    get {return _storage._disturb ?? function_table()}
    set {_uniqueStorage()._disturb = newValue}
  }
  /// Returns true if `disturb` has been explicitly set.
  public var hasDisturb: Bool {return _storage._disturb != nil}
  /// Clears the value of `disturb`. Subsequent reads from it will return its default value.
  public mutating func clearDisturb() {_uniqueStorage()._disturb = nil}

  ///喝水提醒
  public var waterRemind: function_table {
    get {return _storage._waterRemind ?? function_table()}
    set {_uniqueStorage()._waterRemind = newValue}
  }
  /// Returns true if `waterRemind` has been explicitly set.
  public var hasWaterRemind: Bool {return _storage._waterRemind != nil}
  /// Clears the value of `waterRemind`. Subsequent reads from it will return its default value.
  public mutating func clearWaterRemind() {_uniqueStorage()._waterRemind = nil}

  ///站立提醒
  public var standingRemind: function_table {
    get {return _storage._standingRemind ?? function_table()}
    set {_uniqueStorage()._standingRemind = newValue}
  }
  /// Returns true if `standingRemind` has been explicitly set.
  public var hasStandingRemind: Bool {return _storage._standingRemind != nil}
  /// Clears the value of `standingRemind`. Subsequent reads from it will return its default value.
  public mutating func clearStandingRemind() {_uniqueStorage()._standingRemind = nil}

  ///女性健康
  public var femaleHealth: function_table {
    get {return _storage._femaleHealth ?? function_table()}
    set {_uniqueStorage()._femaleHealth = newValue}
  }
  /// Returns true if `femaleHealth` has been explicitly set.
  public var hasFemaleHealth: Bool {return _storage._femaleHealth != nil}
  /// Clears the value of `femaleHealth`. Subsequent reads from it will return its default value.
  public mutating func clearFemaleHealth() {_uniqueStorage()._femaleHealth = nil}

  ///天气
  public var weather: function_table {
    get {return _storage._weather ?? function_table()}
    set {_uniqueStorage()._weather = newValue}
  }
  /// Returns true if `weather` has been explicitly set.
  public var hasWeather: Bool {return _storage._weather != nil}
  /// Clears the value of `weather`. Subsequent reads from it will return its default value.
  public mutating func clearWeather() {_uniqueStorage()._weather = nil}

  ///消息提醒
  public var messageData: function_table {
    get {return _storage._messageData ?? function_table()}
    set {_uniqueStorage()._messageData = newValue}
  }
  /// Returns true if `messageData` has been explicitly set.
  public var hasMessageData: Bool {return _storage._messageData != nil}
  /// Clears the value of `messageData`. Subsequent reads from it will return its default value.
  public mutating func clearMessageData() {_uniqueStorage()._messageData = nil}

  ///是否bt协议通话
  public var btCall: function_table {
    get {return _storage._btCall ?? function_table()}
    set {_uniqueStorage()._btCall = newValue}
  }
  /// Returns true if `btCall` has been explicitly set.
  public var hasBtCall: Bool {return _storage._btCall != nil}
  /// Clears the value of `btCall`. Subsequent reads from it will return its default value.
  public mutating func clearBtCall() {_uniqueStorage()._btCall = nil}

  ///是否ble协议通话
  public var bleCall: function_table {
    get {return _storage._bleCall ?? function_table()}
    set {_uniqueStorage()._bleCall = newValue}
  }
  /// Returns true if `bleCall` has been explicitly set.
  public var hasBleCall: Bool {return _storage._bleCall != nil}
  /// Clears the value of `bleCall`. Subsequent reads from it will return its default value.
  public mutating func clearBleCall() {_uniqueStorage()._bleCall = nil}

  ///日程提醒
  public var scheduleRemind: function_table {
    get {return _storage._scheduleRemind ?? function_table()}
    set {_uniqueStorage()._scheduleRemind = newValue}
  }
  /// Returns true if `scheduleRemind` has been explicitly set.
  public var hasScheduleRemind: Bool {return _storage._scheduleRemind != nil}
  /// Clears the value of `scheduleRemind`. Subsequent reads from it will return its default value.
  public mutating func clearScheduleRemind() {_uniqueStorage()._scheduleRemind = nil}

  ///语音助手
  public var voiceAssistant: function_table {
    get {return _storage._voiceAssistant ?? function_table()}
    set {_uniqueStorage()._voiceAssistant = newValue}
  }
  /// Returns true if `voiceAssistant` has been explicitly set.
  public var hasVoiceAssistant: Bool {return _storage._voiceAssistant != nil}
  /// Clears the value of `voiceAssistant`. Subsequent reads from it will return its default value.
  public mutating func clearVoiceAssistant() {_uniqueStorage()._voiceAssistant = nil}

  ///快捷卡片
  public var quickCard: function_table {
    get {return _storage._quickCard ?? function_table()}
    set {_uniqueStorage()._quickCard = newValue}
  }
  /// Returns true if `quickCard` has been explicitly set.
  public var hasQuickCard: Bool {return _storage._quickCard != nil}
  /// Clears the value of `quickCard`. Subsequent reads from it will return its default value.
  public mutating func clearQuickCard() {_uniqueStorage()._quickCard = nil}

  ///世界时钟
  public var worldTime: function_table {
    get {return _storage._worldTime ?? function_table()}
    set {_uniqueStorage()._worldTime = newValue}
  }
  /// Returns true if `worldTime` has been explicitly set.
  public var hasWorldTime: Bool {return _storage._worldTime != nil}
  /// Clears the value of `worldTime`. Subsequent reads from it will return its default value.
  public mutating func clearWorldTime() {_uniqueStorage()._worldTime = nil}

  ///常用联系人
  public var frequentContacts: function_table {
    get {return _storage._frequentContacts ?? function_table()}
    set {_uniqueStorage()._frequentContacts = newValue}
  }
  /// Returns true if `frequentContacts` has been explicitly set.
  public var hasFrequentContacts: Bool {return _storage._frequentContacts != nil}
  /// Clears the value of `frequentContacts`. Subsequent reads from it will return its default value.
  public mutating func clearFrequentContacts() {_uniqueStorage()._frequentContacts = nil}

  ///gps功能
  public var gps: function_table {
    get {return _storage._gps ?? function_table()}
    set {_uniqueStorage()._gps = newValue}
  }
  /// Returns true if `gps` has been explicitly set.
  public var hasGps: Bool {return _storage._gps != nil}
  /// Clears the value of `gps`. Subsequent reads from it will return its default value.
  public mutating func clearGps() {_uniqueStorage()._gps = nil}

  ///在线星历
  public var onlineGnss: function_table {
    get {return _storage._onlineGnss ?? function_table()}
    set {_uniqueStorage()._onlineGnss = newValue}
  }
  /// Returns true if `onlineGnss` has been explicitly set.
  public var hasOnlineGnss: Bool {return _storage._onlineGnss != nil}
  /// Clears the value of `onlineGnss`. Subsequent reads from it will return its default value.
  public mutating func clearOnlineGnss() {_uniqueStorage()._onlineGnss = nil}

  ///离线星历
  public var offlineGnss: function_table {
    get {return _storage._offlineGnss ?? function_table()}
    set {_uniqueStorage()._offlineGnss = newValue}
  }
  /// Returns true if `offlineGnss` has been explicitly set.
  public var hasOfflineGnss: Bool {return _storage._offlineGnss != nil}
  /// Clears the value of `offlineGnss`. Subsequent reads from it will return its default value.
  public mutating func clearOfflineGnss() {_uniqueStorage()._offlineGnss = nil}

  ///紧急联系人(SOS)
  public var emergencyContacts: function_table {
    get {return _storage._emergencyContacts ?? function_table()}
    set {_uniqueStorage()._emergencyContacts = newValue}
  }
  /// Returns true if `emergencyContacts` has been explicitly set.
  public var hasEmergencyContacts: Bool {return _storage._emergencyContacts != nil}
  /// Clears the value of `emergencyContacts`. Subsequent reads from it will return its default value.
  public mutating func clearEmergencyContacts() {_uniqueStorage()._emergencyContacts = nil}

  ///hrv
  public var hrv: function_table {
    get {return _storage._hrv ?? function_table()}
    set {_uniqueStorage()._hrv = newValue}
  }
  /// Returns true if `hrv` has been explicitly set.
  public var hasHrv: Bool {return _storage._hrv != nil}
  /// Clears the value of `hrv`. Subsequent reads from it will return its default value.
  public mutating func clearHrv() {_uniqueStorage()._hrv = nil}

  ///按键快捷操作
  public var buttonCrown: function_table {
    get {return _storage._buttonCrown ?? function_table()}
    set {_uniqueStorage()._buttonCrown = newValue}
  }
  /// Returns true if `buttonCrown` has been explicitly set.
  public var hasButtonCrown: Bool {return _storage._buttonCrown != nil}
  /// Clears the value of `buttonCrown`. Subsequent reads from it will return its default value.
  public mutating func clearButtonCrown() {_uniqueStorage()._buttonCrown = nil}

  ///专注模式
  public var focusMode: function_table {
    get {return _storage._focusMode ?? function_table()}
    set {_uniqueStorage()._focusMode = newValue}
  }
  /// Returns true if `focusMode` has been explicitly set.
  public var hasFocusMode: Bool {return _storage._focusMode != nil}
  /// Clears the value of `focusMode`. Subsequent reads from it will return its default value.
  public mutating func clearFocusMode() {_uniqueStorage()._focusMode = nil}

  ///寻找手表
  public var findWatch: function_table {
    get {return _storage._findWatch ?? function_table()}
    set {_uniqueStorage()._findWatch = newValue}
  }
  /// Returns true if `findWatch` has been explicitly set.
  public var hasFindWatch: Bool {return _storage._findWatch != nil}
  /// Clears the value of `findWatch`. Subsequent reads from it will return its default value.
  public mutating func clearFindWatch() {_uniqueStorage()._findWatch = nil}

  ///alexa
  public var alexa: function_table {
    get {return _storage._alexa ?? function_table()}
    set {_uniqueStorage()._alexa = newValue}
  }
  /// Returns true if `alexa` has been explicitly set.
  public var hasAlexa: Bool {return _storage._alexa != nil}
  /// Clears the value of `alexa`. Subsequent reads from it will return its default value.
  public mutating func clearAlexa() {_uniqueStorage()._alexa = nil}

  ///应用列表
  public var appList: function_table {
    get {return _storage._appList ?? function_table()}
    set {_uniqueStorage()._appList = newValue}
  }
  /// Returns true if `appList` has been explicitly set.
  public var hasAppList: Bool {return _storage._appList != nil}
  /// Clears the value of `appList`. Subsequent reads from it will return its default value.
  public mutating func clearAppList() {_uniqueStorage()._appList = nil}

  ///数据埋点
  public var eventTracking: function_table {
    get {return _storage._eventTracking ?? function_table()}
    set {_uniqueStorage()._eventTracking = newValue}
  }
  /// Returns true if `eventTracking` has been explicitly set.
  public var hasEventTracking: Bool {return _storage._eventTracking != nil}
  /// Clears the value of `eventTracking`. Subsequent reads from it will return its default value.
  public mutating func clearEventTracking() {_uniqueStorage()._eventTracking = nil}

  ///strava支持,上传数据到第三方平台
  public var stravaApp: function_table {
    get {return _storage._stravaApp ?? function_table()}
    set {_uniqueStorage()._stravaApp = newValue}
  }
  /// Returns true if `stravaApp` has been explicitly set.
  public var hasStravaApp: Bool {return _storage._stravaApp != nil}
  /// Clears the value of `stravaApp`. Subsequent reads from it will return its default value.
  public mutating func clearStravaApp() {_uniqueStorage()._stravaApp = nil}

  ///运动处方
  public var sportPrescription: function_table {
    get {return _storage._sportPrescription ?? function_table()}
    set {_uniqueStorage()._sportPrescription = newValue}
  }
  /// Returns true if `sportPrescription` has been explicitly set.
  public var hasSportPrescription: Bool {return _storage._sportPrescription != nil}
  /// Clears the value of `sportPrescription`. Subsequent reads from it will return its default value.
  public mutating func clearSportPrescription() {_uniqueStorage()._sportPrescription = nil}

  ///运动识别
  public var sportRecognition: function_table {
    get {return _storage._sportRecognition ?? function_table()}
    set {_uniqueStorage()._sportRecognition = newValue}
  }
  /// Returns true if `sportRecognition` has been explicitly set.
  public var hasSportRecognition: Bool {return _storage._sportRecognition != nil}
  /// Clears the value of `sportRecognition`. Subsequent reads from it will return its default value.
  public mutating func clearSportRecognition() {_uniqueStorage()._sportRecognition = nil}

  ///快捷回复
  public var msgReply: function_table {
    get {return _storage._msgReply ?? function_table()}
    set {_uniqueStorage()._msgReply = newValue}
  }
  /// Returns true if `msgReply` has been explicitly set.
  public var hasMsgReply: Bool {return _storage._msgReply != nil}
  /// Clears the value of `msgReply`. Subsequent reads from it will return its default value.
  public mutating func clearMsgReply() {_uniqueStorage()._msgReply = nil}

  ///消息动态下载(icon + 应用名)
  public var msgAppidDownload: function_table {
    get {return _storage._msgAppidDownload ?? function_table()}
    set {_uniqueStorage()._msgAppidDownload = newValue}
  }
  /// Returns true if `msgAppidDownload` has been explicitly set.
  public var hasMsgAppidDownload: Bool {return _storage._msgAppidDownload != nil}
  /// Clears the value of `msgAppidDownload`. Subsequent reads from it will return its default value.
  public mutating func clearMsgAppidDownload() {_uniqueStorage()._msgAppidDownload = nil}

  ///支付宝
  public var alipay: function_table {
    get {return _storage._alipay ?? function_table()}
    set {_uniqueStorage()._alipay = newValue}
  }
  /// Returns true if `alipay` has been explicitly set.
  public var hasAlipay: Bool {return _storage._alipay != nil}
  /// Clears the value of `alipay`. Subsequent reads from it will return its default value.
  public mutating func clearAlipay() {_uniqueStorage()._alipay = nil}

  ///app功能表
  public var appFunc: function_table {
    get {return _storage._appFunc ?? function_table()}
    set {_uniqueStorage()._appFunc = newValue}
  }
  /// Returns true if `appFunc` has been explicitly set.
  public var hasAppFunc: Bool {return _storage._appFunc != nil}
  /// Clears the value of `appFunc`. Subsequent reads from it will return its default value.
  public mutating func clearAppFunc() {_uniqueStorage()._appFunc = nil}

  ///早安问候
  public var goodMorning: function_table {
    get {return _storage._goodMorning ?? function_table()}
    set {_uniqueStorage()._goodMorning = newValue}
  }
  /// Returns true if `goodMorning` has been explicitly set.
  public var hasGoodMorning: Bool {return _storage._goodMorning != nil}
  /// Clears the value of `goodMorning`. Subsequent reads from it will return its default value.
  public mutating func clearGoodMorning() {_uniqueStorage()._goodMorning = nil}

  ///飞利浦睡眠数据
  public var pspSleep: function_table {
    get {return _storage._pspSleep ?? function_table()}
    set {_uniqueStorage()._pspSleep = newValue}
  }
  /// Returns true if `pspSleep` has been explicitly set.
  public var hasPspSleep: Bool {return _storage._pspSleep != nil}
  /// Clears the value of `pspSleep`. Subsequent reads from it will return its default value.
  public mutating func clearPspSleep() {_uniqueStorage()._pspSleep = nil}

  ///喝水助手
  public var waterAssistant: function_table {
    get {return _storage._waterAssistant ?? function_table()}
    set {_uniqueStorage()._waterAssistant = newValue}
  }
  /// Returns true if `waterAssistant` has been explicitly set.
  public var hasWaterAssistant: Bool {return _storage._waterAssistant != nil}
  /// Clears the value of `waterAssistant`. Subsequent reads from it will return its default value.
  public mutating func clearWaterAssistant() {_uniqueStorage()._waterAssistant = nil}

  ///来电提醒
  public var bleCallComing: function_table {
    get {return _storage._bleCallComing ?? function_table()}
    set {_uniqueStorage()._bleCallComing = newValue}
  }
  /// Returns true if `bleCallComing` has been explicitly set.
  public var hasBleCallComing: Bool {return _storage._bleCallComing != nil}
  /// Clears the value of `bleCallComing`. Subsequent reads from it will return its default value.
  public mutating func clearBleCallComing() {_uniqueStorage()._bleCallComing = nil}

  ///飞利浦睡眠得分数据
  public var pspSleepScore: function_table {
    get {return _storage._pspSleepScore ?? function_table()}
    set {_uniqueStorage()._pspSleepScore = newValue}
  }
  /// Returns true if `pspSleepScore` has been explicitly set.
  public var hasPspSleepScore: Bool {return _storage._pspSleepScore != nil}
  /// Clears the value of `pspSleepScore`. Subsequent reads from it will return its default value.
  public mutating func clearPspSleepScore() {_uniqueStorage()._pspSleepScore = nil}

  ///飞利浦睡眠小睡数据
  public var pspSleepNap: function_table {
    get {return _storage._pspSleepNap ?? function_table()}
    set {_uniqueStorage()._pspSleepNap = newValue}
  }
  /// Returns true if `pspSleepNap` has been explicitly set.
  public var hasPspSleepNap: Bool {return _storage._pspSleepNap != nil}
  /// Clears the value of `pspSleepNap`. Subsequent reads from it will return its default value.
  public mutating func clearPspSleepNap() {_uniqueStorage()._pspSleepNap = nil}

  ///是否不支持血氧功能
  public var spo2Nonsuport: function_table {
    get {return _storage._spo2Nonsuport ?? function_table()}
    set {_uniqueStorage()._spo2Nonsuport = newValue}
  }
  /// Returns true if `spo2Nonsuport` has been explicitly set.
  public var hasSpo2Nonsuport: Bool {return _storage._spo2Nonsuport != nil}
  /// Clears the value of `spo2Nonsuport`. Subsequent reads from it will return its default value.
  public mutating func clearSpo2Nonsuport() {_uniqueStorage()._spo2Nonsuport = nil}

  ///是否不支持电话本功能,默认是支持
  public var phonebookNonsuport: function_table {
    get {return _storage._phonebookNonsuport ?? function_table()}
    set {_uniqueStorage()._phonebookNonsuport = newValue}
  }
  /// Returns true if `phonebookNonsuport` has been explicitly set.
  public var hasPhonebookNonsuport: Bool {return _storage._phonebookNonsuport != nil}
  /// Clears the value of `phonebookNonsuport`. Subsequent reads from it will return its default value.
  public mutating func clearPhonebookNonsuport() {_uniqueStorage()._phonebookNonsuport = nil}

  ///传感器开关 main_id:0x32
  public var watchSensors: function_table {
    get {return _storage._watchSensors ?? function_table()}
    set {_uniqueStorage()._watchSensors = newValue}
  }
  /// Returns true if `watchSensors` has been explicitly set.
  public var hasWatchSensors: Bool {return _storage._watchSensors != nil}
  /// Clears the value of `watchSensors`. Subsequent reads from it will return its default value.
  public mutating func clearWatchSensors() {_uniqueStorage()._watchSensors = nil}

  ///小澈睡眠和飞利浦睡眠合并
  public var pspCreekSleep: function_table {
    get {return _storage._pspCreekSleep ?? function_table()}
    set {_uniqueStorage()._pspCreekSleep = newValue}
  }
  /// Returns true if `pspCreekSleep` has been explicitly set.
  public var hasPspCreekSleep: Bool {return _storage._pspCreekSleep != nil}
  /// Clears the value of `pspCreekSleep`. Subsequent reads from it will return its default value.
  public mutating func clearPspCreekSleep() {_uniqueStorage()._pspCreekSleep = nil}

  ///音乐文件支持 main_id:0x33
  public var musicFile: function_table {
    get {return _storage._musicFile ?? function_table()}
    set {_uniqueStorage()._musicFile = newValue}
  }
  /// Returns true if `musicFile` has been explicitly set.
  public var hasMusicFile: Bool {return _storage._musicFile != nil}
  /// Clears the value of `musicFile`. Subsequent reads from it will return its default value.
  public mutating func clearMusicFile() {_uniqueStorage()._musicFile = nil}

  ///手表方向 main_id:0x35
  public var watchDirection: function_table {
    get {return _storage._watchDirection ?? function_table()}
    set {_uniqueStorage()._watchDirection = newValue}
  }
  /// Returns true if `watchDirection` has been explicitly set.
  public var hasWatchDirection: Bool {return _storage._watchDirection != nil}
  /// Clears the value of `watchDirection`. Subsequent reads from it will return its default value.
  public mutating func clearWatchDirection() {_uniqueStorage()._watchDirection = nil}

  ///spp传输
  public var sppTransfer: function_table {
    get {return _storage._sppTransfer ?? function_table()}
    set {_uniqueStorage()._sppTransfer = newValue}
  }
  /// Returns true if `sppTransfer` has been explicitly set.
  public var hasSppTransfer: Bool {return _storage._sppTransfer != nil}
  /// Clears the value of `sppTransfer`. Subsequent reads from it will return its default value.
  public mutating func clearSppTransfer() {_uniqueStorage()._sppTransfer = nil}

  ///小澈睡眠和小澈算法合并
  public var creekAlgoSleep: function_table {
    get {return _storage._creekAlgoSleep ?? function_table()}
    set {_uniqueStorage()._creekAlgoSleep = newValue}
  }
  /// Returns true if `creekAlgoSleep` has been explicitly set.
  public var hasCreekAlgoSleep: Bool {return _storage._creekAlgoSleep != nil}
  /// Clears the value of `creekAlgoSleep`. Subsequent reads from it will return its default value.
  public mutating func clearCreekAlgoSleep() {_uniqueStorage()._creekAlgoSleep = nil}

  ///早安问候语自定义 main_id:0x2e
  public var goodMorningContent: function_table {
    get {return _storage._goodMorningContent ?? function_table()}
    set {_uniqueStorage()._goodMorningContent = newValue}
  }
  /// Returns true if `goodMorningContent` has been explicitly set.
  public var hasGoodMorningContent: Bool {return _storage._goodMorningContent != nil}
  /// Clears the value of `goodMorningContent`. Subsequent reads from it will return its default value.
  public mutating func clearGoodMorningContent() {_uniqueStorage()._goodMorningContent = nil}

  ///是否不支持闹钟
  public var alarmNonsuport: function_table {
    get {return _storage._alarmNonsuport ?? function_table()}
    set {_uniqueStorage()._alarmNonsuport = newValue}
  }
  /// Returns true if `alarmNonsuport` has been explicitly set.
  public var hasAlarmNonsuport: Bool {return _storage._alarmNonsuport != nil}
  /// Clears the value of `alarmNonsuport`. Subsequent reads from it will return its default value.
  public mutating func clearAlarmNonsuport() {_uniqueStorage()._alarmNonsuport = nil}

  ///是否不支持屏幕
  public var screenBrightnessNonsuport: function_table {
    get {return _storage._screenBrightnessNonsuport ?? function_table()}
    set {_uniqueStorage()._screenBrightnessNonsuport = newValue}
  }
  /// Returns true if `screenBrightnessNonsuport` has been explicitly set.
  public var hasScreenBrightnessNonsuport: Bool {return _storage._screenBrightnessNonsuport != nil}
  /// Clears the value of `screenBrightnessNonsuport`. Subsequent reads from it will return its default value.
  public mutating func clearScreenBrightnessNonsuport() {_uniqueStorage()._screenBrightnessNonsuport = nil}

  ///是否不支持音乐控制
  public var musicControlNonsuport: function_table {
    get {return _storage._musicControlNonsuport ?? function_table()}
    set {_uniqueStorage()._musicControlNonsuport = newValue}
  }
  /// Returns true if `musicControlNonsuport` has been explicitly set.
  public var hasMusicControlNonsuport: Bool {return _storage._musicControlNonsuport != nil}
  /// Clears the value of `musicControlNonsuport`. Subsequent reads from it will return its default value.
  public mutating func clearMusicControlNonsuport() {_uniqueStorage()._musicControlNonsuport = nil}

  ///是否不支持表盘
  public var dialPlateNonsuport: function_table {
    get {return _storage._dialPlateNonsuport ?? function_table()}
    set {_uniqueStorage()._dialPlateNonsuport = newValue}
  }
  /// Returns true if `dialPlateNonsuport` has been explicitly set.
  public var hasDialPlateNonsuport: Bool {return _storage._dialPlateNonsuport != nil}
  /// Clears the value of `dialPlateNonsuport`. Subsequent reads from it will return its default value.
  public mutating func clearDialPlateNonsuport() {_uniqueStorage()._dialPlateNonsuport = nil}

  ///日程 main_id:0x37
  public var calendar: function_table {
    get {return _storage._calendar ?? function_table()}
    set {_uniqueStorage()._calendar = newValue}
  }
  /// Returns true if `calendar` has been explicitly set.
  public var hasCalendar: Bool {return _storage._calendar != nil}
  /// Clears the value of `calendar`. Subsequent reads from it will return its default value.
  public mutating func clearCalendar() {_uniqueStorage()._calendar = nil}

  ///健康快照 main_id:0x38
  public var healthSnap: function_table {
    get {return _storage._healthSnap ?? function_table()}
    set {_uniqueStorage()._healthSnap = newValue}
  }
  /// Returns true if `healthSnap` has been explicitly set.
  public var hasHealthSnap: Bool {return _storage._healthSnap != nil}
  /// Clears the value of `healthSnap`. Subsequent reads from it will return its default value.
  public mutating func clearHealthSnap() {_uniqueStorage()._healthSnap = nil}

  ///手势 main_id:0x3b
  public var gesture: function_table {
    get {return _storage._gesture ?? function_table()}
    set {_uniqueStorage()._gesture = newValue}
  }
  /// Returns true if `gesture` has been explicitly set.
  public var hasGesture: Bool {return _storage._gesture != nil}
  /// Clears the value of `gesture`. Subsequent reads from it will return its default value.
  public mutating func clearGesture() {_uniqueStorage()._gesture = nil}

  ///戒指点击测量 main_id:0x36
  public var ringClickMeasure: function_table {
    get {return _storage._ringClickMeasure ?? function_table()}
    set {_uniqueStorage()._ringClickMeasure = newValue}
  }
  /// Returns true if `ringClickMeasure` has been explicitly set.
  public var hasRingClickMeasure: Bool {return _storage._ringClickMeasure != nil}
  /// Clears the value of `ringClickMeasure`. Subsequent reads from it will return its default value.
  public mutating func clearRingClickMeasure() {_uniqueStorage()._ringClickMeasure = nil}

  ///app支持发起运动
  public var appStartSport: function_table {
    get {return _storage._appStartSport ?? function_table()}
    set {_uniqueStorage()._appStartSport = newValue}
  }
  /// Returns true if `appStartSport` has been explicitly set.
  public var hasAppStartSport: Bool {return _storage._appStartSport != nil}
  /// Clears the value of `appStartSport`. Subsequent reads from it will return its default value.
  public mutating func clearAppStartSport() {_uniqueStorage()._appStartSport = nil}

  ///app支持geobin轨迹数据
  public var geobin: function_table {
    get {return _storage._geobin ?? function_table()}
    set {_uniqueStorage()._geobin = newValue}
  }
  /// Returns true if `geobin` has been explicitly set.
  public var hasGeobin: Bool {return _storage._geobin != nil}
  /// Clears the value of `geobin`. Subsequent reads from it will return its default value.
  public mutating func clearGeobin() {_uniqueStorage()._geobin = nil}

  ///运动课程
  public var workoutCourse: function_table {
    get {return _storage._workoutCourse ?? function_table()}
    set {_uniqueStorage()._workoutCourse = newValue}
  }
  /// Returns true if `workoutCourse` has been explicitly set.
  public var hasWorkoutCourse: Bool {return _storage._workoutCourse != nil}
  /// Clears the value of `workoutCourse`. Subsequent reads from it will return its default value.
  public mutating func clearWorkoutCourse() {_uniqueStorage()._workoutCourse = nil}

  ///用户头像下载
  public var userIcon: function_table {
    get {return _storage._userIcon ?? function_table()}
    set {_uniqueStorage()._userIcon = newValue}
  }
  /// Returns true if `userIcon` has been explicitly set.
  public var hasUserIcon: Bool {return _storage._userIcon != nil}
  /// Clears the value of `userIcon`. Subsequent reads from it will return its default value.
  public mutating func clearUserIcon() {_uniqueStorage()._userIcon = nil}

  ///体温
  public var bodyTemperature: function_table {
    get {return _storage._bodyTemperature ?? function_table()}
    set {_uniqueStorage()._bodyTemperature = newValue}
  }
  /// Returns true if `bodyTemperature` has been explicitly set.
  public var hasBodyTemperature: Bool {return _storage._bodyTemperature != nil}
  /// Clears the value of `bodyTemperature`. Subsequent reads from it will return its default value.
  public mutating func clearBodyTemperature() {_uniqueStorage()._bodyTemperature = nil}

  ///提醒开关功能表 main_id:0x36 sub_id:0x04
  public var remindSwitch: function_table {
    get {return _storage._remindSwitch ?? function_table()}
    set {_uniqueStorage()._remindSwitch = newValue}
  }
  /// Returns true if `remindSwitch` has been explicitly set.
  public var hasRemindSwitch: Bool {return _storage._remindSwitch != nil}
  /// Clears the value of `remindSwitch`. Subsequent reads from it will return its default value.
  public mutating func clearRemindSwitch() {_uniqueStorage()._remindSwitch = nil}

  ///是否支持充电仓
  public var battCaseInfo: function_table {
    get {return _storage._battCaseInfo ?? function_table()}
    set {_uniqueStorage()._battCaseInfo = newValue}
  }
  /// Returns true if `battCaseInfo` has been explicitly set.
  public var hasBattCaseInfo: Bool {return _storage._battCaseInfo != nil}
  /// Clears the value of `battCaseInfo`. Subsequent reads from it will return its default value.
  public mutating func clearBattCaseInfo() {_uniqueStorage()._battCaseInfo = nil}

  ///是否支持ble hid配对
  public var bleHidPair: function_table {
    get {return _storage._bleHidPair ?? function_table()}
    set {_uniqueStorage()._bleHidPair = newValue}
  }
  /// Returns true if `bleHidPair` has been explicitly set.
  public var hasBleHidPair: Bool {return _storage._bleHidPair != nil}
  /// Clears the value of `bleHidPair`. Subsequent reads from it will return its default value.
  public mutating func clearBleHidPair() {_uniqueStorage()._bleHidPair = nil}

  ///是否支持路线地图
  public var mapRoute: function_table {
    get {return _storage._mapRoute ?? function_table()}
    set {_uniqueStorage()._mapRoute = newValue}
  }
  /// Returns true if `mapRoute` has been explicitly set.
  public var hasMapRoute: Bool {return _storage._mapRoute != nil}
  /// Clears the value of `mapRoute`. Subsequent reads from it will return its default value.
  public mutating func clearMapRoute() {_uniqueStorage()._mapRoute = nil}

  ///是否支持离线地图
  public var mapOfline: function_table {
    get {return _storage._mapOfline ?? function_table()}
    set {_uniqueStorage()._mapOfline = newValue}
  }
  /// Returns true if `mapOfline` has been explicitly set.
  public var hasMapOfline: Bool {return _storage._mapOfline != nil}
  /// Clears the value of `mapOfline`. Subsequent reads from it will return its default value.
  public mutating func clearMapOfline() {_uniqueStorage()._mapOfline = nil}

  ///是否支持超级通知
  public var superMsg: function_table {
    get {return _storage._superMsg ?? function_table()}
    set {_uniqueStorage()._superMsg = newValue}
  }
  /// Returns true if `superMsg` has been explicitly set.
  public var hasSuperMsg: Bool {return _storage._superMsg != nil}
  /// Clears the value of `superMsg`. Subsequent reads from it will return its default value.
  public mutating func clearSuperMsg() {_uniqueStorage()._superMsg = nil}

  ///是否支持血压数据 main_id:0x3d
  public var bloodPressure: function_table {
    get {return _storage._bloodPressure ?? function_table()}
    set {_uniqueStorage()._bloodPressure = newValue}
  }
  /// Returns true if `bloodPressure` has been explicitly set.
  public var hasBloodPressure: Bool {return _storage._bloodPressure != nil}
  /// Clears the value of `bloodPressure`. Subsequent reads from it will return its default value.
  public mutating func clearBloodPressure() {_uniqueStorage()._bloodPressure = nil}

  ///是否支持吃药提醒 main_id:0x3e
  public var medicineRemind: function_table {
    get {return _storage._medicineRemind ?? function_table()}
    set {_uniqueStorage()._medicineRemind = newValue}
  }
  /// Returns true if `medicineRemind` has been explicitly set.
  public var hasMedicineRemind: Bool {return _storage._medicineRemind != nil}
  /// Clears the value of `medicineRemind`. Subsequent reads from it will return its default value.
  public mutating func clearMedicineRemind() {_uniqueStorage()._medicineRemind = nil}

  ///是否支持有氧适能 main_id:0x39
  public var cardioFitness: function_table {
    get {return _storage._cardioFitness ?? function_table()}
    set {_uniqueStorage()._cardioFitness = newValue}
  }
  /// Returns true if `cardioFitness` has been explicitly set.
  public var hasCardioFitness: Bool {return _storage._cardioFitness != nil}
  /// Clears the value of `cardioFitness`. Subsequent reads from it will return its default value.
  public mutating func clearCardioFitness() {_uniqueStorage()._cardioFitness = nil}

  ///是否支持训练负荷 main_id:0x3f
  public var trainingLoad: function_table {
    get {return _storage._trainingLoad ?? function_table()}
    set {_uniqueStorage()._trainingLoad = newValue}
  }
  /// Returns true if `trainingLoad` has been explicitly set.
  public var hasTrainingLoad: Bool {return _storage._trainingLoad != nil}
  /// Clears the value of `trainingLoad`. Subsequent reads from it will return its default value.
  public mutating func clearTrainingLoad() {_uniqueStorage()._trainingLoad = nil}

  ///是否支持音量调节 main_id:0x40
  public var volumeAdjust: function_table {
    get {return _storage._volumeAdjust ?? function_table()}
    set {_uniqueStorage()._volumeAdjust = newValue}
  }
  /// Returns true if `volumeAdjust` has been explicitly set.
  public var hasVolumeAdjust: Bool {return _storage._volumeAdjust != nil}
  /// Clears the value of `volumeAdjust`. Subsequent reads from it will return its default value.
  public mutating func clearVolumeAdjust() {_uniqueStorage()._volumeAdjust = nil}

  ///是否支持动作指导
  public var actionGuide: function_table {
    get {return _storage._actionGuide ?? function_table()}
    set {_uniqueStorage()._actionGuide = newValue}
  }
  /// Returns true if `actionGuide` has been explicitly set.
  public var hasActionGuide: Bool {return _storage._actionGuide != nil}
  /// Clears the value of `actionGuide`. Subsequent reads from it will return its default value.
  public mutating func clearActionGuide() {_uniqueStorage()._actionGuide = nil}

  ///是否支持训练准备度
  public var trainingReadiness: function_table {
    get {return _storage._trainingReadiness ?? function_table()}
    set {_uniqueStorage()._trainingReadiness = newValue}
  }
  /// Returns true if `trainingReadiness` has been explicitly set.
  public var hasTrainingReadiness: Bool {return _storage._trainingReadiness != nil}
  /// Clears the value of `trainingReadiness`. Subsequent reads from it will return its default value.
  public mutating func clearTrainingReadiness() {_uniqueStorage()._trainingReadiness = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension function_table: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "function_table"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_support"),
    2: .standard(proto: "cmd_id"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isSupport) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.cmdID) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isSupport != false {
      try visitor.visitSingularBoolField(value: self.isSupport, fieldNumber: 1)
    }
    if self.cmdID != 0 {
      try visitor.visitSingularUInt32Field(value: self.cmdID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: function_table, rhs: function_table) -> Bool {
    if lhs.isSupport != rhs.isSupport {return false}
    if lhs.cmdID != rhs.cmdID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_function_table: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_function_table"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "disturb"),
    2: .standard(proto: "water_remind"),
    3: .standard(proto: "standing_remind"),
    4: .standard(proto: "female_health"),
    5: .same(proto: "weather"),
    6: .standard(proto: "message_data"),
    7: .standard(proto: "bt_call"),
    8: .standard(proto: "ble_call"),
    9: .standard(proto: "schedule_remind"),
    10: .standard(proto: "voice_assistant"),
    11: .standard(proto: "quick_card"),
    12: .standard(proto: "world_time"),
    13: .standard(proto: "frequent_contacts"),
    14: .same(proto: "gps"),
    15: .standard(proto: "online_gnss"),
    16: .standard(proto: "offline_gnss"),
    17: .standard(proto: "emergency_contacts"),
    18: .same(proto: "hrv"),
    19: .standard(proto: "button_crown"),
    20: .standard(proto: "focus_mode"),
    21: .standard(proto: "find_watch"),
    22: .same(proto: "alexa"),
    23: .standard(proto: "app_list"),
    24: .standard(proto: "event_tracking"),
    25: .standard(proto: "strava_app"),
    26: .standard(proto: "sport_prescription"),
    27: .standard(proto: "sport_recognition"),
    28: .standard(proto: "msg_reply"),
    29: .standard(proto: "msg_appid_download"),
    30: .same(proto: "alipay"),
    31: .standard(proto: "app_func"),
    32: .standard(proto: "good_morning"),
    33: .standard(proto: "psp_sleep"),
    34: .standard(proto: "water_assistant"),
    35: .standard(proto: "ble_call_coming"),
    36: .standard(proto: "psp_sleep_score"),
    37: .standard(proto: "psp_sleep_nap"),
    38: .standard(proto: "spo2_nonsuport"),
    39: .standard(proto: "phonebook_nonsuport"),
    40: .standard(proto: "watch_sensors"),
    41: .standard(proto: "psp_creek_sleep"),
    42: .standard(proto: "music_file"),
    43: .standard(proto: "watch_direction"),
    44: .standard(proto: "spp_transfer"),
    45: .standard(proto: "creek_algo_sleep"),
    46: .standard(proto: "good_morning_content"),
    47: .standard(proto: "alarm_nonsuport"),
    48: .standard(proto: "screen_brightness_nonsuport"),
    49: .standard(proto: "music_control_nonsuport"),
    50: .standard(proto: "dial_plate_nonsuport"),
    51: .same(proto: "calendar"),
    52: .standard(proto: "health_snap"),
    53: .same(proto: "gesture"),
    54: .standard(proto: "ring_click_measure"),
    55: .standard(proto: "app_start_sport"),
    56: .same(proto: "geobin"),
    57: .standard(proto: "workout_course"),
    58: .standard(proto: "user_icon"),
    59: .standard(proto: "body_temperature"),
    60: .standard(proto: "remind_switch"),
    61: .standard(proto: "batt_case_info"),
    62: .standard(proto: "ble_hid_pair"),
    63: .standard(proto: "map_route"),
    64: .standard(proto: "map_ofline"),
    65: .standard(proto: "super_msg"),
    66: .standard(proto: "blood_pressure"),
    67: .standard(proto: "medicine_remind"),
    68: .standard(proto: "cardio_fitness"),
    69: .standard(proto: "training_load"),
    70: .standard(proto: "volume_adjust"),
    71: .standard(proto: "action_guide"),
    72: .standard(proto: "training_readiness"),
  ]

  fileprivate class _StorageClass {
    var _disturb: function_table? = nil
    var _waterRemind: function_table? = nil
    var _standingRemind: function_table? = nil
    var _femaleHealth: function_table? = nil
    var _weather: function_table? = nil
    var _messageData: function_table? = nil
    var _btCall: function_table? = nil
    var _bleCall: function_table? = nil
    var _scheduleRemind: function_table? = nil
    var _voiceAssistant: function_table? = nil
    var _quickCard: function_table? = nil
    var _worldTime: function_table? = nil
    var _frequentContacts: function_table? = nil
    var _gps: function_table? = nil
    var _onlineGnss: function_table? = nil
    var _offlineGnss: function_table? = nil
    var _emergencyContacts: function_table? = nil
    var _hrv: function_table? = nil
    var _buttonCrown: function_table? = nil
    var _focusMode: function_table? = nil
    var _findWatch: function_table? = nil
    var _alexa: function_table? = nil
    var _appList: function_table? = nil
    var _eventTracking: function_table? = nil
    var _stravaApp: function_table? = nil
    var _sportPrescription: function_table? = nil
    var _sportRecognition: function_table? = nil
    var _msgReply: function_table? = nil
    var _msgAppidDownload: function_table? = nil
    var _alipay: function_table? = nil
    var _appFunc: function_table? = nil
    var _goodMorning: function_table? = nil
    var _pspSleep: function_table? = nil
    var _waterAssistant: function_table? = nil
    var _bleCallComing: function_table? = nil
    var _pspSleepScore: function_table? = nil
    var _pspSleepNap: function_table? = nil
    var _spo2Nonsuport: function_table? = nil
    var _phonebookNonsuport: function_table? = nil
    var _watchSensors: function_table? = nil
    var _pspCreekSleep: function_table? = nil
    var _musicFile: function_table? = nil
    var _watchDirection: function_table? = nil
    var _sppTransfer: function_table? = nil
    var _creekAlgoSleep: function_table? = nil
    var _goodMorningContent: function_table? = nil
    var _alarmNonsuport: function_table? = nil
    var _screenBrightnessNonsuport: function_table? = nil
    var _musicControlNonsuport: function_table? = nil
    var _dialPlateNonsuport: function_table? = nil
    var _calendar: function_table? = nil
    var _healthSnap: function_table? = nil
    var _gesture: function_table? = nil
    var _ringClickMeasure: function_table? = nil
    var _appStartSport: function_table? = nil
    var _geobin: function_table? = nil
    var _workoutCourse: function_table? = nil
    var _userIcon: function_table? = nil
    var _bodyTemperature: function_table? = nil
    var _remindSwitch: function_table? = nil
    var _battCaseInfo: function_table? = nil
    var _bleHidPair: function_table? = nil
    var _mapRoute: function_table? = nil
    var _mapOfline: function_table? = nil
    var _superMsg: function_table? = nil
    var _bloodPressure: function_table? = nil
    var _medicineRemind: function_table? = nil
    var _cardioFitness: function_table? = nil
    var _trainingLoad: function_table? = nil
    var _volumeAdjust: function_table? = nil
    var _actionGuide: function_table? = nil
    var _trainingReadiness: function_table? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _disturb = source._disturb
      _waterRemind = source._waterRemind
      _standingRemind = source._standingRemind
      _femaleHealth = source._femaleHealth
      _weather = source._weather
      _messageData = source._messageData
      _btCall = source._btCall
      _bleCall = source._bleCall
      _scheduleRemind = source._scheduleRemind
      _voiceAssistant = source._voiceAssistant
      _quickCard = source._quickCard
      _worldTime = source._worldTime
      _frequentContacts = source._frequentContacts
      _gps = source._gps
      _onlineGnss = source._onlineGnss
      _offlineGnss = source._offlineGnss
      _emergencyContacts = source._emergencyContacts
      _hrv = source._hrv
      _buttonCrown = source._buttonCrown
      _focusMode = source._focusMode
      _findWatch = source._findWatch
      _alexa = source._alexa
      _appList = source._appList
      _eventTracking = source._eventTracking
      _stravaApp = source._stravaApp
      _sportPrescription = source._sportPrescription
      _sportRecognition = source._sportRecognition
      _msgReply = source._msgReply
      _msgAppidDownload = source._msgAppidDownload
      _alipay = source._alipay
      _appFunc = source._appFunc
      _goodMorning = source._goodMorning
      _pspSleep = source._pspSleep
      _waterAssistant = source._waterAssistant
      _bleCallComing = source._bleCallComing
      _pspSleepScore = source._pspSleepScore
      _pspSleepNap = source._pspSleepNap
      _spo2Nonsuport = source._spo2Nonsuport
      _phonebookNonsuport = source._phonebookNonsuport
      _watchSensors = source._watchSensors
      _pspCreekSleep = source._pspCreekSleep
      _musicFile = source._musicFile
      _watchDirection = source._watchDirection
      _sppTransfer = source._sppTransfer
      _creekAlgoSleep = source._creekAlgoSleep
      _goodMorningContent = source._goodMorningContent
      _alarmNonsuport = source._alarmNonsuport
      _screenBrightnessNonsuport = source._screenBrightnessNonsuport
      _musicControlNonsuport = source._musicControlNonsuport
      _dialPlateNonsuport = source._dialPlateNonsuport
      _calendar = source._calendar
      _healthSnap = source._healthSnap
      _gesture = source._gesture
      _ringClickMeasure = source._ringClickMeasure
      _appStartSport = source._appStartSport
      _geobin = source._geobin
      _workoutCourse = source._workoutCourse
      _userIcon = source._userIcon
      _bodyTemperature = source._bodyTemperature
      _remindSwitch = source._remindSwitch
      _battCaseInfo = source._battCaseInfo
      _bleHidPair = source._bleHidPair
      _mapRoute = source._mapRoute
      _mapOfline = source._mapOfline
      _superMsg = source._superMsg
      _bloodPressure = source._bloodPressure
      _medicineRemind = source._medicineRemind
      _cardioFitness = source._cardioFitness
      _trainingLoad = source._trainingLoad
      _volumeAdjust = source._volumeAdjust
      _actionGuide = source._actionGuide
      _trainingReadiness = source._trainingReadiness
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._disturb) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._waterRemind) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._standingRemind) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._femaleHealth) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._weather) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._messageData) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._btCall) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._bleCall) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._scheduleRemind) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._voiceAssistant) }()
        case 11: try { try decoder.decodeSingularMessageField(value: &_storage._quickCard) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._worldTime) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._frequentContacts) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._gps) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._onlineGnss) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._offlineGnss) }()
        case 17: try { try decoder.decodeSingularMessageField(value: &_storage._emergencyContacts) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._hrv) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._buttonCrown) }()
        case 20: try { try decoder.decodeSingularMessageField(value: &_storage._focusMode) }()
        case 21: try { try decoder.decodeSingularMessageField(value: &_storage._findWatch) }()
        case 22: try { try decoder.decodeSingularMessageField(value: &_storage._alexa) }()
        case 23: try { try decoder.decodeSingularMessageField(value: &_storage._appList) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._eventTracking) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._stravaApp) }()
        case 26: try { try decoder.decodeSingularMessageField(value: &_storage._sportPrescription) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._sportRecognition) }()
        case 28: try { try decoder.decodeSingularMessageField(value: &_storage._msgReply) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._msgAppidDownload) }()
        case 30: try { try decoder.decodeSingularMessageField(value: &_storage._alipay) }()
        case 31: try { try decoder.decodeSingularMessageField(value: &_storage._appFunc) }()
        case 32: try { try decoder.decodeSingularMessageField(value: &_storage._goodMorning) }()
        case 33: try { try decoder.decodeSingularMessageField(value: &_storage._pspSleep) }()
        case 34: try { try decoder.decodeSingularMessageField(value: &_storage._waterAssistant) }()
        case 35: try { try decoder.decodeSingularMessageField(value: &_storage._bleCallComing) }()
        case 36: try { try decoder.decodeSingularMessageField(value: &_storage._pspSleepScore) }()
        case 37: try { try decoder.decodeSingularMessageField(value: &_storage._pspSleepNap) }()
        case 38: try { try decoder.decodeSingularMessageField(value: &_storage._spo2Nonsuport) }()
        case 39: try { try decoder.decodeSingularMessageField(value: &_storage._phonebookNonsuport) }()
        case 40: try { try decoder.decodeSingularMessageField(value: &_storage._watchSensors) }()
        case 41: try { try decoder.decodeSingularMessageField(value: &_storage._pspCreekSleep) }()
        case 42: try { try decoder.decodeSingularMessageField(value: &_storage._musicFile) }()
        case 43: try { try decoder.decodeSingularMessageField(value: &_storage._watchDirection) }()
        case 44: try { try decoder.decodeSingularMessageField(value: &_storage._sppTransfer) }()
        case 45: try { try decoder.decodeSingularMessageField(value: &_storage._creekAlgoSleep) }()
        case 46: try { try decoder.decodeSingularMessageField(value: &_storage._goodMorningContent) }()
        case 47: try { try decoder.decodeSingularMessageField(value: &_storage._alarmNonsuport) }()
        case 48: try { try decoder.decodeSingularMessageField(value: &_storage._screenBrightnessNonsuport) }()
        case 49: try { try decoder.decodeSingularMessageField(value: &_storage._musicControlNonsuport) }()
        case 50: try { try decoder.decodeSingularMessageField(value: &_storage._dialPlateNonsuport) }()
        case 51: try { try decoder.decodeSingularMessageField(value: &_storage._calendar) }()
        case 52: try { try decoder.decodeSingularMessageField(value: &_storage._healthSnap) }()
        case 53: try { try decoder.decodeSingularMessageField(value: &_storage._gesture) }()
        case 54: try { try decoder.decodeSingularMessageField(value: &_storage._ringClickMeasure) }()
        case 55: try { try decoder.decodeSingularMessageField(value: &_storage._appStartSport) }()
        case 56: try { try decoder.decodeSingularMessageField(value: &_storage._geobin) }()
        case 57: try { try decoder.decodeSingularMessageField(value: &_storage._workoutCourse) }()
        case 58: try { try decoder.decodeSingularMessageField(value: &_storage._userIcon) }()
        case 59: try { try decoder.decodeSingularMessageField(value: &_storage._bodyTemperature) }()
        case 60: try { try decoder.decodeSingularMessageField(value: &_storage._remindSwitch) }()
        case 61: try { try decoder.decodeSingularMessageField(value: &_storage._battCaseInfo) }()
        case 62: try { try decoder.decodeSingularMessageField(value: &_storage._bleHidPair) }()
        case 63: try { try decoder.decodeSingularMessageField(value: &_storage._mapRoute) }()
        case 64: try { try decoder.decodeSingularMessageField(value: &_storage._mapOfline) }()
        case 65: try { try decoder.decodeSingularMessageField(value: &_storage._superMsg) }()
        case 66: try { try decoder.decodeSingularMessageField(value: &_storage._bloodPressure) }()
        case 67: try { try decoder.decodeSingularMessageField(value: &_storage._medicineRemind) }()
        case 68: try { try decoder.decodeSingularMessageField(value: &_storage._cardioFitness) }()
        case 69: try { try decoder.decodeSingularMessageField(value: &_storage._trainingLoad) }()
        case 70: try { try decoder.decodeSingularMessageField(value: &_storage._volumeAdjust) }()
        case 71: try { try decoder.decodeSingularMessageField(value: &_storage._actionGuide) }()
        case 72: try { try decoder.decodeSingularMessageField(value: &_storage._trainingReadiness) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._disturb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._waterRemind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._standingRemind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._femaleHealth {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._weather {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._messageData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._btCall {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._bleCall {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._scheduleRemind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._voiceAssistant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._quickCard {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._worldTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._frequentContacts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._gps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._onlineGnss {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._offlineGnss {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._emergencyContacts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._hrv {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._buttonCrown {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._focusMode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._findWatch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._alexa {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._appList {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._eventTracking {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._stravaApp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._sportPrescription {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._sportRecognition {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._msgReply {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._msgAppidDownload {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._alipay {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._appFunc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._goodMorning {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._pspSleep {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._waterAssistant {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._bleCallComing {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._pspSleepScore {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._pspSleepNap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._spo2Nonsuport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._phonebookNonsuport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._watchSensors {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._pspCreekSleep {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._musicFile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 42)
      } }()
      try { if let v = _storage._watchDirection {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 43)
      } }()
      try { if let v = _storage._sppTransfer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      } }()
      try { if let v = _storage._creekAlgoSleep {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 45)
      } }()
      try { if let v = _storage._goodMorningContent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 46)
      } }()
      try { if let v = _storage._alarmNonsuport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      } }()
      try { if let v = _storage._screenBrightnessNonsuport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 48)
      } }()
      try { if let v = _storage._musicControlNonsuport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      } }()
      try { if let v = _storage._dialPlateNonsuport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 50)
      } }()
      try { if let v = _storage._calendar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 51)
      } }()
      try { if let v = _storage._healthSnap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 52)
      } }()
      try { if let v = _storage._gesture {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 53)
      } }()
      try { if let v = _storage._ringClickMeasure {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 54)
      } }()
      try { if let v = _storage._appStartSport {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 55)
      } }()
      try { if let v = _storage._geobin {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 56)
      } }()
      try { if let v = _storage._workoutCourse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 57)
      } }()
      try { if let v = _storage._userIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 58)
      } }()
      try { if let v = _storage._bodyTemperature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 59)
      } }()
      try { if let v = _storage._remindSwitch {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 60)
      } }()
      try { if let v = _storage._battCaseInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 61)
      } }()
      try { if let v = _storage._bleHidPair {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 62)
      } }()
      try { if let v = _storage._mapRoute {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 63)
      } }()
      try { if let v = _storage._mapOfline {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 64)
      } }()
      try { if let v = _storage._superMsg {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 65)
      } }()
      try { if let v = _storage._bloodPressure {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 66)
      } }()
      try { if let v = _storage._medicineRemind {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 67)
      } }()
      try { if let v = _storage._cardioFitness {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 68)
      } }()
      try { if let v = _storage._trainingLoad {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 69)
      } }()
      try { if let v = _storage._volumeAdjust {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 70)
      } }()
      try { if let v = _storage._actionGuide {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 71)
      } }()
      try { if let v = _storage._trainingReadiness {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 72)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_function_table, rhs: protocol_function_table) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._disturb != rhs_storage._disturb {return false}
        if _storage._waterRemind != rhs_storage._waterRemind {return false}
        if _storage._standingRemind != rhs_storage._standingRemind {return false}
        if _storage._femaleHealth != rhs_storage._femaleHealth {return false}
        if _storage._weather != rhs_storage._weather {return false}
        if _storage._messageData != rhs_storage._messageData {return false}
        if _storage._btCall != rhs_storage._btCall {return false}
        if _storage._bleCall != rhs_storage._bleCall {return false}
        if _storage._scheduleRemind != rhs_storage._scheduleRemind {return false}
        if _storage._voiceAssistant != rhs_storage._voiceAssistant {return false}
        if _storage._quickCard != rhs_storage._quickCard {return false}
        if _storage._worldTime != rhs_storage._worldTime {return false}
        if _storage._frequentContacts != rhs_storage._frequentContacts {return false}
        if _storage._gps != rhs_storage._gps {return false}
        if _storage._onlineGnss != rhs_storage._onlineGnss {return false}
        if _storage._offlineGnss != rhs_storage._offlineGnss {return false}
        if _storage._emergencyContacts != rhs_storage._emergencyContacts {return false}
        if _storage._hrv != rhs_storage._hrv {return false}
        if _storage._buttonCrown != rhs_storage._buttonCrown {return false}
        if _storage._focusMode != rhs_storage._focusMode {return false}
        if _storage._findWatch != rhs_storage._findWatch {return false}
        if _storage._alexa != rhs_storage._alexa {return false}
        if _storage._appList != rhs_storage._appList {return false}
        if _storage._eventTracking != rhs_storage._eventTracking {return false}
        if _storage._stravaApp != rhs_storage._stravaApp {return false}
        if _storage._sportPrescription != rhs_storage._sportPrescription {return false}
        if _storage._sportRecognition != rhs_storage._sportRecognition {return false}
        if _storage._msgReply != rhs_storage._msgReply {return false}
        if _storage._msgAppidDownload != rhs_storage._msgAppidDownload {return false}
        if _storage._alipay != rhs_storage._alipay {return false}
        if _storage._appFunc != rhs_storage._appFunc {return false}
        if _storage._goodMorning != rhs_storage._goodMorning {return false}
        if _storage._pspSleep != rhs_storage._pspSleep {return false}
        if _storage._waterAssistant != rhs_storage._waterAssistant {return false}
        if _storage._bleCallComing != rhs_storage._bleCallComing {return false}
        if _storage._pspSleepScore != rhs_storage._pspSleepScore {return false}
        if _storage._pspSleepNap != rhs_storage._pspSleepNap {return false}
        if _storage._spo2Nonsuport != rhs_storage._spo2Nonsuport {return false}
        if _storage._phonebookNonsuport != rhs_storage._phonebookNonsuport {return false}
        if _storage._watchSensors != rhs_storage._watchSensors {return false}
        if _storage._pspCreekSleep != rhs_storage._pspCreekSleep {return false}
        if _storage._musicFile != rhs_storage._musicFile {return false}
        if _storage._watchDirection != rhs_storage._watchDirection {return false}
        if _storage._sppTransfer != rhs_storage._sppTransfer {return false}
        if _storage._creekAlgoSleep != rhs_storage._creekAlgoSleep {return false}
        if _storage._goodMorningContent != rhs_storage._goodMorningContent {return false}
        if _storage._alarmNonsuport != rhs_storage._alarmNonsuport {return false}
        if _storage._screenBrightnessNonsuport != rhs_storage._screenBrightnessNonsuport {return false}
        if _storage._musicControlNonsuport != rhs_storage._musicControlNonsuport {return false}
        if _storage._dialPlateNonsuport != rhs_storage._dialPlateNonsuport {return false}
        if _storage._calendar != rhs_storage._calendar {return false}
        if _storage._healthSnap != rhs_storage._healthSnap {return false}
        if _storage._gesture != rhs_storage._gesture {return false}
        if _storage._ringClickMeasure != rhs_storage._ringClickMeasure {return false}
        if _storage._appStartSport != rhs_storage._appStartSport {return false}
        if _storage._geobin != rhs_storage._geobin {return false}
        if _storage._workoutCourse != rhs_storage._workoutCourse {return false}
        if _storage._userIcon != rhs_storage._userIcon {return false}
        if _storage._bodyTemperature != rhs_storage._bodyTemperature {return false}
        if _storage._remindSwitch != rhs_storage._remindSwitch {return false}
        if _storage._battCaseInfo != rhs_storage._battCaseInfo {return false}
        if _storage._bleHidPair != rhs_storage._bleHidPair {return false}
        if _storage._mapRoute != rhs_storage._mapRoute {return false}
        if _storage._mapOfline != rhs_storage._mapOfline {return false}
        if _storage._superMsg != rhs_storage._superMsg {return false}
        if _storage._bloodPressure != rhs_storage._bloodPressure {return false}
        if _storage._medicineRemind != rhs_storage._medicineRemind {return false}
        if _storage._cardioFitness != rhs_storage._cardioFitness {return false}
        if _storage._trainingLoad != rhs_storage._trainingLoad {return false}
        if _storage._volumeAdjust != rhs_storage._volumeAdjust {return false}
        if _storage._actionGuide != rhs_storage._actionGuide {return false}
        if _storage._trainingReadiness != rhs_storage._trainingReadiness {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
