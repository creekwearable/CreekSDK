// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: standing.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_standing_remind_set: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 走动提醒开关 true 开启,false 关闭
  public var switchFlag: Bool = false

  ///1bytes 通知类型
  public var notifyFlag: notify_type = .allow

  ///提醒开始时间
  public var startHour: UInt32 = 0

  public var startMinute: UInt32 = 0

  ///提醒结束时间
  public var endHour: UInt32 = 0

  public var endMinute: UInt32 = 0

  ///1bytes 重复周期 周一~周日
  public var `repeat`: [Bool] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_standing_remind_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  public var standingRemind: protocol_standing_remind_set {
    get {return _standingRemind ?? protocol_standing_remind_set()}
    set {_standingRemind = newValue}
  }
  /// Returns true if `standingRemind` has been explicitly set.
  public var hasStandingRemind: Bool {return self._standingRemind != nil}
  /// Clears the value of `standingRemind`. Subsequent reads from it will return its default value.
  public mutating func clearStandingRemind() {self._standingRemind = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _standingRemind: protocol_standing_remind_set? = nil
}

public struct protocol_standing_remind_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 功能表
  public var funcTable: UInt32 = 0

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  public var standingRemind: protocol_standing_remind_set {
    get {return _standingRemind ?? protocol_standing_remind_set()}
    set {_standingRemind = newValue}
  }
  /// Returns true if `standingRemind` has been explicitly set.
  public var hasStandingRemind: Bool {return self._standingRemind != nil}
  /// Clears the value of `standingRemind`. Subsequent reads from it will return its default value.
  public mutating func clearStandingRemind() {self._standingRemind = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _standingRemind: protocol_standing_remind_set? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_standing_remind_set: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_standing_remind_set"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "switch_flag"),
    2: .standard(proto: "notify_flag"),
    3: .standard(proto: "start_hour"),
    4: .standard(proto: "start_minute"),
    5: .standard(proto: "end_hour"),
    6: .standard(proto: "end_minute"),
    7: .same(proto: "repeat"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.switchFlag) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.notifyFlag) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.startHour) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.startMinute) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.endHour) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.endMinute) }()
      case 7: try { try decoder.decodeRepeatedBoolField(value: &self.`repeat`) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.switchFlag != false {
      try visitor.visitSingularBoolField(value: self.switchFlag, fieldNumber: 1)
    }
    if self.notifyFlag != .allow {
      try visitor.visitSingularEnumField(value: self.notifyFlag, fieldNumber: 2)
    }
    if self.startHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.startHour, fieldNumber: 3)
    }
    if self.startMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.startMinute, fieldNumber: 4)
    }
    if self.endHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.endHour, fieldNumber: 5)
    }
    if self.endMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.endMinute, fieldNumber: 6)
    }
    if !self.`repeat`.isEmpty {
      try visitor.visitPackedBoolField(value: self.`repeat`, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_standing_remind_set, rhs: protocol_standing_remind_set) -> Bool {
    if lhs.switchFlag != rhs.switchFlag {return false}
    if lhs.notifyFlag != rhs.notifyFlag {return false}
    if lhs.startHour != rhs.startHour {return false}
    if lhs.startMinute != rhs.startMinute {return false}
    if lhs.endHour != rhs.endHour {return false}
    if lhs.endMinute != rhs.endMinute {return false}
    if lhs.`repeat` != rhs.`repeat` {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_standing_remind_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_standing_remind_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "standing_remind"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._standingRemind) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    try { if let v = self._standingRemind {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_standing_remind_operate, rhs: protocol_standing_remind_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs._standingRemind != rhs._standingRemind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_standing_remind_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_standing_remind_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "operate"),
    3: .standard(proto: "standing_remind"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._standingRemind) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 1)
    }
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 2)
    }
    try { if let v = self._standingRemind {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_standing_remind_inquire_reply, rhs: protocol_standing_remind_inquire_reply) -> Bool {
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.operate != rhs.operate {return false}
    if lhs._standingRemind != rhs._standingRemind {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
