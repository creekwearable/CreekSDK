// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: sport.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///Get the sports type supported by the device
public struct protocol_exercise_func_support_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///Function table
  public var funcTable: UInt32 {
    get {return _storage._funcTable}
    set {_uniqueStorage()._funcTable = newValue}
  }

  ///Outdoor running
  public var orun: Bool {
    get {return _storage._orun}
    set {_uniqueStorage()._orun = newValue}
  }

  ///Indoor running
  public var irun: Bool {
    get {return _storage._irun}
    set {_uniqueStorage()._irun = newValue}
  }

  ///walk outdoors
  public var owalk: Bool {
    get {return _storage._owalk}
    set {_uniqueStorage()._owalk = newValue}
  }

  ///Indoor walking
  public var iwalk: Bool {
    get {return _storage._iwalk}
    set {_uniqueStorage()._iwalk = newValue}
  }

  ///hiking
  public var hiking: Bool {
    get {return _storage._hiking}
    set {_uniqueStorage()._hiking = newValue}
  }

  ///outdoor cycling
  public var ocycle: Bool {
    get {return _storage._ocycle}
    set {_uniqueStorage()._ocycle = newValue}
  }

  ///Indoor cycling
  public var icycle: Bool {
    get {return _storage._icycle}
    set {_uniqueStorage()._icycle = newValue}
  }

  ///cricket
  public var cricket: Bool {
    get {return _storage._cricket}
    set {_uniqueStorage()._cricket = newValue}
  }

  ///football
  public var football: Bool {
    get {return _storage._football}
    set {_uniqueStorage()._football = newValue}
  }

  ///Pool swimming
  public var pswim: Bool {
    get {return _storage._pswim}
    set {_uniqueStorage()._pswim = newValue}
  }

  ///Open area swimming
  public var oswim: Bool {
    get {return _storage._oswim}
    set {_uniqueStorage()._oswim = newValue}
  }

  ///yoga
  public var yoga: Bool {
    get {return _storage._yoga}
    set {_uniqueStorage()._yoga = newValue}
  }

  ///Pilates
  public var pilates: Bool {
    get {return _storage._pilates}
    set {_uniqueStorage()._pilates = newValue}
  }

  ///Dance
  public var dance: Bool {
    get {return _storage._dance}
    set {_uniqueStorage()._dance = newValue}
  }

  ///Zumba dance
  public var zumba: Bool {
    get {return _storage._zumba}
    set {_uniqueStorage()._zumba = newValue}
  }

  ///rowing machine
  public var rower: Bool {
    get {return _storage._rower}
    set {_uniqueStorage()._rower = newValue}
  }

  ///elliptical machine
  public var elliptical: Bool {
    get {return _storage._elliptical}
    set {_uniqueStorage()._elliptical = newValue}
  }

  ///Core training
  public var ctraining: Bool {
    get {return _storage._ctraining}
    set {_uniqueStorage()._ctraining = newValue}
  }

  ///Traditional strength training
  public var tstraining: Bool {
    get {return _storage._tstraining}
    set {_uniqueStorage()._tstraining = newValue}
  }

  ///Functional strength training
  public var fstraining: Bool {
    get {return _storage._fstraining}
    set {_uniqueStorage()._fstraining = newValue}
  }

  ///hiit
  public var hiit: Bool {
    get {return _storage._hiit}
    set {_uniqueStorage()._hiit = newValue}
  }

  /// tidy up and relax
  public var cooldown: Bool {
    get {return _storage._cooldown}
    set {_uniqueStorage()._cooldown = newValue}
  }

  ///free training
  public var workout: Bool {
    get {return _storage._workout}
    set {_uniqueStorage()._workout = newValue}
  }

  ///Fitness
  public var fitness: Bool {
    get {return _storage._fitness}
    set {_uniqueStorage()._fitness = newValue}
  }

  ///Trail running
  public var trailRunning: Bool {
    get {return _storage._trailRunning}
    set {_uniqueStorage()._trailRunning = newValue}
  }

  /// fitness
  public var treadmill: Bool {
    get {return _storage._treadmill}
    set {_uniqueStorage()._treadmill = newValue}
  }

  ///aerobics
  public var aerobics: Bool {
    get {return _storage._aerobics}
    set {_uniqueStorage()._aerobics = newValue}
  }

  ///sit ups
  public var sitUp: Bool {
    get {return _storage._sitUp}
    set {_uniqueStorage()._sitUp = newValue}
  }

  ///Plank support
  public var plank: Bool {
    get {return _storage._plank}
    set {_uniqueStorage()._plank = newValue}
  }

  /// jumping jacks
  public var jumpingJack: Bool {
    get {return _storage._jumpingJack}
    set {_uniqueStorage()._jumpingJack = newValue}
  }

  /// pull-ups
  public var chinUp: Bool {
    get {return _storage._chinUp}
    set {_uniqueStorage()._chinUp = newValue}
  }

  ///Push-ups
  public var pushUp: Bool {
    get {return _storage._pushUp}
    set {_uniqueStorage()._pushUp = newValue}
  }

  ///Squat
  public var deepSquat: Bool {
    get {return _storage._deepSquat}
    set {_uniqueStorage()._deepSquat = newValue}
  }

  ///High leg lift
  public var highKneeLift: Bool {
    get {return _storage._highKneeLift}
    set {_uniqueStorage()._highKneeLift = newValue}
  }

  ///dumbbell
  public var dumbbell: Bool {
    get {return _storage._dumbbell}
    set {_uniqueStorage()._dumbbell = newValue}
  }

  ///barbell
  public var barbell: Bool {
    get {return _storage._barbell}
    set {_uniqueStorage()._barbell = newValue}
  }

  ///boxing
  public var boxing: Bool {
    get {return _storage._boxing}
    set {_uniqueStorage()._boxing = newValue}
  }

  ///free fighting
  public var kickboxing: Bool {
    get {return _storage._kickboxing}
    set {_uniqueStorage()._kickboxing = newValue}
  }

  ///horizontal bar
  public var horizontalBar: Bool {
    get {return _storage._horizontalBar}
    set {_uniqueStorage()._horizontalBar = newValue}
  }

  ///parallel bars
  public var parallelBars: Bool {
    get {return _storage._parallelBars}
    set {_uniqueStorage()._parallelBars = newValue}
  }

  ///Walking machine
  public var walkingMachine: Bool {
    get {return _storage._walkingMachine}
    set {_uniqueStorage()._walkingMachine = newValue}
  }

  ///climbing machine
  public var summitTrainers: Bool {
    get {return _storage._summitTrainers}
    set {_uniqueStorage()._summitTrainers = newValue}
  }

  ///Balls
  public var bowling: Bool {
    get {return _storage._bowling}
    set {_uniqueStorage()._bowling = newValue}
  }

  ///tennis
  public var tennis: Bool {
    get {return _storage._tennis}
    set {_uniqueStorage()._tennis = newValue}
  }

  ///Table tennis
  public var tableTennis: Bool {
    get {return _storage._tableTennis}
    set {_uniqueStorage()._tableTennis = newValue}
  }

  ///golf ball
  public var golf: Bool {
    get {return _storage._golf}
    set {_uniqueStorage()._golf = newValue}
  }

  ///basketball
  public var basketball: Bool {
    get {return _storage._basketball}
    set {_uniqueStorage()._basketball = newValue}
  }

  /// badminton
  public var badminton: Bool {
    get {return _storage._badminton}
    set {_uniqueStorage()._badminton = newValue}
  }

  ///hockey
  public var hockey: Bool {
    get {return _storage._hockey}
    set {_uniqueStorage()._hockey = newValue}
  }

  ///rugby
  public var rugby: Bool {
    get {return _storage._rugby}
    set {_uniqueStorage()._rugby = newValue}
  }

  ///Handball
  public var handball: Bool {
    get {return _storage._handball}
    set {_uniqueStorage()._handball = newValue}
  }

  ///squash
  public var squash: Bool {
    get {return _storage._squash}
    set {_uniqueStorage()._squash = newValue}
  }

  ///baseball
  public var baseball: Bool {
    get {return _storage._baseball}
    set {_uniqueStorage()._baseball = newValue}
  }

  ///softball
  public var softball: Bool {
    get {return _storage._softball}
    set {_uniqueStorage()._softball = newValue}
  }

  ///Shuttlecock
  public var shuttlecock: Bool {
    get {return _storage._shuttlecock}
    set {_uniqueStorage()._shuttlecock = newValue}
  }

  ///Takraw ball
  public var sepaktakraw: Bool {
    get {return _storage._sepaktakraw}
    set {_uniqueStorage()._sepaktakraw = newValue}
  }

  ///Leisure sport
  public var streetDance: Bool {
    get {return _storage._streetDance}
    set {_uniqueStorage()._streetDance = newValue}
  }

  ///Mountain climbing
  public var mountainClinbing: Bool {
    get {return _storage._mountainClinbing}
    set {_uniqueStorage()._mountainClinbing = newValue}
  }

  ///skipping rope
  public var ropeSkipping: Bool {
    get {return _storage._ropeSkipping}
    set {_uniqueStorage()._ropeSkipping = newValue}
  }

  ///Climb stairs
  public var climbStairs: Bool {
    get {return _storage._climbStairs}
    set {_uniqueStorage()._climbStairs = newValue}
  }

  /// ballet
  public var ballet: Bool {
    get {return _storage._ballet}
    set {_uniqueStorage()._ballet = newValue}
  }

  ///Social dance
  public var socialDance: Bool {
    get {return _storage._socialDance}
    set {_uniqueStorage()._socialDance = newValue}
  }

  ///darts
  public var darts: Bool {
    get {return _storage._darts}
    set {_uniqueStorage()._darts = newValue}
  }

  ///horseback riding
  public var horsebackRiding: Bool {
    get {return _storage._horsebackRiding}
    set {_uniqueStorage()._horsebackRiding = newValue}
  }

  ///Roller skating
  public var rollerSkating: Bool {
    get {return _storage._rollerSkating}
    set {_uniqueStorage()._rollerSkating = newValue}
  }

  ///Tai Chi
  public var taiChi: Bool {
    get {return _storage._taiChi}
    set {_uniqueStorage()._taiChi = newValue}
  }

  ///frisbee
  public var frisbee: Bool {
    get {return _storage._frisbee}
    set {_uniqueStorage()._frisbee = newValue}
  }

  ///hula hoop
  public var hulaHoop: Bool {
    get {return _storage._hulaHoop}
    set {_uniqueStorage()._hulaHoop = newValue}
  }

  ///ice and snow sports
  public var sleigh: Bool {
    get {return _storage._sleigh}
    set {_uniqueStorage()._sleigh = newValue}
  }

  ///skating
  public var skating: Bool {
    get {return _storage._skating}
    set {_uniqueStorage()._skating = newValue}
  }

  ///Snowmobile
  public var bobsleighAndTobogganing: Bool {
    get {return _storage._bobsleighAndTobogganing}
    set {_uniqueStorage()._bobsleighAndTobogganing = newValue}
  }

  ///curling
  public var curling: Bool {
    get {return _storage._curling}
    set {_uniqueStorage()._curling = newValue}
  }

  ///ice hockey
  public var iceHockey: Bool {
    get {return _storage._iceHockey}
    set {_uniqueStorage()._iceHockey = newValue}
  }

  ///water sports
  public var surfing: Bool {
    get {return _storage._surfing}
    set {_uniqueStorage()._surfing = newValue}
  }

  ///Sailboat
  public var sailboat: Bool {
    get {return _storage._sailboat}
    set {_uniqueStorage()._sailboat = newValue}
  }

  ///Sailboard
  public var sailboard: Bool {
    get {return _storage._sailboard}
    set {_uniqueStorage()._sailboard = newValue}
  }

  ///kayak
  public var foldboating: Bool {
    get {return _storage._foldboating}
    set {_uniqueStorage()._foldboating = newValue}
  }

  /// rowing boat
  public var canoeing: Bool {
    get {return _storage._canoeing}
    set {_uniqueStorage()._canoeing = newValue}
  }

  ///boat racing
  public var boatRace: Bool {
    get {return _storage._boatRace}
    set {_uniqueStorage()._boatRace = newValue}
  }

  ///motorboat
  public var motorboat: Bool {
    get {return _storage._motorboat}
    set {_uniqueStorage()._motorboat = newValue}
  }

  ///water polo
  public var waterPolo: Bool {
    get {return _storage._waterPolo}
    set {_uniqueStorage()._waterPolo = newValue}
  }

  ///Extreme sport
  public var slidingPlate: Bool {
    get {return _storage._slidingPlate}
    set {_uniqueStorage()._slidingPlate = newValue}
  }

  ///rock climbing
  public var rockClimbing: Bool {
    get {return _storage._rockClimbing}
    set {_uniqueStorage()._rockClimbing = newValue}
  }

  ///bungee jumping
  public var bungeeJumping: Bool {
    get {return _storage._bungeeJumping}
    set {_uniqueStorage()._bungeeJumping = newValue}
  }

  ///parkour
  public var parkour: Bool {
    get {return _storage._parkour}
    set {_uniqueStorage()._parkour = newValue}
  }

  ///other
  public var other: Bool {
    get {return _storage._other}
    set {_uniqueStorage()._other = newValue}
  }

  ///Add new sports
  public var spinning: Bool {
    get {return _storage._spinning}
    set {_uniqueStorage()._spinning = newValue}
  }

  ///martial arts
  public var martialArts: Bool {
    get {return _storage._martialArts}
    set {_uniqueStorage()._martialArts = newValue}
  }

  ///Taekwondo
  public var taekwondo: Bool {
    get {return _storage._taekwondo}
    set {_uniqueStorage()._taekwondo = newValue}
  }

  ///karate
  public var karate: Bool {
    get {return _storage._karate}
    set {_uniqueStorage()._karate = newValue}
  }

  ///Gymnastics
  public var gymnastics: Bool {
    get {return _storage._gymnastics}
    set {_uniqueStorage()._gymnastics = newValue}
  }

  ///cage tennis
  public var padel: Bool {
    get {return _storage._padel}
    set {_uniqueStorage()._padel = newValue}
  }

  ///pickleball
  public var pickleball: Bool {
    get {return _storage._pickleball}
    set {_uniqueStorage()._pickleball = newValue}
  }

  ///Snowboarding
  public var snowboarding: Bool {
    get {return _storage._snowboarding}
    set {_uniqueStorage()._snowboarding = newValue}
  }

  ///skiing
  public var skiing: Bool {
    get {return _storage._skiing}
    set {_uniqueStorage()._skiing = newValue}
  }

  ///paddling
  public var paddling: Bool {
    get {return _storage._paddling}
    set {_uniqueStorage()._paddling = newValue}
  }

  /// BMX
  public var bmx: Bool {
    get {return _storage._bmx}
    set {_uniqueStorage()._bmx = newValue}
  }

  ///fencing
  public var fencing: Bool {
    get {return _storage._fencing}
    set {_uniqueStorage()._fencing = newValue}
  }

  ///Billiards
  public var billiards: Bool {
    get {return _storage._billiards}
    set {_uniqueStorage()._billiards = newValue}
  }

  ///beach soccer
  public var beachSoccer: Bool {
    get {return _storage._beachSoccer}
    set {_uniqueStorage()._beachSoccer = newValue}
  }

  ///Beach volleyball
  public var beachVolleyball: Bool {
    get {return _storage._beachVolleyball}
    set {_uniqueStorage()._beachVolleyball = newValue}
  }

  ///dodgeball
  public var dodgeball: Bool {
    get {return _storage._dodgeball}
    set {_uniqueStorage()._dodgeball = newValue}
  }

  ///jazz dance
  public var jazz: Bool {
    get {return _storage._jazz}
    set {_uniqueStorage()._jazz = newValue}
  }

  ///Latin dance
  public var latin: Bool {
    get {return _storage._latin}
    set {_uniqueStorage()._latin = newValue}
  }

  ///square dance
  public var squareDance: Bool {
    get {return _storage._squareDance}
    set {_uniqueStorage()._squareDance = newValue}
  }

  ///volleyball
  public var volleyball: Bool {
    get {return _storage._volleyball}
    set {_uniqueStorage()._volleyball = newValue}
  }

  ///fly a kite
  public var kiteFlying: Bool {
    get {return _storage._kiteFlying}
    set {_uniqueStorage()._kiteFlying = newValue}
  }

  ///Fishing
  public var fishing: Bool {
    get {return _storage._fishing}
    set {_uniqueStorage()._fishing = newValue}
  }

  ///Archery
  public var archery: Bool {
    get {return _storage._archery}
    set {_uniqueStorage()._archery = newValue}
  }

  ///shooting
  public var shooting: Bool {
    get {return _storage._shooting}
    set {_uniqueStorage()._shooting = newValue}
  }

  ///Rafting
  public var whiteWaterRafting: Bool {
    get {return _storage._whiteWaterRafting}
    set {_uniqueStorage()._whiteWaterRafting = newValue}
  }

  ///alpine skiing
  public var alpineSkiing: Bool {
    get {return _storage._alpineSkiing}
    set {_uniqueStorage()._alpineSkiing = newValue}
  }

  ///cross-country skiing
  public var crossCountrySkiing: Bool {
    get {return _storage._crossCountrySkiing}
    set {_uniqueStorage()._crossCountrySkiing = newValue}
  }

  ///biathon
  public var biathon: Bool {
    get {return _storage._biathon}
    set {_uniqueStorage()._biathon = newValue}
  }

  ///Dragon boat
  public var dragonBoatRacing: Bool {
    get {return _storage._dragonBoatRacing}
    set {_uniqueStorage()._dragonBoatRacing = newValue}
  }

  ///racing
  public var racing: Bool {
    get {return _storage._racing}
    set {_uniqueStorage()._racing = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///Equipment movement order 
public struct protocol_exercise_sport_mode_sort {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes number of motion sorting
  public var itemsLen: UInt32 = 0

  ///sport list sorting
  public var sportItems: [sport_type] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_exercise_sport_mode_sort_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes minimum display number of firmware motion list
  public var minShowNum: UInt32 = 0

  ///1bytes maximum display number of firmware motion list
  public var maxShowNum: UInt32 = 0

  ///1bytes total number of movements supported by the firmware
  public var allNum: UInt32 = 0

  ///1bytes number of motion sorting
  public var itemsLen: UInt32 = 0

  ///sport list sorting
  public var sportItems: [sport_type] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Child item data in motion
public struct protocol_exercise_sporting_param_sort {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes sport type
  public var sportType: UInt32 = 0

  ///1bytes the number of sub-item data sorting lists in the movement
  public var itemsLen: UInt32 = 0

  ///Sorted list of sub-items data in sports
  public var items: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_exercise_sporting_param_sort_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes sport type
  public var sportType: sport_type = .orun

  ///1bytes the number of sub-item data sorting lists in the movement
  public var itemsLen: UInt32 = 0

  ///Sorted list of sub-items data in sports
  public var items: Data = Data()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///Movement self-identification
public struct protocol_exercise_intelligent_recognition {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes automatic walking recognition switch true on = 1; false off
  public var walkTypeSwitch: Bool = false

  ///1bytes running automatic recognition switch true on = 1; false off
  public var runTypeSwitch: Bool = false

  ///1byte bicycle automatic identification switch true on = 1; false off
  public var bicycleTypeSwitch: Bool = false

  ///1byte rowing machine automatic recognition switch true on = 1; false off
  public var rowingTypeSwitch: Bool = false

  ///1byte swimming automatic recognition switch true on = 1; false off
  public var swimTypeSwitch: Bool = false

  ///1byte sports auto pause switch true on = 1; false off
  public var sportAutoPauseSwitch: Bool = false

  ///1byte sports automatic end switch true on = 1; false off
  public var sportAutoEndSwitch: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_exercise_intelligent_recognition_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes automatic walking recognition switch true on = 1; false off
  public var walkTypeSwitch: Bool = false

  ///1bytes running automatic recognition switch true on = 1; false off
  public var runTypeSwitch: Bool = false

  ///1byte bicycle automatic identification switch true on = 1; false off
  public var bicycleTypeSwitch: Bool = false

  ///1byte rowing machine automatic recognition switch true on = 1; false off
  public var rowingTypeSwitch: Bool = false

  ///1byte swimming automatic recognition switch true on = 1; false off
  public var swimTypeSwitch: Bool = false

  ///1byte sports auto pause switch true on = 1; false off
  public var sportAutoPauseSwitch: Bool = false

  ///1byte sports automatic end switch true on = 1; false off
  public var sportAutoEndSwitch: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///heart rate interval
public struct protocol_exercise_heart_rate_zone {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes heart rate zone 1
  public var zone1: UInt32 = 0

  ///1bytes heart rate zone 2
  public var zone2: UInt32 = 0

  ///1bytes heart rate zone 3
  public var zone3: UInt32 = 0

  ///1bytes heart rate zone 4
  public var zone4: UInt32 = 0

  ///1bytes heart rate zone 5
  public var zone5: UInt32 = 0

  ///1bytes heart rate zone 6
  public var zone6: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_exercise_func_support_reply: @unchecked Sendable {}
extension protocol_exercise_sport_mode_sort: @unchecked Sendable {}
extension protocol_exercise_sport_mode_sort_inquire_reply: @unchecked Sendable {}
extension protocol_exercise_sporting_param_sort: @unchecked Sendable {}
extension protocol_exercise_sporting_param_sort_inquire_reply: @unchecked Sendable {}
extension protocol_exercise_intelligent_recognition: @unchecked Sendable {}
extension protocol_exercise_intelligent_recognition_inquire_reply: @unchecked Sendable {}
extension protocol_exercise_heart_rate_zone: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_exercise_func_support_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_func_support_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "orun"),
    3: .same(proto: "irun"),
    4: .same(proto: "owalk"),
    5: .same(proto: "iwalk"),
    6: .same(proto: "hiking"),
    7: .same(proto: "ocycle"),
    8: .same(proto: "icycle"),
    9: .same(proto: "cricket"),
    10: .same(proto: "football"),
    11: .same(proto: "pswim"),
    12: .same(proto: "oswim"),
    13: .same(proto: "yoga"),
    14: .same(proto: "pilates"),
    15: .same(proto: "dance"),
    16: .same(proto: "zumba"),
    17: .same(proto: "rower"),
    18: .same(proto: "elliptical"),
    19: .same(proto: "ctraining"),
    20: .same(proto: "tstraining"),
    21: .same(proto: "fstraining"),
    22: .same(proto: "hiit"),
    23: .same(proto: "cooldown"),
    24: .same(proto: "workout"),
    25: .same(proto: "fitness"),
    26: .standard(proto: "trail_running"),
    27: .same(proto: "treadmill"),
    28: .same(proto: "aerobics"),
    29: .standard(proto: "sit_up"),
    30: .same(proto: "plank"),
    31: .standard(proto: "jumping_jack"),
    32: .standard(proto: "chin_up"),
    33: .standard(proto: "push_up"),
    34: .standard(proto: "deep_squat"),
    35: .standard(proto: "high_knee_lift"),
    36: .same(proto: "dumbbell"),
    37: .same(proto: "barbell"),
    38: .same(proto: "boxing"),
    39: .same(proto: "kickboxing"),
    40: .standard(proto: "horizontal_bar"),
    41: .standard(proto: "parallel_bars"),
    42: .standard(proto: "walking_machine"),
    43: .standard(proto: "summit_trainers"),
    44: .same(proto: "bowling"),
    45: .same(proto: "tennis"),
    46: .standard(proto: "table_tennis"),
    47: .same(proto: "golf"),
    48: .same(proto: "basketball"),
    49: .same(proto: "badminton"),
    50: .same(proto: "hockey"),
    51: .same(proto: "rugby"),
    52: .same(proto: "handball"),
    53: .same(proto: "squash"),
    54: .same(proto: "baseball"),
    55: .same(proto: "softball"),
    56: .same(proto: "shuttlecock"),
    57: .same(proto: "sepaktakraw"),
    58: .standard(proto: "street_dance"),
    59: .standard(proto: "mountain_clinbing"),
    60: .standard(proto: "rope_skipping"),
    61: .standard(proto: "climb_stairs"),
    62: .same(proto: "ballet"),
    63: .standard(proto: "social_dance"),
    64: .same(proto: "darts"),
    65: .standard(proto: "horseback_riding"),
    66: .standard(proto: "roller_skating"),
    67: .standard(proto: "tai_chi"),
    68: .same(proto: "frisbee"),
    69: .standard(proto: "hula_hoop"),
    70: .same(proto: "sleigh"),
    71: .same(proto: "skating"),
    72: .standard(proto: "bobsleigh_and_tobogganing"),
    73: .same(proto: "curling"),
    74: .standard(proto: "ice_hockey"),
    75: .same(proto: "surfing"),
    76: .same(proto: "sailboat"),
    77: .same(proto: "sailboard"),
    78: .same(proto: "foldboating"),
    79: .same(proto: "canoeing"),
    80: .standard(proto: "boat_race"),
    81: .same(proto: "motorboat"),
    82: .standard(proto: "water_polo"),
    83: .standard(proto: "sliding_plate"),
    84: .standard(proto: "rock_climbing"),
    85: .standard(proto: "bungee_jumping"),
    86: .same(proto: "parkour"),
    87: .same(proto: "other"),
    88: .same(proto: "spinning"),
    89: .standard(proto: "martial_arts"),
    90: .same(proto: "taekwondo"),
    91: .same(proto: "karate"),
    92: .same(proto: "gymnastics"),
    93: .same(proto: "padel"),
    94: .same(proto: "pickleball"),
    95: .same(proto: "snowboarding"),
    96: .same(proto: "skiing"),
    97: .same(proto: "paddling"),
    98: .same(proto: "bmx"),
    99: .same(proto: "fencing"),
    100: .same(proto: "billiards"),
    101: .standard(proto: "beach_soccer"),
    102: .standard(proto: "beach_volleyball"),
    103: .same(proto: "dodgeball"),
    104: .same(proto: "jazz"),
    105: .same(proto: "latin"),
    106: .standard(proto: "square_dance"),
    107: .same(proto: "volleyball"),
    108: .standard(proto: "kite_flying"),
    109: .same(proto: "fishing"),
    110: .same(proto: "archery"),
    111: .same(proto: "shooting"),
    112: .standard(proto: "white_water_rafting"),
    113: .standard(proto: "alpine_skiing"),
    114: .standard(proto: "cross_country_skiing"),
    115: .same(proto: "biathon"),
    116: .standard(proto: "dragon_boat_racing"),
    117: .same(proto: "racing"),
  ]

  fileprivate class _StorageClass {
    var _funcTable: UInt32 = 0
    var _orun: Bool = false
    var _irun: Bool = false
    var _owalk: Bool = false
    var _iwalk: Bool = false
    var _hiking: Bool = false
    var _ocycle: Bool = false
    var _icycle: Bool = false
    var _cricket: Bool = false
    var _football: Bool = false
    var _pswim: Bool = false
    var _oswim: Bool = false
    var _yoga: Bool = false
    var _pilates: Bool = false
    var _dance: Bool = false
    var _zumba: Bool = false
    var _rower: Bool = false
    var _elliptical: Bool = false
    var _ctraining: Bool = false
    var _tstraining: Bool = false
    var _fstraining: Bool = false
    var _hiit: Bool = false
    var _cooldown: Bool = false
    var _workout: Bool = false
    var _fitness: Bool = false
    var _trailRunning: Bool = false
    var _treadmill: Bool = false
    var _aerobics: Bool = false
    var _sitUp: Bool = false
    var _plank: Bool = false
    var _jumpingJack: Bool = false
    var _chinUp: Bool = false
    var _pushUp: Bool = false
    var _deepSquat: Bool = false
    var _highKneeLift: Bool = false
    var _dumbbell: Bool = false
    var _barbell: Bool = false
    var _boxing: Bool = false
    var _kickboxing: Bool = false
    var _horizontalBar: Bool = false
    var _parallelBars: Bool = false
    var _walkingMachine: Bool = false
    var _summitTrainers: Bool = false
    var _bowling: Bool = false
    var _tennis: Bool = false
    var _tableTennis: Bool = false
    var _golf: Bool = false
    var _basketball: Bool = false
    var _badminton: Bool = false
    var _hockey: Bool = false
    var _rugby: Bool = false
    var _handball: Bool = false
    var _squash: Bool = false
    var _baseball: Bool = false
    var _softball: Bool = false
    var _shuttlecock: Bool = false
    var _sepaktakraw: Bool = false
    var _streetDance: Bool = false
    var _mountainClinbing: Bool = false
    var _ropeSkipping: Bool = false
    var _climbStairs: Bool = false
    var _ballet: Bool = false
    var _socialDance: Bool = false
    var _darts: Bool = false
    var _horsebackRiding: Bool = false
    var _rollerSkating: Bool = false
    var _taiChi: Bool = false
    var _frisbee: Bool = false
    var _hulaHoop: Bool = false
    var _sleigh: Bool = false
    var _skating: Bool = false
    var _bobsleighAndTobogganing: Bool = false
    var _curling: Bool = false
    var _iceHockey: Bool = false
    var _surfing: Bool = false
    var _sailboat: Bool = false
    var _sailboard: Bool = false
    var _foldboating: Bool = false
    var _canoeing: Bool = false
    var _boatRace: Bool = false
    var _motorboat: Bool = false
    var _waterPolo: Bool = false
    var _slidingPlate: Bool = false
    var _rockClimbing: Bool = false
    var _bungeeJumping: Bool = false
    var _parkour: Bool = false
    var _other: Bool = false
    var _spinning: Bool = false
    var _martialArts: Bool = false
    var _taekwondo: Bool = false
    var _karate: Bool = false
    var _gymnastics: Bool = false
    var _padel: Bool = false
    var _pickleball: Bool = false
    var _snowboarding: Bool = false
    var _skiing: Bool = false
    var _paddling: Bool = false
    var _bmx: Bool = false
    var _fencing: Bool = false
    var _billiards: Bool = false
    var _beachSoccer: Bool = false
    var _beachVolleyball: Bool = false
    var _dodgeball: Bool = false
    var _jazz: Bool = false
    var _latin: Bool = false
    var _squareDance: Bool = false
    var _volleyball: Bool = false
    var _kiteFlying: Bool = false
    var _fishing: Bool = false
    var _archery: Bool = false
    var _shooting: Bool = false
    var _whiteWaterRafting: Bool = false
    var _alpineSkiing: Bool = false
    var _crossCountrySkiing: Bool = false
    var _biathon: Bool = false
    var _dragonBoatRacing: Bool = false
    var _racing: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _funcTable = source._funcTable
      _orun = source._orun
      _irun = source._irun
      _owalk = source._owalk
      _iwalk = source._iwalk
      _hiking = source._hiking
      _ocycle = source._ocycle
      _icycle = source._icycle
      _cricket = source._cricket
      _football = source._football
      _pswim = source._pswim
      _oswim = source._oswim
      _yoga = source._yoga
      _pilates = source._pilates
      _dance = source._dance
      _zumba = source._zumba
      _rower = source._rower
      _elliptical = source._elliptical
      _ctraining = source._ctraining
      _tstraining = source._tstraining
      _fstraining = source._fstraining
      _hiit = source._hiit
      _cooldown = source._cooldown
      _workout = source._workout
      _fitness = source._fitness
      _trailRunning = source._trailRunning
      _treadmill = source._treadmill
      _aerobics = source._aerobics
      _sitUp = source._sitUp
      _plank = source._plank
      _jumpingJack = source._jumpingJack
      _chinUp = source._chinUp
      _pushUp = source._pushUp
      _deepSquat = source._deepSquat
      _highKneeLift = source._highKneeLift
      _dumbbell = source._dumbbell
      _barbell = source._barbell
      _boxing = source._boxing
      _kickboxing = source._kickboxing
      _horizontalBar = source._horizontalBar
      _parallelBars = source._parallelBars
      _walkingMachine = source._walkingMachine
      _summitTrainers = source._summitTrainers
      _bowling = source._bowling
      _tennis = source._tennis
      _tableTennis = source._tableTennis
      _golf = source._golf
      _basketball = source._basketball
      _badminton = source._badminton
      _hockey = source._hockey
      _rugby = source._rugby
      _handball = source._handball
      _squash = source._squash
      _baseball = source._baseball
      _softball = source._softball
      _shuttlecock = source._shuttlecock
      _sepaktakraw = source._sepaktakraw
      _streetDance = source._streetDance
      _mountainClinbing = source._mountainClinbing
      _ropeSkipping = source._ropeSkipping
      _climbStairs = source._climbStairs
      _ballet = source._ballet
      _socialDance = source._socialDance
      _darts = source._darts
      _horsebackRiding = source._horsebackRiding
      _rollerSkating = source._rollerSkating
      _taiChi = source._taiChi
      _frisbee = source._frisbee
      _hulaHoop = source._hulaHoop
      _sleigh = source._sleigh
      _skating = source._skating
      _bobsleighAndTobogganing = source._bobsleighAndTobogganing
      _curling = source._curling
      _iceHockey = source._iceHockey
      _surfing = source._surfing
      _sailboat = source._sailboat
      _sailboard = source._sailboard
      _foldboating = source._foldboating
      _canoeing = source._canoeing
      _boatRace = source._boatRace
      _motorboat = source._motorboat
      _waterPolo = source._waterPolo
      _slidingPlate = source._slidingPlate
      _rockClimbing = source._rockClimbing
      _bungeeJumping = source._bungeeJumping
      _parkour = source._parkour
      _other = source._other
      _spinning = source._spinning
      _martialArts = source._martialArts
      _taekwondo = source._taekwondo
      _karate = source._karate
      _gymnastics = source._gymnastics
      _padel = source._padel
      _pickleball = source._pickleball
      _snowboarding = source._snowboarding
      _skiing = source._skiing
      _paddling = source._paddling
      _bmx = source._bmx
      _fencing = source._fencing
      _billiards = source._billiards
      _beachSoccer = source._beachSoccer
      _beachVolleyball = source._beachVolleyball
      _dodgeball = source._dodgeball
      _jazz = source._jazz
      _latin = source._latin
      _squareDance = source._squareDance
      _volleyball = source._volleyball
      _kiteFlying = source._kiteFlying
      _fishing = source._fishing
      _archery = source._archery
      _shooting = source._shooting
      _whiteWaterRafting = source._whiteWaterRafting
      _alpineSkiing = source._alpineSkiing
      _crossCountrySkiing = source._crossCountrySkiing
      _biathon = source._biathon
      _dragonBoatRacing = source._dragonBoatRacing
      _racing = source._racing
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._funcTable) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._orun) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._irun) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._owalk) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._iwalk) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._hiking) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._ocycle) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._icycle) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._cricket) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._football) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._pswim) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._oswim) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._yoga) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._pilates) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._dance) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._zumba) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._rower) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._elliptical) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._ctraining) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._tstraining) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._fstraining) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._hiit) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._cooldown) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._workout) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._fitness) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._trailRunning) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._treadmill) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._aerobics) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._sitUp) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._plank) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._jumpingJack) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._chinUp) }()
        case 33: try { try decoder.decodeSingularBoolField(value: &_storage._pushUp) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._deepSquat) }()
        case 35: try { try decoder.decodeSingularBoolField(value: &_storage._highKneeLift) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._dumbbell) }()
        case 37: try { try decoder.decodeSingularBoolField(value: &_storage._barbell) }()
        case 38: try { try decoder.decodeSingularBoolField(value: &_storage._boxing) }()
        case 39: try { try decoder.decodeSingularBoolField(value: &_storage._kickboxing) }()
        case 40: try { try decoder.decodeSingularBoolField(value: &_storage._horizontalBar) }()
        case 41: try { try decoder.decodeSingularBoolField(value: &_storage._parallelBars) }()
        case 42: try { try decoder.decodeSingularBoolField(value: &_storage._walkingMachine) }()
        case 43: try { try decoder.decodeSingularBoolField(value: &_storage._summitTrainers) }()
        case 44: try { try decoder.decodeSingularBoolField(value: &_storage._bowling) }()
        case 45: try { try decoder.decodeSingularBoolField(value: &_storage._tennis) }()
        case 46: try { try decoder.decodeSingularBoolField(value: &_storage._tableTennis) }()
        case 47: try { try decoder.decodeSingularBoolField(value: &_storage._golf) }()
        case 48: try { try decoder.decodeSingularBoolField(value: &_storage._basketball) }()
        case 49: try { try decoder.decodeSingularBoolField(value: &_storage._badminton) }()
        case 50: try { try decoder.decodeSingularBoolField(value: &_storage._hockey) }()
        case 51: try { try decoder.decodeSingularBoolField(value: &_storage._rugby) }()
        case 52: try { try decoder.decodeSingularBoolField(value: &_storage._handball) }()
        case 53: try { try decoder.decodeSingularBoolField(value: &_storage._squash) }()
        case 54: try { try decoder.decodeSingularBoolField(value: &_storage._baseball) }()
        case 55: try { try decoder.decodeSingularBoolField(value: &_storage._softball) }()
        case 56: try { try decoder.decodeSingularBoolField(value: &_storage._shuttlecock) }()
        case 57: try { try decoder.decodeSingularBoolField(value: &_storage._sepaktakraw) }()
        case 58: try { try decoder.decodeSingularBoolField(value: &_storage._streetDance) }()
        case 59: try { try decoder.decodeSingularBoolField(value: &_storage._mountainClinbing) }()
        case 60: try { try decoder.decodeSingularBoolField(value: &_storage._ropeSkipping) }()
        case 61: try { try decoder.decodeSingularBoolField(value: &_storage._climbStairs) }()
        case 62: try { try decoder.decodeSingularBoolField(value: &_storage._ballet) }()
        case 63: try { try decoder.decodeSingularBoolField(value: &_storage._socialDance) }()
        case 64: try { try decoder.decodeSingularBoolField(value: &_storage._darts) }()
        case 65: try { try decoder.decodeSingularBoolField(value: &_storage._horsebackRiding) }()
        case 66: try { try decoder.decodeSingularBoolField(value: &_storage._rollerSkating) }()
        case 67: try { try decoder.decodeSingularBoolField(value: &_storage._taiChi) }()
        case 68: try { try decoder.decodeSingularBoolField(value: &_storage._frisbee) }()
        case 69: try { try decoder.decodeSingularBoolField(value: &_storage._hulaHoop) }()
        case 70: try { try decoder.decodeSingularBoolField(value: &_storage._sleigh) }()
        case 71: try { try decoder.decodeSingularBoolField(value: &_storage._skating) }()
        case 72: try { try decoder.decodeSingularBoolField(value: &_storage._bobsleighAndTobogganing) }()
        case 73: try { try decoder.decodeSingularBoolField(value: &_storage._curling) }()
        case 74: try { try decoder.decodeSingularBoolField(value: &_storage._iceHockey) }()
        case 75: try { try decoder.decodeSingularBoolField(value: &_storage._surfing) }()
        case 76: try { try decoder.decodeSingularBoolField(value: &_storage._sailboat) }()
        case 77: try { try decoder.decodeSingularBoolField(value: &_storage._sailboard) }()
        case 78: try { try decoder.decodeSingularBoolField(value: &_storage._foldboating) }()
        case 79: try { try decoder.decodeSingularBoolField(value: &_storage._canoeing) }()
        case 80: try { try decoder.decodeSingularBoolField(value: &_storage._boatRace) }()
        case 81: try { try decoder.decodeSingularBoolField(value: &_storage._motorboat) }()
        case 82: try { try decoder.decodeSingularBoolField(value: &_storage._waterPolo) }()
        case 83: try { try decoder.decodeSingularBoolField(value: &_storage._slidingPlate) }()
        case 84: try { try decoder.decodeSingularBoolField(value: &_storage._rockClimbing) }()
        case 85: try { try decoder.decodeSingularBoolField(value: &_storage._bungeeJumping) }()
        case 86: try { try decoder.decodeSingularBoolField(value: &_storage._parkour) }()
        case 87: try { try decoder.decodeSingularBoolField(value: &_storage._other) }()
        case 88: try { try decoder.decodeSingularBoolField(value: &_storage._spinning) }()
        case 89: try { try decoder.decodeSingularBoolField(value: &_storage._martialArts) }()
        case 90: try { try decoder.decodeSingularBoolField(value: &_storage._taekwondo) }()
        case 91: try { try decoder.decodeSingularBoolField(value: &_storage._karate) }()
        case 92: try { try decoder.decodeSingularBoolField(value: &_storage._gymnastics) }()
        case 93: try { try decoder.decodeSingularBoolField(value: &_storage._padel) }()
        case 94: try { try decoder.decodeSingularBoolField(value: &_storage._pickleball) }()
        case 95: try { try decoder.decodeSingularBoolField(value: &_storage._snowboarding) }()
        case 96: try { try decoder.decodeSingularBoolField(value: &_storage._skiing) }()
        case 97: try { try decoder.decodeSingularBoolField(value: &_storage._paddling) }()
        case 98: try { try decoder.decodeSingularBoolField(value: &_storage._bmx) }()
        case 99: try { try decoder.decodeSingularBoolField(value: &_storage._fencing) }()
        case 100: try { try decoder.decodeSingularBoolField(value: &_storage._billiards) }()
        case 101: try { try decoder.decodeSingularBoolField(value: &_storage._beachSoccer) }()
        case 102: try { try decoder.decodeSingularBoolField(value: &_storage._beachVolleyball) }()
        case 103: try { try decoder.decodeSingularBoolField(value: &_storage._dodgeball) }()
        case 104: try { try decoder.decodeSingularBoolField(value: &_storage._jazz) }()
        case 105: try { try decoder.decodeSingularBoolField(value: &_storage._latin) }()
        case 106: try { try decoder.decodeSingularBoolField(value: &_storage._squareDance) }()
        case 107: try { try decoder.decodeSingularBoolField(value: &_storage._volleyball) }()
        case 108: try { try decoder.decodeSingularBoolField(value: &_storage._kiteFlying) }()
        case 109: try { try decoder.decodeSingularBoolField(value: &_storage._fishing) }()
        case 110: try { try decoder.decodeSingularBoolField(value: &_storage._archery) }()
        case 111: try { try decoder.decodeSingularBoolField(value: &_storage._shooting) }()
        case 112: try { try decoder.decodeSingularBoolField(value: &_storage._whiteWaterRafting) }()
        case 113: try { try decoder.decodeSingularBoolField(value: &_storage._alpineSkiing) }()
        case 114: try { try decoder.decodeSingularBoolField(value: &_storage._crossCountrySkiing) }()
        case 115: try { try decoder.decodeSingularBoolField(value: &_storage._biathon) }()
        case 116: try { try decoder.decodeSingularBoolField(value: &_storage._dragonBoatRacing) }()
        case 117: try { try decoder.decodeSingularBoolField(value: &_storage._racing) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._funcTable != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._funcTable, fieldNumber: 1)
      }
      if _storage._orun != false {
        try visitor.visitSingularBoolField(value: _storage._orun, fieldNumber: 2)
      }
      if _storage._irun != false {
        try visitor.visitSingularBoolField(value: _storage._irun, fieldNumber: 3)
      }
      if _storage._owalk != false {
        try visitor.visitSingularBoolField(value: _storage._owalk, fieldNumber: 4)
      }
      if _storage._iwalk != false {
        try visitor.visitSingularBoolField(value: _storage._iwalk, fieldNumber: 5)
      }
      if _storage._hiking != false {
        try visitor.visitSingularBoolField(value: _storage._hiking, fieldNumber: 6)
      }
      if _storage._ocycle != false {
        try visitor.visitSingularBoolField(value: _storage._ocycle, fieldNumber: 7)
      }
      if _storage._icycle != false {
        try visitor.visitSingularBoolField(value: _storage._icycle, fieldNumber: 8)
      }
      if _storage._cricket != false {
        try visitor.visitSingularBoolField(value: _storage._cricket, fieldNumber: 9)
      }
      if _storage._football != false {
        try visitor.visitSingularBoolField(value: _storage._football, fieldNumber: 10)
      }
      if _storage._pswim != false {
        try visitor.visitSingularBoolField(value: _storage._pswim, fieldNumber: 11)
      }
      if _storage._oswim != false {
        try visitor.visitSingularBoolField(value: _storage._oswim, fieldNumber: 12)
      }
      if _storage._yoga != false {
        try visitor.visitSingularBoolField(value: _storage._yoga, fieldNumber: 13)
      }
      if _storage._pilates != false {
        try visitor.visitSingularBoolField(value: _storage._pilates, fieldNumber: 14)
      }
      if _storage._dance != false {
        try visitor.visitSingularBoolField(value: _storage._dance, fieldNumber: 15)
      }
      if _storage._zumba != false {
        try visitor.visitSingularBoolField(value: _storage._zumba, fieldNumber: 16)
      }
      if _storage._rower != false {
        try visitor.visitSingularBoolField(value: _storage._rower, fieldNumber: 17)
      }
      if _storage._elliptical != false {
        try visitor.visitSingularBoolField(value: _storage._elliptical, fieldNumber: 18)
      }
      if _storage._ctraining != false {
        try visitor.visitSingularBoolField(value: _storage._ctraining, fieldNumber: 19)
      }
      if _storage._tstraining != false {
        try visitor.visitSingularBoolField(value: _storage._tstraining, fieldNumber: 20)
      }
      if _storage._fstraining != false {
        try visitor.visitSingularBoolField(value: _storage._fstraining, fieldNumber: 21)
      }
      if _storage._hiit != false {
        try visitor.visitSingularBoolField(value: _storage._hiit, fieldNumber: 22)
      }
      if _storage._cooldown != false {
        try visitor.visitSingularBoolField(value: _storage._cooldown, fieldNumber: 23)
      }
      if _storage._workout != false {
        try visitor.visitSingularBoolField(value: _storage._workout, fieldNumber: 24)
      }
      if _storage._fitness != false {
        try visitor.visitSingularBoolField(value: _storage._fitness, fieldNumber: 25)
      }
      if _storage._trailRunning != false {
        try visitor.visitSingularBoolField(value: _storage._trailRunning, fieldNumber: 26)
      }
      if _storage._treadmill != false {
        try visitor.visitSingularBoolField(value: _storage._treadmill, fieldNumber: 27)
      }
      if _storage._aerobics != false {
        try visitor.visitSingularBoolField(value: _storage._aerobics, fieldNumber: 28)
      }
      if _storage._sitUp != false {
        try visitor.visitSingularBoolField(value: _storage._sitUp, fieldNumber: 29)
      }
      if _storage._plank != false {
        try visitor.visitSingularBoolField(value: _storage._plank, fieldNumber: 30)
      }
      if _storage._jumpingJack != false {
        try visitor.visitSingularBoolField(value: _storage._jumpingJack, fieldNumber: 31)
      }
      if _storage._chinUp != false {
        try visitor.visitSingularBoolField(value: _storage._chinUp, fieldNumber: 32)
      }
      if _storage._pushUp != false {
        try visitor.visitSingularBoolField(value: _storage._pushUp, fieldNumber: 33)
      }
      if _storage._deepSquat != false {
        try visitor.visitSingularBoolField(value: _storage._deepSquat, fieldNumber: 34)
      }
      if _storage._highKneeLift != false {
        try visitor.visitSingularBoolField(value: _storage._highKneeLift, fieldNumber: 35)
      }
      if _storage._dumbbell != false {
        try visitor.visitSingularBoolField(value: _storage._dumbbell, fieldNumber: 36)
      }
      if _storage._barbell != false {
        try visitor.visitSingularBoolField(value: _storage._barbell, fieldNumber: 37)
      }
      if _storage._boxing != false {
        try visitor.visitSingularBoolField(value: _storage._boxing, fieldNumber: 38)
      }
      if _storage._kickboxing != false {
        try visitor.visitSingularBoolField(value: _storage._kickboxing, fieldNumber: 39)
      }
      if _storage._horizontalBar != false {
        try visitor.visitSingularBoolField(value: _storage._horizontalBar, fieldNumber: 40)
      }
      if _storage._parallelBars != false {
        try visitor.visitSingularBoolField(value: _storage._parallelBars, fieldNumber: 41)
      }
      if _storage._walkingMachine != false {
        try visitor.visitSingularBoolField(value: _storage._walkingMachine, fieldNumber: 42)
      }
      if _storage._summitTrainers != false {
        try visitor.visitSingularBoolField(value: _storage._summitTrainers, fieldNumber: 43)
      }
      if _storage._bowling != false {
        try visitor.visitSingularBoolField(value: _storage._bowling, fieldNumber: 44)
      }
      if _storage._tennis != false {
        try visitor.visitSingularBoolField(value: _storage._tennis, fieldNumber: 45)
      }
      if _storage._tableTennis != false {
        try visitor.visitSingularBoolField(value: _storage._tableTennis, fieldNumber: 46)
      }
      if _storage._golf != false {
        try visitor.visitSingularBoolField(value: _storage._golf, fieldNumber: 47)
      }
      if _storage._basketball != false {
        try visitor.visitSingularBoolField(value: _storage._basketball, fieldNumber: 48)
      }
      if _storage._badminton != false {
        try visitor.visitSingularBoolField(value: _storage._badminton, fieldNumber: 49)
      }
      if _storage._hockey != false {
        try visitor.visitSingularBoolField(value: _storage._hockey, fieldNumber: 50)
      }
      if _storage._rugby != false {
        try visitor.visitSingularBoolField(value: _storage._rugby, fieldNumber: 51)
      }
      if _storage._handball != false {
        try visitor.visitSingularBoolField(value: _storage._handball, fieldNumber: 52)
      }
      if _storage._squash != false {
        try visitor.visitSingularBoolField(value: _storage._squash, fieldNumber: 53)
      }
      if _storage._baseball != false {
        try visitor.visitSingularBoolField(value: _storage._baseball, fieldNumber: 54)
      }
      if _storage._softball != false {
        try visitor.visitSingularBoolField(value: _storage._softball, fieldNumber: 55)
      }
      if _storage._shuttlecock != false {
        try visitor.visitSingularBoolField(value: _storage._shuttlecock, fieldNumber: 56)
      }
      if _storage._sepaktakraw != false {
        try visitor.visitSingularBoolField(value: _storage._sepaktakraw, fieldNumber: 57)
      }
      if _storage._streetDance != false {
        try visitor.visitSingularBoolField(value: _storage._streetDance, fieldNumber: 58)
      }
      if _storage._mountainClinbing != false {
        try visitor.visitSingularBoolField(value: _storage._mountainClinbing, fieldNumber: 59)
      }
      if _storage._ropeSkipping != false {
        try visitor.visitSingularBoolField(value: _storage._ropeSkipping, fieldNumber: 60)
      }
      if _storage._climbStairs != false {
        try visitor.visitSingularBoolField(value: _storage._climbStairs, fieldNumber: 61)
      }
      if _storage._ballet != false {
        try visitor.visitSingularBoolField(value: _storage._ballet, fieldNumber: 62)
      }
      if _storage._socialDance != false {
        try visitor.visitSingularBoolField(value: _storage._socialDance, fieldNumber: 63)
      }
      if _storage._darts != false {
        try visitor.visitSingularBoolField(value: _storage._darts, fieldNumber: 64)
      }
      if _storage._horsebackRiding != false {
        try visitor.visitSingularBoolField(value: _storage._horsebackRiding, fieldNumber: 65)
      }
      if _storage._rollerSkating != false {
        try visitor.visitSingularBoolField(value: _storage._rollerSkating, fieldNumber: 66)
      }
      if _storage._taiChi != false {
        try visitor.visitSingularBoolField(value: _storage._taiChi, fieldNumber: 67)
      }
      if _storage._frisbee != false {
        try visitor.visitSingularBoolField(value: _storage._frisbee, fieldNumber: 68)
      }
      if _storage._hulaHoop != false {
        try visitor.visitSingularBoolField(value: _storage._hulaHoop, fieldNumber: 69)
      }
      if _storage._sleigh != false {
        try visitor.visitSingularBoolField(value: _storage._sleigh, fieldNumber: 70)
      }
      if _storage._skating != false {
        try visitor.visitSingularBoolField(value: _storage._skating, fieldNumber: 71)
      }
      if _storage._bobsleighAndTobogganing != false {
        try visitor.visitSingularBoolField(value: _storage._bobsleighAndTobogganing, fieldNumber: 72)
      }
      if _storage._curling != false {
        try visitor.visitSingularBoolField(value: _storage._curling, fieldNumber: 73)
      }
      if _storage._iceHockey != false {
        try visitor.visitSingularBoolField(value: _storage._iceHockey, fieldNumber: 74)
      }
      if _storage._surfing != false {
        try visitor.visitSingularBoolField(value: _storage._surfing, fieldNumber: 75)
      }
      if _storage._sailboat != false {
        try visitor.visitSingularBoolField(value: _storage._sailboat, fieldNumber: 76)
      }
      if _storage._sailboard != false {
        try visitor.visitSingularBoolField(value: _storage._sailboard, fieldNumber: 77)
      }
      if _storage._foldboating != false {
        try visitor.visitSingularBoolField(value: _storage._foldboating, fieldNumber: 78)
      }
      if _storage._canoeing != false {
        try visitor.visitSingularBoolField(value: _storage._canoeing, fieldNumber: 79)
      }
      if _storage._boatRace != false {
        try visitor.visitSingularBoolField(value: _storage._boatRace, fieldNumber: 80)
      }
      if _storage._motorboat != false {
        try visitor.visitSingularBoolField(value: _storage._motorboat, fieldNumber: 81)
      }
      if _storage._waterPolo != false {
        try visitor.visitSingularBoolField(value: _storage._waterPolo, fieldNumber: 82)
      }
      if _storage._slidingPlate != false {
        try visitor.visitSingularBoolField(value: _storage._slidingPlate, fieldNumber: 83)
      }
      if _storage._rockClimbing != false {
        try visitor.visitSingularBoolField(value: _storage._rockClimbing, fieldNumber: 84)
      }
      if _storage._bungeeJumping != false {
        try visitor.visitSingularBoolField(value: _storage._bungeeJumping, fieldNumber: 85)
      }
      if _storage._parkour != false {
        try visitor.visitSingularBoolField(value: _storage._parkour, fieldNumber: 86)
      }
      if _storage._other != false {
        try visitor.visitSingularBoolField(value: _storage._other, fieldNumber: 87)
      }
      if _storage._spinning != false {
        try visitor.visitSingularBoolField(value: _storage._spinning, fieldNumber: 88)
      }
      if _storage._martialArts != false {
        try visitor.visitSingularBoolField(value: _storage._martialArts, fieldNumber: 89)
      }
      if _storage._taekwondo != false {
        try visitor.visitSingularBoolField(value: _storage._taekwondo, fieldNumber: 90)
      }
      if _storage._karate != false {
        try visitor.visitSingularBoolField(value: _storage._karate, fieldNumber: 91)
      }
      if _storage._gymnastics != false {
        try visitor.visitSingularBoolField(value: _storage._gymnastics, fieldNumber: 92)
      }
      if _storage._padel != false {
        try visitor.visitSingularBoolField(value: _storage._padel, fieldNumber: 93)
      }
      if _storage._pickleball != false {
        try visitor.visitSingularBoolField(value: _storage._pickleball, fieldNumber: 94)
      }
      if _storage._snowboarding != false {
        try visitor.visitSingularBoolField(value: _storage._snowboarding, fieldNumber: 95)
      }
      if _storage._skiing != false {
        try visitor.visitSingularBoolField(value: _storage._skiing, fieldNumber: 96)
      }
      if _storage._paddling != false {
        try visitor.visitSingularBoolField(value: _storage._paddling, fieldNumber: 97)
      }
      if _storage._bmx != false {
        try visitor.visitSingularBoolField(value: _storage._bmx, fieldNumber: 98)
      }
      if _storage._fencing != false {
        try visitor.visitSingularBoolField(value: _storage._fencing, fieldNumber: 99)
      }
      if _storage._billiards != false {
        try visitor.visitSingularBoolField(value: _storage._billiards, fieldNumber: 100)
      }
      if _storage._beachSoccer != false {
        try visitor.visitSingularBoolField(value: _storage._beachSoccer, fieldNumber: 101)
      }
      if _storage._beachVolleyball != false {
        try visitor.visitSingularBoolField(value: _storage._beachVolleyball, fieldNumber: 102)
      }
      if _storage._dodgeball != false {
        try visitor.visitSingularBoolField(value: _storage._dodgeball, fieldNumber: 103)
      }
      if _storage._jazz != false {
        try visitor.visitSingularBoolField(value: _storage._jazz, fieldNumber: 104)
      }
      if _storage._latin != false {
        try visitor.visitSingularBoolField(value: _storage._latin, fieldNumber: 105)
      }
      if _storage._squareDance != false {
        try visitor.visitSingularBoolField(value: _storage._squareDance, fieldNumber: 106)
      }
      if _storage._volleyball != false {
        try visitor.visitSingularBoolField(value: _storage._volleyball, fieldNumber: 107)
      }
      if _storage._kiteFlying != false {
        try visitor.visitSingularBoolField(value: _storage._kiteFlying, fieldNumber: 108)
      }
      if _storage._fishing != false {
        try visitor.visitSingularBoolField(value: _storage._fishing, fieldNumber: 109)
      }
      if _storage._archery != false {
        try visitor.visitSingularBoolField(value: _storage._archery, fieldNumber: 110)
      }
      if _storage._shooting != false {
        try visitor.visitSingularBoolField(value: _storage._shooting, fieldNumber: 111)
      }
      if _storage._whiteWaterRafting != false {
        try visitor.visitSingularBoolField(value: _storage._whiteWaterRafting, fieldNumber: 112)
      }
      if _storage._alpineSkiing != false {
        try visitor.visitSingularBoolField(value: _storage._alpineSkiing, fieldNumber: 113)
      }
      if _storage._crossCountrySkiing != false {
        try visitor.visitSingularBoolField(value: _storage._crossCountrySkiing, fieldNumber: 114)
      }
      if _storage._biathon != false {
        try visitor.visitSingularBoolField(value: _storage._biathon, fieldNumber: 115)
      }
      if _storage._dragonBoatRacing != false {
        try visitor.visitSingularBoolField(value: _storage._dragonBoatRacing, fieldNumber: 116)
      }
      if _storage._racing != false {
        try visitor.visitSingularBoolField(value: _storage._racing, fieldNumber: 117)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_func_support_reply, rhs: protocol_exercise_func_support_reply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._funcTable != rhs_storage._funcTable {return false}
        if _storage._orun != rhs_storage._orun {return false}
        if _storage._irun != rhs_storage._irun {return false}
        if _storage._owalk != rhs_storage._owalk {return false}
        if _storage._iwalk != rhs_storage._iwalk {return false}
        if _storage._hiking != rhs_storage._hiking {return false}
        if _storage._ocycle != rhs_storage._ocycle {return false}
        if _storage._icycle != rhs_storage._icycle {return false}
        if _storage._cricket != rhs_storage._cricket {return false}
        if _storage._football != rhs_storage._football {return false}
        if _storage._pswim != rhs_storage._pswim {return false}
        if _storage._oswim != rhs_storage._oswim {return false}
        if _storage._yoga != rhs_storage._yoga {return false}
        if _storage._pilates != rhs_storage._pilates {return false}
        if _storage._dance != rhs_storage._dance {return false}
        if _storage._zumba != rhs_storage._zumba {return false}
        if _storage._rower != rhs_storage._rower {return false}
        if _storage._elliptical != rhs_storage._elliptical {return false}
        if _storage._ctraining != rhs_storage._ctraining {return false}
        if _storage._tstraining != rhs_storage._tstraining {return false}
        if _storage._fstraining != rhs_storage._fstraining {return false}
        if _storage._hiit != rhs_storage._hiit {return false}
        if _storage._cooldown != rhs_storage._cooldown {return false}
        if _storage._workout != rhs_storage._workout {return false}
        if _storage._fitness != rhs_storage._fitness {return false}
        if _storage._trailRunning != rhs_storage._trailRunning {return false}
        if _storage._treadmill != rhs_storage._treadmill {return false}
        if _storage._aerobics != rhs_storage._aerobics {return false}
        if _storage._sitUp != rhs_storage._sitUp {return false}
        if _storage._plank != rhs_storage._plank {return false}
        if _storage._jumpingJack != rhs_storage._jumpingJack {return false}
        if _storage._chinUp != rhs_storage._chinUp {return false}
        if _storage._pushUp != rhs_storage._pushUp {return false}
        if _storage._deepSquat != rhs_storage._deepSquat {return false}
        if _storage._highKneeLift != rhs_storage._highKneeLift {return false}
        if _storage._dumbbell != rhs_storage._dumbbell {return false}
        if _storage._barbell != rhs_storage._barbell {return false}
        if _storage._boxing != rhs_storage._boxing {return false}
        if _storage._kickboxing != rhs_storage._kickboxing {return false}
        if _storage._horizontalBar != rhs_storage._horizontalBar {return false}
        if _storage._parallelBars != rhs_storage._parallelBars {return false}
        if _storage._walkingMachine != rhs_storage._walkingMachine {return false}
        if _storage._summitTrainers != rhs_storage._summitTrainers {return false}
        if _storage._bowling != rhs_storage._bowling {return false}
        if _storage._tennis != rhs_storage._tennis {return false}
        if _storage._tableTennis != rhs_storage._tableTennis {return false}
        if _storage._golf != rhs_storage._golf {return false}
        if _storage._basketball != rhs_storage._basketball {return false}
        if _storage._badminton != rhs_storage._badminton {return false}
        if _storage._hockey != rhs_storage._hockey {return false}
        if _storage._rugby != rhs_storage._rugby {return false}
        if _storage._handball != rhs_storage._handball {return false}
        if _storage._squash != rhs_storage._squash {return false}
        if _storage._baseball != rhs_storage._baseball {return false}
        if _storage._softball != rhs_storage._softball {return false}
        if _storage._shuttlecock != rhs_storage._shuttlecock {return false}
        if _storage._sepaktakraw != rhs_storage._sepaktakraw {return false}
        if _storage._streetDance != rhs_storage._streetDance {return false}
        if _storage._mountainClinbing != rhs_storage._mountainClinbing {return false}
        if _storage._ropeSkipping != rhs_storage._ropeSkipping {return false}
        if _storage._climbStairs != rhs_storage._climbStairs {return false}
        if _storage._ballet != rhs_storage._ballet {return false}
        if _storage._socialDance != rhs_storage._socialDance {return false}
        if _storage._darts != rhs_storage._darts {return false}
        if _storage._horsebackRiding != rhs_storage._horsebackRiding {return false}
        if _storage._rollerSkating != rhs_storage._rollerSkating {return false}
        if _storage._taiChi != rhs_storage._taiChi {return false}
        if _storage._frisbee != rhs_storage._frisbee {return false}
        if _storage._hulaHoop != rhs_storage._hulaHoop {return false}
        if _storage._sleigh != rhs_storage._sleigh {return false}
        if _storage._skating != rhs_storage._skating {return false}
        if _storage._bobsleighAndTobogganing != rhs_storage._bobsleighAndTobogganing {return false}
        if _storage._curling != rhs_storage._curling {return false}
        if _storage._iceHockey != rhs_storage._iceHockey {return false}
        if _storage._surfing != rhs_storage._surfing {return false}
        if _storage._sailboat != rhs_storage._sailboat {return false}
        if _storage._sailboard != rhs_storage._sailboard {return false}
        if _storage._foldboating != rhs_storage._foldboating {return false}
        if _storage._canoeing != rhs_storage._canoeing {return false}
        if _storage._boatRace != rhs_storage._boatRace {return false}
        if _storage._motorboat != rhs_storage._motorboat {return false}
        if _storage._waterPolo != rhs_storage._waterPolo {return false}
        if _storage._slidingPlate != rhs_storage._slidingPlate {return false}
        if _storage._rockClimbing != rhs_storage._rockClimbing {return false}
        if _storage._bungeeJumping != rhs_storage._bungeeJumping {return false}
        if _storage._parkour != rhs_storage._parkour {return false}
        if _storage._other != rhs_storage._other {return false}
        if _storage._spinning != rhs_storage._spinning {return false}
        if _storage._martialArts != rhs_storage._martialArts {return false}
        if _storage._taekwondo != rhs_storage._taekwondo {return false}
        if _storage._karate != rhs_storage._karate {return false}
        if _storage._gymnastics != rhs_storage._gymnastics {return false}
        if _storage._padel != rhs_storage._padel {return false}
        if _storage._pickleball != rhs_storage._pickleball {return false}
        if _storage._snowboarding != rhs_storage._snowboarding {return false}
        if _storage._skiing != rhs_storage._skiing {return false}
        if _storage._paddling != rhs_storage._paddling {return false}
        if _storage._bmx != rhs_storage._bmx {return false}
        if _storage._fencing != rhs_storage._fencing {return false}
        if _storage._billiards != rhs_storage._billiards {return false}
        if _storage._beachSoccer != rhs_storage._beachSoccer {return false}
        if _storage._beachVolleyball != rhs_storage._beachVolleyball {return false}
        if _storage._dodgeball != rhs_storage._dodgeball {return false}
        if _storage._jazz != rhs_storage._jazz {return false}
        if _storage._latin != rhs_storage._latin {return false}
        if _storage._squareDance != rhs_storage._squareDance {return false}
        if _storage._volleyball != rhs_storage._volleyball {return false}
        if _storage._kiteFlying != rhs_storage._kiteFlying {return false}
        if _storage._fishing != rhs_storage._fishing {return false}
        if _storage._archery != rhs_storage._archery {return false}
        if _storage._shooting != rhs_storage._shooting {return false}
        if _storage._whiteWaterRafting != rhs_storage._whiteWaterRafting {return false}
        if _storage._alpineSkiing != rhs_storage._alpineSkiing {return false}
        if _storage._crossCountrySkiing != rhs_storage._crossCountrySkiing {return false}
        if _storage._biathon != rhs_storage._biathon {return false}
        if _storage._dragonBoatRacing != rhs_storage._dragonBoatRacing {return false}
        if _storage._racing != rhs_storage._racing {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_exercise_sport_mode_sort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_sport_mode_sort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "items_len"),
    3: .standard(proto: "sport_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.itemsLen) }()
      case 3: try { try decoder.decodeRepeatedEnumField(value: &self.sportItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.itemsLen != 0 {
      try visitor.visitSingularUInt32Field(value: self.itemsLen, fieldNumber: 2)
    }
    if !self.sportItems.isEmpty {
      try visitor.visitPackedEnumField(value: self.sportItems, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_sport_mode_sort, rhs: protocol_exercise_sport_mode_sort) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.itemsLen != rhs.itemsLen {return false}
    if lhs.sportItems != rhs.sportItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_exercise_sport_mode_sort_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_sport_mode_sort_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "min_show_num"),
    3: .standard(proto: "max_show_num"),
    4: .standard(proto: "all_num"),
    5: .standard(proto: "items_len"),
    6: .standard(proto: "sport_items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.minShowNum) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.maxShowNum) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.allNum) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.itemsLen) }()
      case 6: try { try decoder.decodeRepeatedEnumField(value: &self.sportItems) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.minShowNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.minShowNum, fieldNumber: 2)
    }
    if self.maxShowNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.maxShowNum, fieldNumber: 3)
    }
    if self.allNum != 0 {
      try visitor.visitSingularUInt32Field(value: self.allNum, fieldNumber: 4)
    }
    if self.itemsLen != 0 {
      try visitor.visitSingularUInt32Field(value: self.itemsLen, fieldNumber: 5)
    }
    if !self.sportItems.isEmpty {
      try visitor.visitPackedEnumField(value: self.sportItems, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_sport_mode_sort_inquire_reply, rhs: protocol_exercise_sport_mode_sort_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.minShowNum != rhs.minShowNum {return false}
    if lhs.maxShowNum != rhs.maxShowNum {return false}
    if lhs.allNum != rhs.allNum {return false}
    if lhs.itemsLen != rhs.itemsLen {return false}
    if lhs.sportItems != rhs.sportItems {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_exercise_sporting_param_sort: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_sporting_param_sort"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "sport_type"),
    3: .standard(proto: "items_len"),
    4: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.sportType) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.itemsLen) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.sportType != 0 {
      try visitor.visitSingularUInt32Field(value: self.sportType, fieldNumber: 2)
    }
    if self.itemsLen != 0 {
      try visitor.visitSingularUInt32Field(value: self.itemsLen, fieldNumber: 3)
    }
    if !self.items.isEmpty {
      try visitor.visitSingularBytesField(value: self.items, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_sporting_param_sort, rhs: protocol_exercise_sporting_param_sort) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.sportType != rhs.sportType {return false}
    if lhs.itemsLen != rhs.itemsLen {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_exercise_sporting_param_sort_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_sporting_param_sort_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "sport_type"),
    3: .standard(proto: "items_len"),
    4: .same(proto: "items"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.sportType) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.itemsLen) }()
      case 4: try { try decoder.decodeSingularBytesField(value: &self.items) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.sportType != .orun {
      try visitor.visitSingularEnumField(value: self.sportType, fieldNumber: 2)
    }
    if self.itemsLen != 0 {
      try visitor.visitSingularUInt32Field(value: self.itemsLen, fieldNumber: 3)
    }
    if !self.items.isEmpty {
      try visitor.visitSingularBytesField(value: self.items, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_sporting_param_sort_inquire_reply, rhs: protocol_exercise_sporting_param_sort_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.sportType != rhs.sportType {return false}
    if lhs.itemsLen != rhs.itemsLen {return false}
    if lhs.items != rhs.items {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_exercise_intelligent_recognition: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_intelligent_recognition"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "walk_type_switch"),
    3: .standard(proto: "run_type_switch"),
    4: .standard(proto: "bicycle_type_switch"),
    5: .standard(proto: "rowing_type_switch"),
    6: .standard(proto: "swim_type_switch"),
    7: .standard(proto: "sport_auto_pause_switch"),
    8: .standard(proto: "sport_auto_end_switch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.walkTypeSwitch) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.runTypeSwitch) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.bicycleTypeSwitch) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.rowingTypeSwitch) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.swimTypeSwitch) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.sportAutoPauseSwitch) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.sportAutoEndSwitch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.walkTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.walkTypeSwitch, fieldNumber: 2)
    }
    if self.runTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.runTypeSwitch, fieldNumber: 3)
    }
    if self.bicycleTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.bicycleTypeSwitch, fieldNumber: 4)
    }
    if self.rowingTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.rowingTypeSwitch, fieldNumber: 5)
    }
    if self.swimTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.swimTypeSwitch, fieldNumber: 6)
    }
    if self.sportAutoPauseSwitch != false {
      try visitor.visitSingularBoolField(value: self.sportAutoPauseSwitch, fieldNumber: 7)
    }
    if self.sportAutoEndSwitch != false {
      try visitor.visitSingularBoolField(value: self.sportAutoEndSwitch, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_intelligent_recognition, rhs: protocol_exercise_intelligent_recognition) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.walkTypeSwitch != rhs.walkTypeSwitch {return false}
    if lhs.runTypeSwitch != rhs.runTypeSwitch {return false}
    if lhs.bicycleTypeSwitch != rhs.bicycleTypeSwitch {return false}
    if lhs.rowingTypeSwitch != rhs.rowingTypeSwitch {return false}
    if lhs.swimTypeSwitch != rhs.swimTypeSwitch {return false}
    if lhs.sportAutoPauseSwitch != rhs.sportAutoPauseSwitch {return false}
    if lhs.sportAutoEndSwitch != rhs.sportAutoEndSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_exercise_intelligent_recognition_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_intelligent_recognition_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "walk_type_switch"),
    3: .standard(proto: "run_type_switch"),
    4: .standard(proto: "bicycle_type_switch"),
    5: .standard(proto: "rowing_type_switch"),
    6: .standard(proto: "swim_type_switch"),
    7: .standard(proto: "sport_auto_pause_switch"),
    8: .standard(proto: "sport_auto_end_switch"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.walkTypeSwitch) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.runTypeSwitch) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.bicycleTypeSwitch) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.rowingTypeSwitch) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.swimTypeSwitch) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.sportAutoPauseSwitch) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.sportAutoEndSwitch) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.walkTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.walkTypeSwitch, fieldNumber: 2)
    }
    if self.runTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.runTypeSwitch, fieldNumber: 3)
    }
    if self.bicycleTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.bicycleTypeSwitch, fieldNumber: 4)
    }
    if self.rowingTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.rowingTypeSwitch, fieldNumber: 5)
    }
    if self.swimTypeSwitch != false {
      try visitor.visitSingularBoolField(value: self.swimTypeSwitch, fieldNumber: 6)
    }
    if self.sportAutoPauseSwitch != false {
      try visitor.visitSingularBoolField(value: self.sportAutoPauseSwitch, fieldNumber: 7)
    }
    if self.sportAutoEndSwitch != false {
      try visitor.visitSingularBoolField(value: self.sportAutoEndSwitch, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_intelligent_recognition_inquire_reply, rhs: protocol_exercise_intelligent_recognition_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.walkTypeSwitch != rhs.walkTypeSwitch {return false}
    if lhs.runTypeSwitch != rhs.runTypeSwitch {return false}
    if lhs.bicycleTypeSwitch != rhs.bicycleTypeSwitch {return false}
    if lhs.rowingTypeSwitch != rhs.rowingTypeSwitch {return false}
    if lhs.swimTypeSwitch != rhs.swimTypeSwitch {return false}
    if lhs.sportAutoPauseSwitch != rhs.sportAutoPauseSwitch {return false}
    if lhs.sportAutoEndSwitch != rhs.sportAutoEndSwitch {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_exercise_heart_rate_zone: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_exercise_heart_rate_zone"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .same(proto: "zone1"),
    3: .same(proto: "zone2"),
    4: .same(proto: "zone3"),
    5: .same(proto: "zone4"),
    6: .same(proto: "zone5"),
    7: .same(proto: "zone6"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.zone1) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.zone2) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.zone3) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.zone4) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.zone5) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.zone6) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.zone1 != 0 {
      try visitor.visitSingularUInt32Field(value: self.zone1, fieldNumber: 2)
    }
    if self.zone2 != 0 {
      try visitor.visitSingularUInt32Field(value: self.zone2, fieldNumber: 3)
    }
    if self.zone3 != 0 {
      try visitor.visitSingularUInt32Field(value: self.zone3, fieldNumber: 4)
    }
    if self.zone4 != 0 {
      try visitor.visitSingularUInt32Field(value: self.zone4, fieldNumber: 5)
    }
    if self.zone5 != 0 {
      try visitor.visitSingularUInt32Field(value: self.zone5, fieldNumber: 6)
    }
    if self.zone6 != 0 {
      try visitor.visitSingularUInt32Field(value: self.zone6, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_exercise_heart_rate_zone, rhs: protocol_exercise_heart_rate_zone) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.zone1 != rhs.zone1 {return false}
    if lhs.zone2 != rhs.zone2 {return false}
    if lhs.zone3 != rhs.zone3 {return false}
    if lhs.zone4 != rhs.zone4 {return false}
    if lhs.zone5 != rhs.zone5 {return false}
    if lhs.zone6 != rhs.zone6 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
