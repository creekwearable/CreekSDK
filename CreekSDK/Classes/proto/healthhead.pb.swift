// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: healthhead.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_health_sync_head: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///同步操作
  public var syncOperate: sync_operate = .startSync

  public var syncType: sync_type = .syncHeartRate

  ///1bytes 同步数据偏移小时
  public var dataOffset: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_health_sync_head_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///同步操作
  public var syncOperate: sync_operate = .startSync

  public var syncType: sync_type = .syncHeartRate

  ///1bytes 同步数据结束小时
  public var dataOffsetr: UInt32 = 0

  ///有效数据大小
  public var dataSize: UInt32 = 0

  ///是否有下一条数据 true:有 false 没有 同步操作为结束才有效
  public var haveNextData: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_health_sync_head: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_sync_head"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sync_operate"),
    2: .standard(proto: "sync_type"),
    3: .standard(proto: "data_offset"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.syncOperate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.syncType) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.dataOffset) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.syncOperate != .startSync {
      try visitor.visitSingularEnumField(value: self.syncOperate, fieldNumber: 1)
    }
    if self.syncType != .syncHeartRate {
      try visitor.visitSingularEnumField(value: self.syncType, fieldNumber: 2)
    }
    if self.dataOffset != 0 {
      try visitor.visitSingularUInt32Field(value: self.dataOffset, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_sync_head, rhs: protocol_health_sync_head) -> Bool {
    if lhs.syncOperate != rhs.syncOperate {return false}
    if lhs.syncType != rhs.syncType {return false}
    if lhs.dataOffset != rhs.dataOffset {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_health_sync_head_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_health_sync_head_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "sync_operate"),
    2: .standard(proto: "sync_type"),
    3: .standard(proto: "data_offsetr"),
    4: .standard(proto: "data_size"),
    5: .standard(proto: "have_next_data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.syncOperate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.syncType) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.dataOffsetr) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.dataSize) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.haveNextData) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.syncOperate != .startSync {
      try visitor.visitSingularEnumField(value: self.syncOperate, fieldNumber: 1)
    }
    if self.syncType != .syncHeartRate {
      try visitor.visitSingularEnumField(value: self.syncType, fieldNumber: 2)
    }
    if self.dataOffsetr != 0 {
      try visitor.visitSingularUInt32Field(value: self.dataOffsetr, fieldNumber: 3)
    }
    if self.dataSize != 0 {
      try visitor.visitSingularUInt32Field(value: self.dataSize, fieldNumber: 4)
    }
    if self.haveNextData != false {
      try visitor.visitSingularBoolField(value: self.haveNextData, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_health_sync_head_reply, rhs: protocol_health_sync_head_reply) -> Bool {
    if lhs.syncOperate != rhs.syncOperate {return false}
    if lhs.syncType != rhs.syncType {return false}
    if lhs.dataOffsetr != rhs.dataOffsetr {return false}
    if lhs.dataSize != rhs.dataSize {return false}
    if lhs.haveNextData != rhs.haveNextData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
