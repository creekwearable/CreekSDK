// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: findphone.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_find_phone_watch_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///1bytes 寻找手表开关 true 开启,false 关闭
  public var findWatchSwitch: Bool = false

  ///1bytes 寻找手表 0 停止 1:开始
  public var findWatchFlag: Bool = false

  ///1bytes 寻找手机关闭 1关闭
  public var findPhoneCloseFlag: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_find_phone_watch_inquire_reply: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  public var funcTable: UInt32 = 0

  ///1bytes 寻找手表开关 true 开启,false 关闭
  public var findWatchSwitch: Bool = false

  ///是否支持寻找手表
  public var findWatchSupport: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_find_phone_watch_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_find_phone_watch_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "find_watch_switch"),
    3: .standard(proto: "find_watch_flag"),
    4: .standard(proto: "find_phone_close_flag"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.findWatchSwitch) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.findWatchFlag) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.findPhoneCloseFlag) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.findWatchSwitch != false {
      try visitor.visitSingularBoolField(value: self.findWatchSwitch, fieldNumber: 2)
    }
    if self.findWatchFlag != false {
      try visitor.visitSingularBoolField(value: self.findWatchFlag, fieldNumber: 3)
    }
    if self.findPhoneCloseFlag != false {
      try visitor.visitSingularBoolField(value: self.findPhoneCloseFlag, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_find_phone_watch_operate, rhs: protocol_find_phone_watch_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.findWatchSwitch != rhs.findWatchSwitch {return false}
    if lhs.findWatchFlag != rhs.findWatchFlag {return false}
    if lhs.findPhoneCloseFlag != rhs.findPhoneCloseFlag {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_find_phone_watch_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_find_phone_watch_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "func_table"),
    3: .standard(proto: "find_watch_switch"),
    4: .standard(proto: "find_watch_support"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.funcTable) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.findWatchSwitch) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.findWatchSupport) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.funcTable != 0 {
      try visitor.visitSingularUInt32Field(value: self.funcTable, fieldNumber: 2)
    }
    if self.findWatchSwitch != false {
      try visitor.visitSingularBoolField(value: self.findWatchSwitch, fieldNumber: 3)
    }
    if self.findWatchSupport != false {
      try visitor.visitSingularBoolField(value: self.findWatchSupport, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_find_phone_watch_inquire_reply, rhs: protocol_find_phone_watch_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.funcTable != rhs.funcTable {return false}
    if lhs.findWatchSwitch != rhs.findWatchSwitch {return false}
    if lhs.findWatchSupport != rhs.findWatchSupport {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
