// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: screen.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_screen_night_auto_adjust: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 夜间自动亮度调整 true 开启,false 关闭
  public var switchFlag: Bool = false

  ///开始时间
  public var startHour: UInt32 = 0

  public var startMinute: UInt32 = 0

  ///结束时间
  public var endHour: UInt32 = 0

  public var endMinute: UInt32 = 0

  ///1bytes 夜间亮度等级(0-100)
  public var nightLevel: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_screen_aod_time_setting: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var mode: aod_mode = .intelligentMode

  ///开始时间 定时模式
  public var startHour: UInt32 = 0

  public var startMinute: UInt32 = 0

  ///结束时间
  public var endHour: UInt32 = 0

  public var endMinute: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_screen_brightness_operate: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type {
    get {return _storage._operate}
    set {_uniqueStorage()._operate = newValue}
  }

  ///1bytes (0-100)
  public var level: UInt32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  ///1bytes 屏幕显示间隔 比如5秒
  public var showInterval: UInt32 {
    get {return _storage._showInterval}
    set {_uniqueStorage()._showInterval = newValue}
  }

  ///夜间自动亮度调整子项数据
  public var nightAutoAdjust: protocol_screen_night_auto_adjust {
    get {return _storage._nightAutoAdjust ?? protocol_screen_night_auto_adjust()}
    set {_uniqueStorage()._nightAutoAdjust = newValue}
  }
  /// Returns true if `nightAutoAdjust` has been explicitly set.
  public var hasNightAutoAdjust: Bool {return _storage._nightAutoAdjust != nil}
  /// Clears the value of `nightAutoAdjust`. Subsequent reads from it will return its default value.
  public mutating func clearNightAutoAdjust() {_uniqueStorage()._nightAutoAdjust = nil}

  ///1bytes 息屏显示开关 true 开启,false 关闭
  public var aodSwitchFlag: Bool {
    get {return _storage._aodSwitchFlag}
    set {_uniqueStorage()._aodSwitchFlag = newValue}
  }

  ///1bytes 抬腕时亮屏开关 true 开启,false 关闭
  public var raiseWristSwitchFlag: Bool {
    get {return _storage._raiseWristSwitchFlag}
    set {_uniqueStorage()._raiseWristSwitchFlag = newValue}
  }

  ///常亮模式选择
  public var aodTimeSetting: protocol_screen_aod_time_setting {
    get {return _storage._aodTimeSetting ?? protocol_screen_aod_time_setting()}
    set {_uniqueStorage()._aodTimeSetting = newValue}
  }
  /// Returns true if `aodTimeSetting` has been explicitly set.
  public var hasAodTimeSetting: Bool {return _storage._aodTimeSetting != nil}
  /// Clears the value of `aodTimeSetting`. Subsequent reads from it will return its default value.
  public mutating func clearAodTimeSetting() {_uniqueStorage()._aodTimeSetting = nil}

  ///是否设置亮度生效
  public var levelFlag: Bool {
    get {return _storage._levelFlag}
    set {_uniqueStorage()._levelFlag = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct protocol_screen_brightness_inquire_reply: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 功能表
  public var funcTable: UInt32 {
    get {return _storage._funcTable}
    set {_uniqueStorage()._funcTable = newValue}
  }

  ///1bytes操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type {
    get {return _storage._operate}
    set {_uniqueStorage()._operate = newValue}
  }

  ///1bytes (0-100)
  public var level: UInt32 {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  ///1bytes 屏幕显示间隔 单位:秒
  public var showInterval: UInt32 {
    get {return _storage._showInterval}
    set {_uniqueStorage()._showInterval = newValue}
  }

  ///夜间自动亮度调整子项数据
  public var nightAutoAdjust: protocol_screen_night_auto_adjust {
    get {return _storage._nightAutoAdjust ?? protocol_screen_night_auto_adjust()}
    set {_uniqueStorage()._nightAutoAdjust = newValue}
  }
  /// Returns true if `nightAutoAdjust` has been explicitly set.
  public var hasNightAutoAdjust: Bool {return _storage._nightAutoAdjust != nil}
  /// Clears the value of `nightAutoAdjust`. Subsequent reads from it will return its default value.
  public mutating func clearNightAutoAdjust() {_uniqueStorage()._nightAutoAdjust = nil}

  ///1bytes 常亮显示开关 true 开启,false 关闭
  public var aodSwitchFlag: Bool {
    get {return _storage._aodSwitchFlag}
    set {_uniqueStorage()._aodSwitchFlag = newValue}
  }

  ///1bytes 抬腕时亮屏开关 true 开启,false 关闭
  public var raiseWristSwitchFlag: Bool {
    get {return _storage._raiseWristSwitchFlag}
    set {_uniqueStorage()._raiseWristSwitchFlag = newValue}
  }

  ///常亮模式选择
  public var aodTimeSetting: protocol_screen_aod_time_setting {
    get {return _storage._aodTimeSetting ?? protocol_screen_aod_time_setting()}
    set {_uniqueStorage()._aodTimeSetting = newValue}
  }
  /// Returns true if `aodTimeSetting` has been explicitly set.
  public var hasAodTimeSetting: Bool {return _storage._aodTimeSetting != nil}
  /// Clears the value of `aodTimeSetting`. Subsequent reads from it will return its default value.
  public mutating func clearAodTimeSetting() {_uniqueStorage()._aodTimeSetting = nil}

  ///亮屏时长显示选项 单位:秒
  public var showIntervalOptions: [UInt32] {
    get {return _storage._showIntervalOptions}
    set {_uniqueStorage()._showIntervalOptions = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_screen_night_auto_adjust: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_screen_night_auto_adjust"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "switch_flag"),
    2: .standard(proto: "start_hour"),
    3: .standard(proto: "start_minute"),
    4: .standard(proto: "end_hour"),
    5: .standard(proto: "end_minute"),
    6: .standard(proto: "night_level"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.switchFlag) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.startHour) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.startMinute) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.endHour) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.endMinute) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.nightLevel) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.switchFlag != false {
      try visitor.visitSingularBoolField(value: self.switchFlag, fieldNumber: 1)
    }
    if self.startHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.startHour, fieldNumber: 2)
    }
    if self.startMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.startMinute, fieldNumber: 3)
    }
    if self.endHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.endHour, fieldNumber: 4)
    }
    if self.endMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.endMinute, fieldNumber: 5)
    }
    if self.nightLevel != 0 {
      try visitor.visitSingularUInt32Field(value: self.nightLevel, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_screen_night_auto_adjust, rhs: protocol_screen_night_auto_adjust) -> Bool {
    if lhs.switchFlag != rhs.switchFlag {return false}
    if lhs.startHour != rhs.startHour {return false}
    if lhs.startMinute != rhs.startMinute {return false}
    if lhs.endHour != rhs.endHour {return false}
    if lhs.endMinute != rhs.endMinute {return false}
    if lhs.nightLevel != rhs.nightLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_screen_aod_time_setting: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_screen_aod_time_setting"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "mode"),
    2: .standard(proto: "start_hour"),
    3: .standard(proto: "start_minute"),
    4: .standard(proto: "end_hour"),
    5: .standard(proto: "end_minute"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.mode) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.startHour) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.startMinute) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.endHour) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.endMinute) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.mode != .intelligentMode {
      try visitor.visitSingularEnumField(value: self.mode, fieldNumber: 1)
    }
    if self.startHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.startHour, fieldNumber: 2)
    }
    if self.startMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.startMinute, fieldNumber: 3)
    }
    if self.endHour != 0 {
      try visitor.visitSingularUInt32Field(value: self.endHour, fieldNumber: 4)
    }
    if self.endMinute != 0 {
      try visitor.visitSingularUInt32Field(value: self.endMinute, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_screen_aod_time_setting, rhs: protocol_screen_aod_time_setting) -> Bool {
    if lhs.mode != rhs.mode {return false}
    if lhs.startHour != rhs.startHour {return false}
    if lhs.startMinute != rhs.startMinute {return false}
    if lhs.endHour != rhs.endHour {return false}
    if lhs.endMinute != rhs.endMinute {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_screen_brightness_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_screen_brightness_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .same(proto: "level"),
    3: .standard(proto: "show_interval"),
    4: .standard(proto: "night_auto_adjust"),
    5: .standard(proto: "aod_switch_flag"),
    6: .standard(proto: "raise_wrist_switch_flag"),
    7: .standard(proto: "aod_time_setting"),
    8: .standard(proto: "level_flag"),
  ]

  fileprivate class _StorageClass {
    var _operate: operate_type = .invalid
    var _level: UInt32 = 0
    var _showInterval: UInt32 = 0
    var _nightAutoAdjust: protocol_screen_night_auto_adjust? = nil
    var _aodSwitchFlag: Bool = false
    var _raiseWristSwitchFlag: Bool = false
    var _aodTimeSetting: protocol_screen_aod_time_setting? = nil
    var _levelFlag: Bool = false

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _operate = source._operate
      _level = source._level
      _showInterval = source._showInterval
      _nightAutoAdjust = source._nightAutoAdjust
      _aodSwitchFlag = source._aodSwitchFlag
      _raiseWristSwitchFlag = source._raiseWristSwitchFlag
      _aodTimeSetting = source._aodTimeSetting
      _levelFlag = source._levelFlag
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._operate) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._level) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._showInterval) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._nightAutoAdjust) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._aodSwitchFlag) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._raiseWristSwitchFlag) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._aodTimeSetting) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._levelFlag) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._operate != .invalid {
        try visitor.visitSingularEnumField(value: _storage._operate, fieldNumber: 1)
      }
      if _storage._level != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._level, fieldNumber: 2)
      }
      if _storage._showInterval != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._showInterval, fieldNumber: 3)
      }
      try { if let v = _storage._nightAutoAdjust {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      if _storage._aodSwitchFlag != false {
        try visitor.visitSingularBoolField(value: _storage._aodSwitchFlag, fieldNumber: 5)
      }
      if _storage._raiseWristSwitchFlag != false {
        try visitor.visitSingularBoolField(value: _storage._raiseWristSwitchFlag, fieldNumber: 6)
      }
      try { if let v = _storage._aodTimeSetting {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if _storage._levelFlag != false {
        try visitor.visitSingularBoolField(value: _storage._levelFlag, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_screen_brightness_operate, rhs: protocol_screen_brightness_operate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operate != rhs_storage._operate {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._showInterval != rhs_storage._showInterval {return false}
        if _storage._nightAutoAdjust != rhs_storage._nightAutoAdjust {return false}
        if _storage._aodSwitchFlag != rhs_storage._aodSwitchFlag {return false}
        if _storage._raiseWristSwitchFlag != rhs_storage._raiseWristSwitchFlag {return false}
        if _storage._aodTimeSetting != rhs_storage._aodTimeSetting {return false}
        if _storage._levelFlag != rhs_storage._levelFlag {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_screen_brightness_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_screen_brightness_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "func_table"),
    2: .same(proto: "operate"),
    3: .same(proto: "level"),
    4: .standard(proto: "show_interval"),
    5: .standard(proto: "night_auto_adjust"),
    6: .standard(proto: "aod_switch_flag"),
    7: .standard(proto: "raise_wrist_switch_flag"),
    8: .standard(proto: "aod_time_setting"),
    9: .standard(proto: "show_interval_options"),
  ]

  fileprivate class _StorageClass {
    var _funcTable: UInt32 = 0
    var _operate: operate_type = .invalid
    var _level: UInt32 = 0
    var _showInterval: UInt32 = 0
    var _nightAutoAdjust: protocol_screen_night_auto_adjust? = nil
    var _aodSwitchFlag: Bool = false
    var _raiseWristSwitchFlag: Bool = false
    var _aodTimeSetting: protocol_screen_aod_time_setting? = nil
    var _showIntervalOptions: [UInt32] = []

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _funcTable = source._funcTable
      _operate = source._operate
      _level = source._level
      _showInterval = source._showInterval
      _nightAutoAdjust = source._nightAutoAdjust
      _aodSwitchFlag = source._aodSwitchFlag
      _raiseWristSwitchFlag = source._raiseWristSwitchFlag
      _aodTimeSetting = source._aodTimeSetting
      _showIntervalOptions = source._showIntervalOptions
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._funcTable) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._operate) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._level) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._showInterval) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._nightAutoAdjust) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._aodSwitchFlag) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._raiseWristSwitchFlag) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._aodTimeSetting) }()
        case 9: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._showIntervalOptions) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if _storage._funcTable != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._funcTable, fieldNumber: 1)
      }
      if _storage._operate != .invalid {
        try visitor.visitSingularEnumField(value: _storage._operate, fieldNumber: 2)
      }
      if _storage._level != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._level, fieldNumber: 3)
      }
      if _storage._showInterval != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._showInterval, fieldNumber: 4)
      }
      try { if let v = _storage._nightAutoAdjust {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      if _storage._aodSwitchFlag != false {
        try visitor.visitSingularBoolField(value: _storage._aodSwitchFlag, fieldNumber: 6)
      }
      if _storage._raiseWristSwitchFlag != false {
        try visitor.visitSingularBoolField(value: _storage._raiseWristSwitchFlag, fieldNumber: 7)
      }
      try { if let v = _storage._aodTimeSetting {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      if !_storage._showIntervalOptions.isEmpty {
        try visitor.visitPackedUInt32Field(value: _storage._showIntervalOptions, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_screen_brightness_inquire_reply, rhs: protocol_screen_brightness_inquire_reply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._funcTable != rhs_storage._funcTable {return false}
        if _storage._operate != rhs_storage._operate {return false}
        if _storage._level != rhs_storage._level {return false}
        if _storage._showInterval != rhs_storage._showInterval {return false}
        if _storage._nightAutoAdjust != rhs_storage._nightAutoAdjust {return false}
        if _storage._aodSwitchFlag != rhs_storage._aodSwitchFlag {return false}
        if _storage._raiseWristSwitchFlag != rhs_storage._raiseWristSwitchFlag {return false}
        if _storage._aodTimeSetting != rhs_storage._aodTimeSetting {return false}
        if _storage._showIntervalOptions != rhs_storage._showIntervalOptions {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
