// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: language.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_language_operate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  ///1bytes set language, 0x01 Chinese 0x02 English...
  public var curLanguage: language = .langInvalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_language_inquire_reply {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes operation type 0: invalid operation 1: query 2: set
  public var operate: operate_type = .invalid

  public var curLanguage: language = .langInvalid

  ///1bytes Chinese
  public var chineseSupport: Bool = false

  ///1bytes English
  public var englishSupport: Bool = false

  ///1bytes German
  public var germanSupport: Bool = false

  ///1bytes Spanish
  public var spanishSupport: Bool = false

  ///1bytes Italian
  public var italianSupport: Bool = false

  ///1bytes Japanese
  public var japaneseSupport: Bool = false

  ///1bytes Russian
  public var russianSupport: Bool = false

  ///1bytes Portuguese
  public var portugueseSupport: Bool = false

  ///1bytes French
  public var frenchSupport: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension protocol_language_operate: @unchecked Sendable {}
extension protocol_language_inquire_reply: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_language_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_language_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "cur_language"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.curLanguage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.curLanguage != .langInvalid {
      try visitor.visitSingularEnumField(value: self.curLanguage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_language_operate, rhs: protocol_language_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.curLanguage != rhs.curLanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_language_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_language_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "cur_language"),
    3: .standard(proto: "chinese_support"),
    4: .standard(proto: "english_support"),
    5: .standard(proto: "german_support"),
    6: .standard(proto: "spanish_support"),
    7: .standard(proto: "italian_support"),
    8: .standard(proto: "japanese_support"),
    9: .standard(proto: "russian_support"),
    10: .standard(proto: "portuguese_support"),
    11: .standard(proto: "french_support"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.curLanguage) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.chineseSupport) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self.englishSupport) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self.germanSupport) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self.spanishSupport) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self.italianSupport) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.japaneseSupport) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self.russianSupport) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self.portugueseSupport) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self.frenchSupport) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.curLanguage != .langInvalid {
      try visitor.visitSingularEnumField(value: self.curLanguage, fieldNumber: 2)
    }
    if self.chineseSupport != false {
      try visitor.visitSingularBoolField(value: self.chineseSupport, fieldNumber: 3)
    }
    if self.englishSupport != false {
      try visitor.visitSingularBoolField(value: self.englishSupport, fieldNumber: 4)
    }
    if self.germanSupport != false {
      try visitor.visitSingularBoolField(value: self.germanSupport, fieldNumber: 5)
    }
    if self.spanishSupport != false {
      try visitor.visitSingularBoolField(value: self.spanishSupport, fieldNumber: 6)
    }
    if self.italianSupport != false {
      try visitor.visitSingularBoolField(value: self.italianSupport, fieldNumber: 7)
    }
    if self.japaneseSupport != false {
      try visitor.visitSingularBoolField(value: self.japaneseSupport, fieldNumber: 8)
    }
    if self.russianSupport != false {
      try visitor.visitSingularBoolField(value: self.russianSupport, fieldNumber: 9)
    }
    if self.portugueseSupport != false {
      try visitor.visitSingularBoolField(value: self.portugueseSupport, fieldNumber: 10)
    }
    if self.frenchSupport != false {
      try visitor.visitSingularBoolField(value: self.frenchSupport, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_language_inquire_reply, rhs: protocol_language_inquire_reply) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.curLanguage != rhs.curLanguage {return false}
    if lhs.chineseSupport != rhs.chineseSupport {return false}
    if lhs.englishSupport != rhs.englishSupport {return false}
    if lhs.germanSupport != rhs.germanSupport {return false}
    if lhs.spanishSupport != rhs.spanishSupport {return false}
    if lhs.italianSupport != rhs.italianSupport {return false}
    if lhs.japaneseSupport != rhs.japaneseSupport {return false}
    if lhs.russianSupport != rhs.russianSupport {return false}
    if lhs.portugueseSupport != rhs.portugueseSupport {return false}
    if lhs.frenchSupport != rhs.frenchSupport {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
