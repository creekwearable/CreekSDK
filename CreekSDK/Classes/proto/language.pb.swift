// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: language.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct protocol_language_operate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes 操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type = .invalid

  ///1bytes 设置语言，0x01中文 0x02英语...
  public var curLanguage: language = .langInvalid

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct protocol_language_inquire_reply: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///1bytes操作类型 0：无效操作 1：查询 2：设置
  public var operate: operate_type {
    get {return _storage._operate}
    set {_uniqueStorage()._operate = newValue}
  }

  public var curLanguage: language {
    get {return _storage._curLanguage}
    set {_uniqueStorage()._curLanguage = newValue}
  }

  ///1bytes 中文
  public var chineseSupport: Bool {
    get {return _storage._chineseSupport}
    set {_uniqueStorage()._chineseSupport = newValue}
  }

  ///1bytes 英语
  public var englishSupport: Bool {
    get {return _storage._englishSupport}
    set {_uniqueStorage()._englishSupport = newValue}
  }

  ///1bytes 德语
  public var germanSupport: Bool {
    get {return _storage._germanSupport}
    set {_uniqueStorage()._germanSupport = newValue}
  }

  ///1bytes 西班牙语
  public var spanishSupport: Bool {
    get {return _storage._spanishSupport}
    set {_uniqueStorage()._spanishSupport = newValue}
  }

  ///1bytes 意大利语
  public var italianSupport: Bool {
    get {return _storage._italianSupport}
    set {_uniqueStorage()._italianSupport = newValue}
  }

  ///1bytes 日语
  public var janpaneseSupport: Bool {
    get {return _storage._janpaneseSupport}
    set {_uniqueStorage()._janpaneseSupport = newValue}
  }

  ///1bytes 俄罗斯语
  public var russianSupport: Bool {
    get {return _storage._russianSupport}
    set {_uniqueStorage()._russianSupport = newValue}
  }

  ///1bytes 葡萄牙语
  public var portugueseSupport: Bool {
    get {return _storage._portugueseSupport}
    set {_uniqueStorage()._portugueseSupport = newValue}
  }

  ///1bytes 法语
  public var frenchSupport: Bool {
    get {return _storage._frenchSupport}
    set {_uniqueStorage()._frenchSupport = newValue}
  }

  ///1bytes 韩语
  public var koreanSupport: Bool {
    get {return _storage._koreanSupport}
    set {_uniqueStorage()._koreanSupport = newValue}
  }

  ///1bytes 波兰语
  public var polishSupport: Bool {
    get {return _storage._polishSupport}
    set {_uniqueStorage()._polishSupport = newValue}
  }

  ///1bytes 捷克语
  public var czechSupport: Bool {
    get {return _storage._czechSupport}
    set {_uniqueStorage()._czechSupport = newValue}
  }

  ///1bytes 斯洛伐克语
  public var slovakSupport: Bool {
    get {return _storage._slovakSupport}
    set {_uniqueStorage()._slovakSupport = newValue}
  }

  ///1bytes 匈牙利语
  public var hungarianSupport: Bool {
    get {return _storage._hungarianSupport}
    set {_uniqueStorage()._hungarianSupport = newValue}
  }

  ///1bytes 希腊语
  public var greekSupport: Bool {
    get {return _storage._greekSupport}
    set {_uniqueStorage()._greekSupport = newValue}
  }

  ///1bytes 立陶宛语
  public var lithuanianSupport: Bool {
    get {return _storage._lithuanianSupport}
    set {_uniqueStorage()._lithuanianSupport = newValue}
  }

  ///1bytes 拉脱维亚语
  public var latvianSupport: Bool {
    get {return _storage._latvianSupport}
    set {_uniqueStorage()._latvianSupport = newValue}
  }

  ///1bytes 爱沙尼亚语
  public var estonianSupport: Bool {
    get {return _storage._estonianSupport}
    set {_uniqueStorage()._estonianSupport = newValue}
  }

  ///1bytes 保加利亚语
  public var bulgarianSupport: Bool {
    get {return _storage._bulgarianSupport}
    set {_uniqueStorage()._bulgarianSupport = newValue}
  }

  ///1bytes 马来语
  public var malaySupport: Bool {
    get {return _storage._malaySupport}
    set {_uniqueStorage()._malaySupport = newValue}
  }

  ///1bytes 印尼语
  public var indonesianSupport: Bool {
    get {return _storage._indonesianSupport}
    set {_uniqueStorage()._indonesianSupport = newValue}
  }

  ///1bytes 泰语
  public var thaiSupport: Bool {
    get {return _storage._thaiSupport}
    set {_uniqueStorage()._thaiSupport = newValue}
  }

  ///1bytes 越南语
  public var vietnameseSupport: Bool {
    get {return _storage._vietnameseSupport}
    set {_uniqueStorage()._vietnameseSupport = newValue}
  }

  ///1bytes 希伯来语
  public var hebrewSupport: Bool {
    get {return _storage._hebrewSupport}
    set {_uniqueStorage()._hebrewSupport = newValue}
  }

  ///1bytes 天城文
  public var devanagariSupport: Bool {
    get {return _storage._devanagariSupport}
    set {_uniqueStorage()._devanagariSupport = newValue}
  }

  ///1bytes 土耳其语
  public var turkeySupport: Bool {
    get {return _storage._turkeySupport}
    set {_uniqueStorage()._turkeySupport = newValue}
  }

  ///1bytes 罗马尼亚语
  public var romanianSupport: Bool {
    get {return _storage._romanianSupport}
    set {_uniqueStorage()._romanianSupport = newValue}
  }

  ///1bytes 荷兰语
  public var dutchSupport: Bool {
    get {return _storage._dutchSupport}
    set {_uniqueStorage()._dutchSupport = newValue}
  }

  ///1bytes 乌克兰语
  public var ukrainianSupport: Bool {
    get {return _storage._ukrainianSupport}
    set {_uniqueStorage()._ukrainianSupport = newValue}
  }

  ///1bytes 阿拉伯语
  public var arabicSupport: Bool {
    get {return _storage._arabicSupport}
    set {_uniqueStorage()._arabicSupport = newValue}
  }

  ///1bytes 波斯语
  public var farsiSupport: Bool {
    get {return _storage._farsiSupport}
    set {_uniqueStorage()._farsiSupport = newValue}
  }

  ///1bytes 中文繁体
  public var tradChineseSupport: Bool {
    get {return _storage._tradChineseSupport}
    set {_uniqueStorage()._tradChineseSupport = newValue}
  }

  ///1bytes 瑞典
  public var swedenSupport: Bool {
    get {return _storage._swedenSupport}
    set {_uniqueStorage()._swedenSupport = newValue}
  }

  ///1bytes 缅甸
  public var burmeseSupport: Bool {
    get {return _storage._burmeseSupport}
    set {_uniqueStorage()._burmeseSupport = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension protocol_language_operate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_language_operate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "cur_language"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.operate) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.curLanguage) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.operate != .invalid {
      try visitor.visitSingularEnumField(value: self.operate, fieldNumber: 1)
    }
    if self.curLanguage != .langInvalid {
      try visitor.visitSingularEnumField(value: self.curLanguage, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_language_operate, rhs: protocol_language_operate) -> Bool {
    if lhs.operate != rhs.operate {return false}
    if lhs.curLanguage != rhs.curLanguage {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension protocol_language_inquire_reply: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = "protocol_language_inquire_reply"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operate"),
    2: .standard(proto: "cur_language"),
    3: .standard(proto: "chinese_support"),
    4: .standard(proto: "english_support"),
    5: .standard(proto: "german_support"),
    6: .standard(proto: "spanish_support"),
    7: .standard(proto: "italian_support"),
    8: .standard(proto: "janpanese_support"),
    9: .standard(proto: "russian_support"),
    10: .standard(proto: "portuguese_support"),
    11: .standard(proto: "french_support"),
    12: .standard(proto: "korean_support"),
    13: .standard(proto: "polish_support"),
    14: .standard(proto: "czech_support"),
    15: .standard(proto: "slovak_support"),
    16: .standard(proto: "Hungarian_support"),
    17: .standard(proto: "greek_support"),
    18: .standard(proto: "lithuanian_support"),
    19: .standard(proto: "latvian_support"),
    20: .standard(proto: "estonian_support"),
    21: .standard(proto: "bulgarian_support"),
    22: .standard(proto: "malay_support"),
    23: .standard(proto: "indonesian_support"),
    24: .standard(proto: "thai_support"),
    25: .standard(proto: "vietnamese_support"),
    26: .standard(proto: "hebrew_support"),
    27: .standard(proto: "devanagari_support"),
    28: .standard(proto: "turkey_support"),
    29: .standard(proto: "romanian_support"),
    30: .standard(proto: "dutch_support"),
    31: .standard(proto: "ukrainian_support"),
    32: .standard(proto: "arabic_support"),
    33: .standard(proto: "farsi_support"),
    34: .standard(proto: "trad_chinese_support"),
    35: .standard(proto: "sweden_support"),
    36: .standard(proto: "burmese_support"),
  ]

  fileprivate class _StorageClass {
    var _operate: operate_type = .invalid
    var _curLanguage: language = .langInvalid
    var _chineseSupport: Bool = false
    var _englishSupport: Bool = false
    var _germanSupport: Bool = false
    var _spanishSupport: Bool = false
    var _italianSupport: Bool = false
    var _janpaneseSupport: Bool = false
    var _russianSupport: Bool = false
    var _portugueseSupport: Bool = false
    var _frenchSupport: Bool = false
    var _koreanSupport: Bool = false
    var _polishSupport: Bool = false
    var _czechSupport: Bool = false
    var _slovakSupport: Bool = false
    var _hungarianSupport: Bool = false
    var _greekSupport: Bool = false
    var _lithuanianSupport: Bool = false
    var _latvianSupport: Bool = false
    var _estonianSupport: Bool = false
    var _bulgarianSupport: Bool = false
    var _malaySupport: Bool = false
    var _indonesianSupport: Bool = false
    var _thaiSupport: Bool = false
    var _vietnameseSupport: Bool = false
    var _hebrewSupport: Bool = false
    var _devanagariSupport: Bool = false
    var _turkeySupport: Bool = false
    var _romanianSupport: Bool = false
    var _dutchSupport: Bool = false
    var _ukrainianSupport: Bool = false
    var _arabicSupport: Bool = false
    var _farsiSupport: Bool = false
    var _tradChineseSupport: Bool = false
    var _swedenSupport: Bool = false
    var _burmeseSupport: Bool = false

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _operate = source._operate
      _curLanguage = source._curLanguage
      _chineseSupport = source._chineseSupport
      _englishSupport = source._englishSupport
      _germanSupport = source._germanSupport
      _spanishSupport = source._spanishSupport
      _italianSupport = source._italianSupport
      _janpaneseSupport = source._janpaneseSupport
      _russianSupport = source._russianSupport
      _portugueseSupport = source._portugueseSupport
      _frenchSupport = source._frenchSupport
      _koreanSupport = source._koreanSupport
      _polishSupport = source._polishSupport
      _czechSupport = source._czechSupport
      _slovakSupport = source._slovakSupport
      _hungarianSupport = source._hungarianSupport
      _greekSupport = source._greekSupport
      _lithuanianSupport = source._lithuanianSupport
      _latvianSupport = source._latvianSupport
      _estonianSupport = source._estonianSupport
      _bulgarianSupport = source._bulgarianSupport
      _malaySupport = source._malaySupport
      _indonesianSupport = source._indonesianSupport
      _thaiSupport = source._thaiSupport
      _vietnameseSupport = source._vietnameseSupport
      _hebrewSupport = source._hebrewSupport
      _devanagariSupport = source._devanagariSupport
      _turkeySupport = source._turkeySupport
      _romanianSupport = source._romanianSupport
      _dutchSupport = source._dutchSupport
      _ukrainianSupport = source._ukrainianSupport
      _arabicSupport = source._arabicSupport
      _farsiSupport = source._farsiSupport
      _tradChineseSupport = source._tradChineseSupport
      _swedenSupport = source._swedenSupport
      _burmeseSupport = source._burmeseSupport
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._operate) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._curLanguage) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._chineseSupport) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._englishSupport) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._germanSupport) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._spanishSupport) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._italianSupport) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._janpaneseSupport) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._russianSupport) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._portugueseSupport) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._frenchSupport) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._koreanSupport) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._polishSupport) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._czechSupport) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._slovakSupport) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._hungarianSupport) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._greekSupport) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._lithuanianSupport) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._latvianSupport) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._estonianSupport) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._bulgarianSupport) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._malaySupport) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._indonesianSupport) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._thaiSupport) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._vietnameseSupport) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._hebrewSupport) }()
        case 27: try { try decoder.decodeSingularBoolField(value: &_storage._devanagariSupport) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._turkeySupport) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._romanianSupport) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._dutchSupport) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._ukrainianSupport) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._arabicSupport) }()
        case 33: try { try decoder.decodeSingularBoolField(value: &_storage._farsiSupport) }()
        case 34: try { try decoder.decodeSingularBoolField(value: &_storage._tradChineseSupport) }()
        case 35: try { try decoder.decodeSingularBoolField(value: &_storage._swedenSupport) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._burmeseSupport) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._operate != .invalid {
        try visitor.visitSingularEnumField(value: _storage._operate, fieldNumber: 1)
      }
      if _storage._curLanguage != .langInvalid {
        try visitor.visitSingularEnumField(value: _storage._curLanguage, fieldNumber: 2)
      }
      if _storage._chineseSupport != false {
        try visitor.visitSingularBoolField(value: _storage._chineseSupport, fieldNumber: 3)
      }
      if _storage._englishSupport != false {
        try visitor.visitSingularBoolField(value: _storage._englishSupport, fieldNumber: 4)
      }
      if _storage._germanSupport != false {
        try visitor.visitSingularBoolField(value: _storage._germanSupport, fieldNumber: 5)
      }
      if _storage._spanishSupport != false {
        try visitor.visitSingularBoolField(value: _storage._spanishSupport, fieldNumber: 6)
      }
      if _storage._italianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._italianSupport, fieldNumber: 7)
      }
      if _storage._janpaneseSupport != false {
        try visitor.visitSingularBoolField(value: _storage._janpaneseSupport, fieldNumber: 8)
      }
      if _storage._russianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._russianSupport, fieldNumber: 9)
      }
      if _storage._portugueseSupport != false {
        try visitor.visitSingularBoolField(value: _storage._portugueseSupport, fieldNumber: 10)
      }
      if _storage._frenchSupport != false {
        try visitor.visitSingularBoolField(value: _storage._frenchSupport, fieldNumber: 11)
      }
      if _storage._koreanSupport != false {
        try visitor.visitSingularBoolField(value: _storage._koreanSupport, fieldNumber: 12)
      }
      if _storage._polishSupport != false {
        try visitor.visitSingularBoolField(value: _storage._polishSupport, fieldNumber: 13)
      }
      if _storage._czechSupport != false {
        try visitor.visitSingularBoolField(value: _storage._czechSupport, fieldNumber: 14)
      }
      if _storage._slovakSupport != false {
        try visitor.visitSingularBoolField(value: _storage._slovakSupport, fieldNumber: 15)
      }
      if _storage._hungarianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._hungarianSupport, fieldNumber: 16)
      }
      if _storage._greekSupport != false {
        try visitor.visitSingularBoolField(value: _storage._greekSupport, fieldNumber: 17)
      }
      if _storage._lithuanianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._lithuanianSupport, fieldNumber: 18)
      }
      if _storage._latvianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._latvianSupport, fieldNumber: 19)
      }
      if _storage._estonianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._estonianSupport, fieldNumber: 20)
      }
      if _storage._bulgarianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._bulgarianSupport, fieldNumber: 21)
      }
      if _storage._malaySupport != false {
        try visitor.visitSingularBoolField(value: _storage._malaySupport, fieldNumber: 22)
      }
      if _storage._indonesianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._indonesianSupport, fieldNumber: 23)
      }
      if _storage._thaiSupport != false {
        try visitor.visitSingularBoolField(value: _storage._thaiSupport, fieldNumber: 24)
      }
      if _storage._vietnameseSupport != false {
        try visitor.visitSingularBoolField(value: _storage._vietnameseSupport, fieldNumber: 25)
      }
      if _storage._hebrewSupport != false {
        try visitor.visitSingularBoolField(value: _storage._hebrewSupport, fieldNumber: 26)
      }
      if _storage._devanagariSupport != false {
        try visitor.visitSingularBoolField(value: _storage._devanagariSupport, fieldNumber: 27)
      }
      if _storage._turkeySupport != false {
        try visitor.visitSingularBoolField(value: _storage._turkeySupport, fieldNumber: 28)
      }
      if _storage._romanianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._romanianSupport, fieldNumber: 29)
      }
      if _storage._dutchSupport != false {
        try visitor.visitSingularBoolField(value: _storage._dutchSupport, fieldNumber: 30)
      }
      if _storage._ukrainianSupport != false {
        try visitor.visitSingularBoolField(value: _storage._ukrainianSupport, fieldNumber: 31)
      }
      if _storage._arabicSupport != false {
        try visitor.visitSingularBoolField(value: _storage._arabicSupport, fieldNumber: 32)
      }
      if _storage._farsiSupport != false {
        try visitor.visitSingularBoolField(value: _storage._farsiSupport, fieldNumber: 33)
      }
      if _storage._tradChineseSupport != false {
        try visitor.visitSingularBoolField(value: _storage._tradChineseSupport, fieldNumber: 34)
      }
      if _storage._swedenSupport != false {
        try visitor.visitSingularBoolField(value: _storage._swedenSupport, fieldNumber: 35)
      }
      if _storage._burmeseSupport != false {
        try visitor.visitSingularBoolField(value: _storage._burmeseSupport, fieldNumber: 36)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: protocol_language_inquire_reply, rhs: protocol_language_inquire_reply) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operate != rhs_storage._operate {return false}
        if _storage._curLanguage != rhs_storage._curLanguage {return false}
        if _storage._chineseSupport != rhs_storage._chineseSupport {return false}
        if _storage._englishSupport != rhs_storage._englishSupport {return false}
        if _storage._germanSupport != rhs_storage._germanSupport {return false}
        if _storage._spanishSupport != rhs_storage._spanishSupport {return false}
        if _storage._italianSupport != rhs_storage._italianSupport {return false}
        if _storage._janpaneseSupport != rhs_storage._janpaneseSupport {return false}
        if _storage._russianSupport != rhs_storage._russianSupport {return false}
        if _storage._portugueseSupport != rhs_storage._portugueseSupport {return false}
        if _storage._frenchSupport != rhs_storage._frenchSupport {return false}
        if _storage._koreanSupport != rhs_storage._koreanSupport {return false}
        if _storage._polishSupport != rhs_storage._polishSupport {return false}
        if _storage._czechSupport != rhs_storage._czechSupport {return false}
        if _storage._slovakSupport != rhs_storage._slovakSupport {return false}
        if _storage._hungarianSupport != rhs_storage._hungarianSupport {return false}
        if _storage._greekSupport != rhs_storage._greekSupport {return false}
        if _storage._lithuanianSupport != rhs_storage._lithuanianSupport {return false}
        if _storage._latvianSupport != rhs_storage._latvianSupport {return false}
        if _storage._estonianSupport != rhs_storage._estonianSupport {return false}
        if _storage._bulgarianSupport != rhs_storage._bulgarianSupport {return false}
        if _storage._malaySupport != rhs_storage._malaySupport {return false}
        if _storage._indonesianSupport != rhs_storage._indonesianSupport {return false}
        if _storage._thaiSupport != rhs_storage._thaiSupport {return false}
        if _storage._vietnameseSupport != rhs_storage._vietnameseSupport {return false}
        if _storage._hebrewSupport != rhs_storage._hebrewSupport {return false}
        if _storage._devanagariSupport != rhs_storage._devanagariSupport {return false}
        if _storage._turkeySupport != rhs_storage._turkeySupport {return false}
        if _storage._romanianSupport != rhs_storage._romanianSupport {return false}
        if _storage._dutchSupport != rhs_storage._dutchSupport {return false}
        if _storage._ukrainianSupport != rhs_storage._ukrainianSupport {return false}
        if _storage._arabicSupport != rhs_storage._arabicSupport {return false}
        if _storage._farsiSupport != rhs_storage._farsiSupport {return false}
        if _storage._tradChineseSupport != rhs_storage._tradChineseSupport {return false}
        if _storage._swedenSupport != rhs_storage._swedenSupport {return false}
        if _storage._burmeseSupport != rhs_storage._burmeseSupport {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
